/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/harp-worker.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@here/harp-datasource-protocol/index-decoder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/index-decoder.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./lib/StyleSetEvaluator */ \"./node_modules/@here/harp-datasource-protocol/lib/StyleSetEvaluator.js\"));\n__export(__webpack_require__(/*! ./lib/Extruder */ \"./node_modules/@here/harp-datasource-protocol/lib/Extruder.js\"));\n__export(__webpack_require__(/*! ./lib/Outliner */ \"./node_modules/@here/harp-datasource-protocol/lib/Outliner.js\"));\n__export(__webpack_require__(/*! ./lib/Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\"));\n__export(__webpack_require__(/*! ./lib/ThreeBufferUtils */ \"./node_modules/@here/harp-datasource-protocol/lib/ThreeBufferUtils.js\"));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/index-decoder.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./lib/ColorUtils */ \"./node_modules/@here/harp-datasource-protocol/lib/ColorUtils.js\"));\n__export(__webpack_require__(/*! ./lib/Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\"));\n__export(__webpack_require__(/*! ./lib/Techniques */ \"./node_modules/@here/harp-datasource-protocol/lib/Techniques.js\"));\n__export(__webpack_require__(/*! ./lib/TechniqueParams */ \"./node_modules/@here/harp-datasource-protocol/lib/TechniqueParams.js\"));\n__export(__webpack_require__(/*! ./lib/Theme */ \"./node_modules/@here/harp-datasource-protocol/lib/Theme.js\"));\n__export(__webpack_require__(/*! ./lib/InterpolatedProperty */ \"./node_modules/@here/harp-datasource-protocol/lib/InterpolatedProperty.js\"));\n__export(__webpack_require__(/*! ./lib/InterpolatedPropertyDefs */ \"./node_modules/@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.js\"));\n__export(__webpack_require__(/*! ./lib/WorkerServiceProtocol */ \"./node_modules/@here/harp-datasource-protocol/lib/WorkerServiceProtocol.js\"));\n__export(__webpack_require__(/*! ./lib/WorkerTilerProtocol */ \"./node_modules/@here/harp-datasource-protocol/lib/WorkerTilerProtocol.js\"));\n__export(__webpack_require__(/*! ./lib/WorkerDecoderProtocol */ \"./node_modules/@here/harp-datasource-protocol/lib/WorkerDecoderProtocol.js\"));\n__export(__webpack_require__(/*! ./lib/DecodedTile */ \"./node_modules/@here/harp-datasource-protocol/lib/DecodedTile.js\"));\n__export(__webpack_require__(/*! ./lib/TileInfo */ \"./node_modules/@here/harp-datasource-protocol/lib/TileInfo.js\"));\n__export(__webpack_require__(/*! ./lib/ThemeVisitor */ \"./node_modules/@here/harp-datasource-protocol/lib/ThemeVisitor.js\"));\n__export(__webpack_require__(/*! ./lib/StringEncodedNumeral */ \"./node_modules/@here/harp-datasource-protocol/lib/StringEncodedNumeral.js\"));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/index.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/ColorUtils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/ColorUtils.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst SHIFT_TRANSPARENCY = 24;\nconst SHIFT_RED = 16;\nconst SHIFT_GREEN = 8;\nconst SHIFT_BLUE = 0;\n// tslint:disable: no-bitwise\n//    Allow bitwise operations for colors decoding\n// tslint:disable-next-line: no-bitwise\nconst HEX_FULL_CHANNEL = 0xff;\nconst HEX_RGB_MASK = 0xffffff;\nconst HEX_TRGB_MASK = 0xffffffff;\nconst tmpColor = new THREE.Color();\n/**\n * Utilities to convert RGBA colors encoded in custom number (hex) format to THREE.Color objects.\n *\n * The functions provided allows for conversion from and to our custom number based color format,\n * which contains transparency, red, green and blue color channels in a way that each channel\n * occupies 8 bits of resulting number (color format 0xTTRRGGBB).\n * In order to preserve compatibility with THREE.Color class and its hexadecimal color\n * representation, we do not store __alpha__ channel in encoded color's number, but replace it\n * with __transparency__ channel, which is simply opposite to alpha:\n * ```transparency = 0xFF - alpha```\n * Such channel value is stored on the oldest bits (octet) in the integral color (numeric) value,\n * so it is fully compatible with THREE.Color numerical representation (@see [[THREE.Color.getHex]],\n * [[THREE.Color.setHex]]).\n * See also [[getHexFromRgba]] and [[getRgbaFromHex]] for more info about conversion.\n */\nvar ColorUtils;\n(function (ColorUtils) {\n    /**\n     * Encodes RGBA channels in custom number coded format (represented in hex as 0xTTRRGGBB).\n     *\n     * We do not use direct alpha channel mapping to hex in order to preserve compatibility\n     * with THREE.js color format (0xRRGGBB). This is done by encoding transparency\n     * (255 - alpha) instead of alpha on the oldest bits, shifted by [[SHIFT_TRANSPARENCY]].\n     * This way simple 0xRRGGBB color is equal to 0x00RRGGBB without transparency and\n     * color defining transparency (alpha < 255) is always recognizable by the oldest\n     * bit set:\n     * ```typescript\n     * (color >> SHIFT_TRANSPARENCY) !== 0.\n     * ```\n     * @note All input components are floating points in <0, 1> range (inclusively).\n     * @note Although method encodes transparency channel in single number value, it is still\n     * compatible with THREE.js number based color coding (0xRRGGBB), so you may pass this value to\n     * [[THREE.Color]] c-tor, but keep in mind that transparency will be silently ignored.\n     */\n    function getHexFromRgba(r, g, b, a) {\n        harp_utils_1.assert(a >= 0 && a <= 1);\n        const t = HEX_FULL_CHANNEL - Math.floor(a * HEX_FULL_CHANNEL);\n        return ((t << SHIFT_TRANSPARENCY) ^\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE));\n    }\n    ColorUtils.getHexFromRgba = getHexFromRgba;\n    /**\n     * Encodes RGB all color channels in single number with format 0xRRGGBB.\n     *\n     * All input channels should be in <0, 1> range (inclusively).\n     * See also [[getHexFromRgba]] for more information about [[THREE.Color]] compatibility.\n     *\n     * @note This method is fully compatible with THREE.js color encoding, so\n     * you may pass this value directly to THREE.Color c-tor.\n     */\n    function getHexFromRgb(r, g, b) {\n        harp_utils_1.assert(r >= 0 && r <= 1);\n        harp_utils_1.assert(g >= 0 && g <= 1);\n        harp_utils_1.assert(b >= 0 && b <= 1);\n        return (((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE));\n    }\n    ColorUtils.getHexFromRgb = getHexFromRgb;\n    /**\n     * Encode and convert HSL value to number coded color format (0xRRGGBB).\n     *\n     * @see getHexFromRgb.\n     * @param h Hue component value between 0 and 1.\n     * @param s Saturation value between 0 and 1.\n     * @param l Lightness channel between 0 and 1.\n     */\n    function getHexFromHsl(h, s, l) {\n        harp_utils_1.assert(h >= 0 && h <= 1);\n        harp_utils_1.assert(s >= 0 && s <= 1);\n        harp_utils_1.assert(l >= 0 && l <= 1);\n        return tmpColor.setHSL(h, s, l).getHex();\n    }\n    ColorUtils.getHexFromHsl = getHexFromHsl;\n    /**\n     * Retrieve RGBA channels separately from number encoded custom color format.\n     *\n     * Provides an easy way for channels extraction (r, g, b, a) from custom number coded color\n     * format.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns r, g, b, a channels in simple object, where each channel value is saved as floating\n     * point from 0 to 1 inclusively.\n     */\n    function getRgbaFromHex(hex) {\n        harp_utils_1.assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format: #\" + hex.toString(16));\n        return {\n            r: ((hex >> SHIFT_RED) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            g: ((hex >> SHIFT_GREEN) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            b: ((hex >> SHIFT_BLUE) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            a: (HEX_FULL_CHANNEL - ((hex >> SHIFT_TRANSPARENCY) & HEX_FULL_CHANNEL)) /\n                HEX_FULL_CHANNEL\n        };\n    }\n    ColorUtils.getRgbaFromHex = getRgbaFromHex;\n    /**\n     * Determines if number encoded color contains alpha (opacity) defined and different then 255.\n     *\n     * @param hex The number encoded color (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns True if color has transparency defined.\n     */\n    function hasAlphaInHex(hex) {\n        harp_utils_1.assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format: #\" + hex.toString(16));\n        return hex >> SHIFT_TRANSPARENCY !== 0;\n    }\n    ColorUtils.hasAlphaInHex = hasAlphaInHex;\n    /**\n     * Retrieves alpha color channel from hex encoded color value.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns The floating point alpha component in <0, 1> range.\n     */\n    function getAlphaFromHex(hex) {\n        harp_utils_1.assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format: #\" + hex.toString(16));\n        return (((HEX_FULL_CHANNEL - (hex >> SHIFT_TRANSPARENCY)) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL);\n    }\n    ColorUtils.getAlphaFromHex = getAlphaFromHex;\n    /**\n     * Remove transparency info from the number coded color, makes it compatible with external libs.\n     *\n     * @see getAlphaFromHex.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns number coded color value representable as 0xRRGGBB in hex.\n     */\n    function removeAlphaFromHex(hex) {\n        harp_utils_1.assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format: #\" + hex.toString(16));\n        return hex & HEX_RGB_MASK;\n    }\n    ColorUtils.removeAlphaFromHex = removeAlphaFromHex;\n})(ColorUtils = exports.ColorUtils || (exports.ColorUtils = {}));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/ColorUtils.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/DecodedTile.js":
/*!************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/DecodedTile.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\n/**\n * Returns an array with the data type specified as parameter.\n *\n * @param attr specifies which type of data is being stored in the array\n */\nfunction getArrayConstructor(attr) {\n    switch (attr) {\n        case \"float\":\n            return Float32Array;\n        case \"uint8\":\n            return Uint8Array;\n        case \"uint16\":\n            return Uint16Array;\n        case \"uint32\":\n            return Uint32Array;\n        case \"int8\":\n            return Int8Array;\n        case \"int16\":\n            return Int16Array;\n        case \"int32\":\n            return Int32Array;\n    }\n}\nexports.getArrayConstructor = getArrayConstructor;\n/**\n * Geometry types supported by [[Geometry]] objects.\n */\nvar GeometryType;\n(function (GeometryType) {\n    GeometryType[GeometryType[\"Unspecified\"] = 0] = \"Unspecified\";\n    GeometryType[GeometryType[\"Point\"] = 1] = \"Point\";\n    GeometryType[GeometryType[\"Line\"] = 2] = \"Line\";\n    GeometryType[GeometryType[\"SolidLine\"] = 3] = \"SolidLine\";\n    GeometryType[GeometryType[\"Text\"] = 4] = \"Text\";\n    GeometryType[GeometryType[\"TextPath\"] = 5] = \"TextPath\";\n    GeometryType[GeometryType[\"ExtrudedLine\"] = 6] = \"ExtrudedLine\";\n    GeometryType[GeometryType[\"Polygon\"] = 7] = \"Polygon\";\n    GeometryType[GeometryType[\"ExtrudedPolygon\"] = 8] = \"ExtrudedPolygon\";\n    GeometryType[GeometryType[\"Object3D\"] = 9] = \"Object3D\";\n    GeometryType[GeometryType[\"Other\"] = 1000] = \"Other\";\n})(GeometryType = exports.GeometryType || (exports.GeometryType = {}));\n/**\n * Returns the projection object specified in the parameter.\n *\n * @param projectionName string describing projection to be used\n */\nfunction getProjection(projectionName) {\n    switch (projectionName) {\n        case \"mercator\":\n            return harp_geoutils_1.mercatorProjection;\n        case \"webMercator\":\n            return harp_geoutils_1.webMercatorProjection;\n        case \"sphere\":\n            return harp_geoutils_1.sphereProjection;\n        case \"normalizedEquirectangular\":\n            return harp_geoutils_1.normalizedEquirectangularProjection;\n        case \"equirectangular\":\n            return harp_geoutils_1.equirectangularProjection;\n        default:\n            throw new Error(`Unknown projection ${projectionName}`);\n    } // switch\n}\nexports.getProjection = getProjection;\n/**\n * String with the projection's name.\n *\n * @param projection `Projection` object containing the name of the projection to retrieve\n */\nfunction getProjectionName(projection) {\n    if (projection === harp_geoutils_1.mercatorProjection) {\n        return \"mercator\";\n    }\n    else if (projection === harp_geoutils_1.webMercatorProjection) {\n        return \"webMercator\";\n    }\n    else if (projection === harp_geoutils_1.sphereProjection) {\n        return \"sphere\";\n    }\n    else if (projection === harp_geoutils_1.normalizedEquirectangularProjection) {\n        return \"normalizedEquirectangular\";\n    }\n    else if (projection === harp_geoutils_1.equirectangularProjection) {\n        return \"equirectangular\";\n    }\n    throw new Error(\"Unknown projection\");\n}\nexports.getProjectionName = getProjectionName;\n/**\n * @returns Feature id from the provided attribute map.\n */\nfunction getFeatureId(attributeMap) {\n    if (attributeMap === undefined) {\n        return 0;\n    }\n    if (typeof attributeMap === \"number\") {\n        return attributeMap;\n    }\n    if (attributeMap.hasOwnProperty(\"$id\")) {\n        return attributeMap.$id;\n    }\n    return 0;\n}\nexports.getFeatureId = getFeatureId;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/DecodedTile.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/Env.js":
/*!****************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/Env.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @hidden\n */\nclass Env {\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     */\n    lookup(_name) {\n        return undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment. (Here: empty object).\n     */\n    unmap() {\n        return {};\n    }\n}\nexports.Env = Env;\n/**\n * Adds access to map specific environment properties.\n */\nclass MapEnv extends Env {\n    constructor(entries, parent) {\n        super();\n        this.entries = entries;\n        this.parent = parent;\n    }\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     * @override\n     */\n    lookup(name) {\n        if (this.entries.hasOwnProperty(name)) {\n            const value = this.entries[name];\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return this.parent ? this.parent.lookup(name) : undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment, takes care of the parent\n     * object.\n     * @override\n     */\n    unmap() {\n        const obj = this.parent ? this.parent.unmap() : {};\n        for (const key in this.entries) {\n            if (this.entries.hasOwnProperty(key)) {\n                obj[key] = this.entries[key];\n            }\n        }\n        return obj;\n    }\n}\nexports.MapEnv = MapEnv;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/Env.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/ExponentialInterpolant.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/ExponentialInterpolant.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = __webpack_require__(/*! three */ \"three\");\nclass ExponentialInterpolant extends three_1.Interpolant {\n    constructor() {\n        super(...arguments);\n        /**\n         * Exponent value. Defaults to `2.0`.\n         */\n        this.exponent = 2.0;\n    }\n    // Note: We need to disable linting here as tslint thinks this function is never used, though it\n    // indeed is called by ``Interpolant.evaluate(level)``.\n    // tslint:disable-next-line\n    interpolate_(i1, t0, t, t1) {\n        const result = this.resultBuffer;\n        // TODO: Remove when Interpolant types are fixed.\n        const values = this.sampleValues;\n        const stride = this.valueSize;\n        const offset1 = i1 * stride;\n        const offset0 = offset1 - stride;\n        const weight1 = Math.pow((t - t0) / (t1 - t0), this.exponent);\n        const weight0 = 1 - weight1;\n        for (let i = 0; i !== stride; ++i) {\n            result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n        }\n        return result;\n    }\n}\nexports.ExponentialInterpolant = ExponentialInterpolant;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/ExponentialInterpolant.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/Expr.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/Expr.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ExprEvaluator_1 = __webpack_require__(/*! ./ExprEvaluator */ \"./node_modules/@here/harp-datasource-protocol/lib/ExprEvaluator.js\");\nconst ExprInstantiator_1 = __webpack_require__(/*! ./ExprInstantiator */ \"./node_modules/@here/harp-datasource-protocol/lib/ExprInstantiator.js\");\nconst ExprParser_1 = __webpack_require__(/*! ./ExprParser */ \"./node_modules/@here/harp-datasource-protocol/lib/ExprParser.js\");\nconst InterpolatedProperty_1 = __webpack_require__(/*! ./InterpolatedProperty */ \"./node_modules/@here/harp-datasource-protocol/lib/InterpolatedProperty.js\");\nconst InterpolatedPropertyDefs_1 = __webpack_require__(/*! ./InterpolatedPropertyDefs */ \"./node_modules/@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.js\");\nconst Theme_1 = __webpack_require__(/*! ./Theme */ \"./node_modules/@here/harp-datasource-protocol/lib/Theme.js\");\n__export(__webpack_require__(/*! ./Env */ \"./node_modules/@here/harp-datasource-protocol/lib/Env.js\"));\nconst exprEvaluator = new ExprEvaluator_1.ExprEvaluator();\nconst exprInstantiator = new ExprInstantiator_1.ExprInstantiator();\n/**\n * The dependencies of an [[Expr]].\n */\nclass ExprDependencies {\n    constructor() {\n        /**\n         * The properties needed to evaluate the [[Expr]].\n         */\n        this.properties = new Set();\n    }\n}\nexports.ExprDependencies = ExprDependencies;\nclass ComputeExprDependencies {\n    /**\n     * Gets the dependencies of an [[Expr]].\n     *\n     * @param expr The [[Expr]] to process.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param dependencies The output [[Set]] of dependency names.\n     */\n    static of(expr) {\n        const dependencies = new ExprDependencies();\n        expr.accept(this.instance, dependencies);\n        return dependencies;\n    }\n    visitNullLiteralExpr(expr, context) {\n        // nothing to do\n    }\n    visitBooleanLiteralExpr(expr, context) {\n        // nothing to do\n    }\n    visitNumberLiteralExpr(expr, context) {\n        // nothing to do\n    }\n    visitStringLiteralExpr(expr, context) {\n        // nothing to do\n    }\n    visitObjectLiteralExpr(expr, context) {\n        // nothing to do\n    }\n    visitVarExpr(expr, context) {\n        context.properties.add(expr.name);\n    }\n    visitHasAttributeExpr(expr, context) {\n        context.properties.add(expr.name);\n    }\n    visitContainsExpr(expr, context) {\n        expr.value.accept(this, context);\n    }\n    visitCallExpr(expr, context) {\n        if (expr.op === \"zoom\" && expr.args.length === 0) {\n            context.zoom = true;\n        }\n        else {\n            expr.args.forEach(childExpr => childExpr.accept(this, context));\n        }\n    }\n    visitMatchExpr(expr, context) {\n        expr.value.accept(this, context);\n        expr.branches.forEach(([_, branch]) => branch.accept(this, context));\n        expr.fallback.accept(this, context);\n    }\n    visitCaseExpr(expr, context) {\n        expr.branches.forEach(([condition, branch]) => {\n            condition.accept(this, context);\n            branch.accept(this, context);\n        });\n        expr.fallback.accept(this, context);\n    }\n}\nComputeExprDependencies.instance = new ComputeExprDependencies();\nfunction isJsonExpr(v) {\n    return Array.isArray(v) && v.length > 0 && typeof v[0] === \"string\";\n}\nexports.isJsonExpr = isJsonExpr;\n/**\n * The evaluation scope of an [[Expr]].\n */\nvar ExprScope;\n(function (ExprScope) {\n    /**\n     * The scope of an [[Expr]] used as value of an attribute.\n     */\n    ExprScope[ExprScope[\"Value\"] = 0] = \"Value\";\n    /**\n     * The scope of an [[Expr]] used in a [[Technique]] `when` condition.\n     */\n    ExprScope[ExprScope[\"Condition\"] = 1] = \"Condition\";\n    /**\n     * The scope of an [[Expr]] used as dynamic property attribute value.\n     */\n    ExprScope[ExprScope[\"Dynamic\"] = 2] = \"Dynamic\";\n})(ExprScope = exports.ExprScope || (exports.ExprScope = {}));\n/**\n * Abstract class defining a shape of a [[Theme]]'s expression\n */\nclass Expr {\n    /**\n     * Tests of given value is an [[Expr]].\n     *\n     * @param value The object to test.\n     */\n    static isExpr(value) {\n        return value instanceof Expr;\n    }\n    /**\n     * Creates an expression from the given `code`.\n     *\n     * @param code The code to parse.\n     * @returns The parsed [[Expr]].\n     * @deprecated\n     */\n    static parse(code) {\n        const parser = new ExprParser_1.ExprParser(code);\n        const expr = parser.parse();\n        return expr;\n    }\n    /**\n     * Parse expression in JSON form.\n     *\n     * If `definitions` are defined, then references (`['ref', name]`) are resolved.\n     *\n     * Pass `definitionExprCache` to reuse `Expr` instances created from definitions across\n     * many `fromJSON` calls.\n     *\n     * @param node expression in JSON format to parse\n     * @param definitions optional set of definitions needed definition resolved by `ref` operator\n     * @param definitionExprCache optional cache of `Expr` instances derived from `definitions`\n     */\n    static fromJSON(node, definitions, definitionExprCache) {\n        const referenceResolverState = definitions !== undefined\n            ? {\n                definitions,\n                lockedNames: new Set(),\n                cache: definitionExprCache || new Map()\n            }\n            : undefined;\n        return parseNode(node, referenceResolverState);\n    }\n    /**\n     * Evaluate an expression returning a [[Value]] object.\n     *\n     * @param env The [[Env]] used to lookup symbols.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param cache A cache of previously computed results.\n     */\n    evaluate(env, scope = ExprScope.Value, cache) {\n        return this.accept(exprEvaluator, new ExprEvaluator_1.ExprEvaluatorContext(exprEvaluator, env, scope, cache));\n    }\n    /**\n     * Instantiates this [[Expr]] by resolving references to the `get` and\n     * `has` operator using the given instantiation context.\n     *\n     * @param context The [[InstantationContext]] used to resolve names.\n     */\n    instantiate(context) {\n        return this.accept(exprInstantiator, context);\n    }\n    /**\n     * Gets the dependencies of this [[Expr]].\n     */\n    dependencies() {\n        return ComputeExprDependencies.of(this);\n    }\n    /**\n     * Create a unique object that is structurally equivalent to this [[Expr]].\n     *\n     * @param pool The [[ExprPool]] used to create a unique\n     * equivalent object of this [[Expr]].\n     */\n    intern(pool) {\n        return pool.add(this);\n    }\n    toJSON() {\n        return new ExprSerializer().serialize(this);\n    }\n    /**\n     * Returns `true` if a dynamic execution context is required to evaluate this [[Expr]].\n     */\n    isDynamic() {\n        if (this.m_isDynamic === undefined) {\n            this.m_isDynamic = this.exprIsDynamic();\n        }\n        return this.m_isDynamic;\n    }\n}\nexports.Expr = Expr;\n/**\n * Var expression.\n * @hidden\n */\nclass VarExpr extends Expr {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitVarExpr(this, context);\n    }\n    /** @override */\n    exprIsDynamic() {\n        return false;\n    }\n}\nexports.VarExpr = VarExpr;\nclass LiteralExpr extends Expr {\n    /**\n     * Create a [[LiteralExpr]] from the given value.\n     *\n     * @param value A constant value.\n     */\n    static fromValue(value) {\n        switch (typeof value) {\n            case \"boolean\":\n                return new BooleanLiteralExpr(value);\n            case \"number\":\n                return new NumberLiteralExpr(value);\n            case \"string\":\n                return new StringLiteralExpr(value);\n            case \"object\":\n                return value === null ? NullLiteralExpr.instance : new ObjectLiteralExpr(value);\n            default:\n                throw new Error(`failed to create a literal from '${value}'`);\n        } // switch\n    }\n    /** @override */\n    exprIsDynamic() {\n        return false;\n    }\n}\nexports.LiteralExpr = LiteralExpr;\n/**\n * Null literal expression.\n * @hidden\n */\nclass NullLiteralExpr extends LiteralExpr {\n    constructor() {\n        super();\n        /** @override */\n        this.value = null;\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitNullLiteralExpr(this, context);\n    }\n    /** @override */\n    exprIsDynamic() {\n        return false;\n    }\n}\nexports.NullLiteralExpr = NullLiteralExpr;\nNullLiteralExpr.instance = new NullLiteralExpr();\n/**\n * Boolean literal expression.\n * @hidden\n */\nclass BooleanLiteralExpr extends LiteralExpr {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitBooleanLiteralExpr(this, context);\n    }\n}\nexports.BooleanLiteralExpr = BooleanLiteralExpr;\n/**\n * Number literal expression.\n * @hidden\n */\nclass NumberLiteralExpr extends LiteralExpr {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitNumberLiteralExpr(this, context);\n    }\n}\nexports.NumberLiteralExpr = NumberLiteralExpr;\n/**\n * String literal expression.\n * @hidden\n */\nclass StringLiteralExpr extends LiteralExpr {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitStringLiteralExpr(this, context);\n    }\n}\nexports.StringLiteralExpr = StringLiteralExpr;\n/**\n * Object literal expression.\n * @hidden\n */\nclass ObjectLiteralExpr extends LiteralExpr {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get isArrayLiteral() {\n        return Array.isArray(this.value);\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitObjectLiteralExpr(this, context);\n    }\n}\nexports.ObjectLiteralExpr = ObjectLiteralExpr;\n/**\n * A has expression with an attribute, for example `has(ref)`.\n * @hidden\n */\nclass HasAttributeExpr extends Expr {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitHasAttributeExpr(this, context);\n    }\n    /** @override */\n    exprIsDynamic() {\n        return false;\n    }\n}\nexports.HasAttributeExpr = HasAttributeExpr;\n/**\n * A contains expression.\n * @hidden\n */\nclass ContainsExpr extends Expr {\n    constructor(value, elements) {\n        super();\n        this.value = value;\n        this.elements = elements;\n    }\n    static isValidElementsArray(elements) {\n        if (!Array.isArray(elements) || elements.length === 0) {\n            return false;\n        }\n        const elementTy = typeof elements[0];\n        if (elementTy === \"number\" || elementTy === \"string\") {\n            return elements.every(element => typeof element === elementTy);\n        }\n        return false;\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitContainsExpr(this, context);\n    }\n    /** @override */\n    exprIsDynamic() {\n        return this.value.isDynamic();\n    }\n}\nexports.ContainsExpr = ContainsExpr;\n/**\n * @hidden\n */\nclass CallExpr extends Expr {\n    constructor(op, args) {\n        super();\n        this.op = op;\n        this.args = args;\n    }\n    /**\n     * Returns the child nodes of this [[Expr]].\n     * @deprecated\n     */\n    get children() {\n        return this.args;\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitCallExpr(this, context);\n    }\n    /** @override */\n    exprIsDynamic() {\n        const descriptor = this.descriptor || ExprEvaluator_1.ExprEvaluator.getOperator(this.op);\n        if (descriptor && descriptor.isDynamicOperator && descriptor.isDynamicOperator(this)) {\n            return true;\n        }\n        return this.args.some(e => e.isDynamic());\n    }\n}\nexports.CallExpr = CallExpr;\n/**\n * @hidden\n */\nclass MatchExpr extends Expr {\n    constructor(value, branches, fallback) {\n        super();\n        this.value = value;\n        this.branches = branches;\n        this.fallback = fallback;\n    }\n    /**\n     * Tests if the given JSON node is a valid label for the `\"match\"` operator.\n     *\n     * @param node A JSON value.\n     */\n    static isValidMatchLabel(node) {\n        switch (typeof node) {\n            case \"number\":\n            case \"string\":\n                return true;\n            case \"object\":\n                if (!Array.isArray(node) || node.length === 0) {\n                    return false;\n                }\n                const elementTy = typeof node[0];\n                if (elementTy === \"number\" || elementTy === \"string\") {\n                    return node.every(t => typeof t === elementTy);\n                }\n                return false;\n            default:\n                return false;\n        } // switch\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitMatchExpr(this, context);\n    }\n    /** @override */\n    exprIsDynamic() {\n        return (this.value.isDynamic() ||\n            this.branches.some(([_, branch]) => branch.isDynamic()) ||\n            this.fallback.isDynamic());\n    }\n}\nexports.MatchExpr = MatchExpr;\n/**\n * @hidden\n */\nclass CaseExpr extends Expr {\n    constructor(branches, fallback) {\n        super();\n        this.branches = branches;\n        this.fallback = fallback;\n    }\n    /** @override */\n    accept(visitor, context) {\n        return visitor.visitCaseExpr(this, context);\n    }\n    /** @override */\n    exprIsDynamic() {\n        return (this.branches.some(([cond, branch]) => cond.isDynamic() || branch.isDynamic()) ||\n            this.fallback.isDynamic());\n    }\n}\nexports.CaseExpr = CaseExpr;\n/**\n * @hidden\n */\nclass ExprSerializer {\n    serialize(expr) {\n        return expr.accept(this, undefined);\n    }\n    visitNullLiteralExpr(expr, context) {\n        return null;\n    }\n    visitBooleanLiteralExpr(expr, context) {\n        return expr.value;\n    }\n    visitNumberLiteralExpr(expr, context) {\n        return expr.value;\n    }\n    visitStringLiteralExpr(expr, context) {\n        return expr.value;\n    }\n    visitObjectLiteralExpr(expr, context) {\n        return [\"literal\", expr.value];\n    }\n    visitVarExpr(expr, context) {\n        return [\"get\", expr.name];\n    }\n    visitHasAttributeExpr(expr, context) {\n        return [\"has\", expr.name];\n    }\n    visitContainsExpr(expr, context) {\n        return [\"in\", this.serialize(expr.value), expr.elements];\n    }\n    visitCallExpr(expr, context) {\n        return [expr.op, ...expr.args.map(childExpr => this.serialize(childExpr))];\n    }\n    visitMatchExpr(expr, context) {\n        const branches = [];\n        for (const [label, body] of expr.branches) {\n            branches.push(label, this.serialize(body));\n        }\n        return [\"match\", this.serialize(expr.value), ...branches, this.serialize(expr.fallback)];\n    }\n    visitCaseExpr(expr, context) {\n        const branches = [];\n        for (const [condition, body] of expr.branches) {\n            branches.push(this.serialize(condition), this.serialize(body));\n        }\n        return [\"case\", ...branches, this.serialize(expr.fallback)];\n    }\n}\nfunction parseNode(node, referenceResolverState) {\n    if (Array.isArray(node)) {\n        return parseCall(node, referenceResolverState);\n    }\n    else if (node === null) {\n        return NullLiteralExpr.instance;\n    }\n    else if (typeof node === \"boolean\") {\n        return new BooleanLiteralExpr(node);\n    }\n    else if (typeof node === \"number\") {\n        return new NumberLiteralExpr(node);\n    }\n    else if (typeof node === \"string\") {\n        return new StringLiteralExpr(node);\n    }\n    throw new Error(`failed to create expression from: ${JSON.stringify(node)}`);\n}\nfunction parseCall(node, referenceResolverState) {\n    const op = node[0];\n    if (typeof op !== \"string\") {\n        throw new Error(\"expected a builtin function name\");\n    }\n    switch (op) {\n        case \"!has\":\n        case \"!in\":\n            return new CallExpr(\"!\", [parseCall([op.slice(1), ...node.slice(1)])]);\n        case \"ref\":\n            return resolveReference(node, referenceResolverState);\n        case \"get\":\n            return parseGetExpr(node, referenceResolverState);\n        case \"has\":\n            return parseHasExpr(node, referenceResolverState);\n        case \"in\":\n            return parseInExpr(node, referenceResolverState);\n        case \"literal\":\n            return parseLiteralExpr(node);\n        case \"match\":\n            return parseMatchExpr(node, referenceResolverState);\n        case \"case\":\n            return parseCaseExpr(node, referenceResolverState);\n        default:\n            return makeCallExpr(op, node, referenceResolverState);\n    } // switch\n}\nfunction parseGetExpr(node, referenceResolverState) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"get\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new VarExpr(name);\n}\nfunction parseHasExpr(node, referenceResolverState) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"has\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new HasAttributeExpr(name);\n}\nfunction parseInExpr(node, referenceResolverState) {\n    const elements = node[2];\n    if (!ContainsExpr.isValidElementsArray(elements)) {\n        // tslint:disable-next-line: max-line-length\n        throw new Error(`'in' expects an array of number or string literals`);\n    }\n    return new ContainsExpr(parseNode(node[1], referenceResolverState), elements);\n}\nfunction parseLiteralExpr(node) {\n    const obj = node[1];\n    if (obj === null || typeof obj !== \"object\") {\n        throw new Error(\"expected an object or array literal\");\n    }\n    return new ObjectLiteralExpr(obj);\n}\nfunction parseMatchExpr(node, referenceResolverState) {\n    if (node.length < 4) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (!(node.length % 2)) {\n        throw new Error(\"fallback is missing in 'match' expression\");\n    }\n    const value = parseNode(node[1], referenceResolverState);\n    const conditions = [];\n    for (let i = 2; i < node.length - 1; i += 2) {\n        const label = node[i];\n        if (!MatchExpr.isValidMatchLabel(label)) {\n            throw new Error(`'${JSON.stringify(label)}' is not a valid label for 'match'`);\n        }\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        conditions.push([label, expr]);\n    }\n    const fallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new MatchExpr(value, conditions, fallback);\n}\nfunction parseCaseExpr(node, referenceResolverState) {\n    if (node.length < 3) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (node.length % 2) {\n        throw new Error(\"fallback is missing in 'case' expression\");\n    }\n    const branches = [];\n    for (let i = 1; i < node.length - 1; i += 2) {\n        const condition = parseNode(node[i], referenceResolverState);\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        branches.push([condition, expr]);\n    }\n    const caseFallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new CaseExpr(branches, caseFallback);\n}\nfunction makeCallExpr(op, node, referenceResolverState) {\n    return new CallExpr(op, node.slice(1).map(childExpr => parseNode(childExpr, referenceResolverState)));\n}\nfunction resolveReference(node, referenceResolverState) {\n    if (typeof node[1] !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    if (referenceResolverState === undefined) {\n        throw new Error(`ref used with no definitions`);\n    }\n    const name = node[1];\n    if (referenceResolverState.lockedNames.has(name)) {\n        throw new Error(`circular referene to '${name}'`);\n    }\n    if (!(name in referenceResolverState.definitions)) {\n        throw new Error(`definition '${name}' not found`);\n    }\n    const cachedEntry = referenceResolverState.cache.get(name);\n    if (cachedEntry !== undefined) {\n        return cachedEntry;\n    }\n    let definitionEntry = referenceResolverState.definitions[name];\n    let result;\n    if (Theme_1.isLiteralDefinition(definitionEntry)) {\n        return Expr.fromJSON(definitionEntry);\n    }\n    else if (Theme_1.isBoxedDefinition(definitionEntry)) {\n        if (InterpolatedProperty_1.isInterpolatedPropertyDefinition(definitionEntry.value)) {\n            // found a reference to an interpolation using\n            // the deprecated object-like syntax.\n            return Expr.fromJSON(InterpolatedPropertyDefs_1.interpolatedPropertyDefinitionToJsonExpr(definitionEntry.value));\n        }\n        else if (isJsonExpr(definitionEntry.value)) {\n            definitionEntry = definitionEntry.value;\n        }\n        else {\n            return Expr.fromJSON(definitionEntry.value);\n        }\n    }\n    if (isJsonExpr(definitionEntry)) {\n        referenceResolverState.lockedNames.add(name);\n        try {\n            result = parseNode(definitionEntry, referenceResolverState);\n        }\n        finally {\n            referenceResolverState.lockedNames.delete(name);\n        }\n    }\n    else {\n        throw new Error(`unsupported definition ${name}`);\n    }\n    referenceResolverState.cache.set(name, result);\n    return result;\n}\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/Expr.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/ExprEvaluator.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/ExprEvaluator.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Expr_1 = __webpack_require__(/*! ./Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\nconst ArrayOperators_1 = __webpack_require__(/*! ./operators/ArrayOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/ArrayOperators.js\");\nconst CastOperators_1 = __webpack_require__(/*! ./operators/CastOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/CastOperators.js\");\nconst ColorOperators_1 = __webpack_require__(/*! ./operators/ColorOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/ColorOperators.js\");\nconst ComparisonOperators_1 = __webpack_require__(/*! ./operators/ComparisonOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/ComparisonOperators.js\");\nconst FeatureOperators_1 = __webpack_require__(/*! ./operators/FeatureOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/FeatureOperators.js\");\nconst FlowOperators_1 = __webpack_require__(/*! ./operators/FlowOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/FlowOperators.js\");\nconst InterpolationOperators_1 = __webpack_require__(/*! ./operators/InterpolationOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/InterpolationOperators.js\");\nconst MapOperators_1 = __webpack_require__(/*! ./operators/MapOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/MapOperators.js\");\nconst MathOperators_1 = __webpack_require__(/*! ./operators/MathOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/MathOperators.js\");\nconst MiscOperators_1 = __webpack_require__(/*! ./operators/MiscOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/MiscOperators.js\");\nconst ObjectOperators_1 = __webpack_require__(/*! ./operators/ObjectOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/ObjectOperators.js\");\nconst StringOperators_1 = __webpack_require__(/*! ./operators/StringOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/StringOperators.js\");\nconst TypeOperators_1 = __webpack_require__(/*! ./operators/TypeOperators */ \"./node_modules/@here/harp-datasource-protocol/lib/operators/TypeOperators.js\");\nconst operatorDescriptors = new Map();\n/*\n * @hidden\n */\nclass ExprEvaluatorContext {\n    constructor(evaluator, env, scope, cache) {\n        this.evaluator = evaluator;\n        this.env = env;\n        this.scope = scope;\n        this.cache = cache;\n        this.m_partialEvaluation = false;\n    }\n    /**\n     * `true` if the this context is used to partially evaluate expressions.\n     */\n    get partialEvaluation() {\n        return this.m_partialEvaluation;\n    }\n    /**\n     * Evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    evaluate(expr) {\n        if (expr !== undefined) {\n            return expr.accept(this.evaluator, this);\n        }\n        throw new Error(\"Failed to evaluate expression\");\n    }\n    /**\n     * Partially evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    partiallyEvaluate(expr) {\n        if (expr === undefined) {\n            throw new Error(\"Failed to evaluate expression\");\n        }\n        const previousEvaluationMode = this.m_partialEvaluation;\n        this.m_partialEvaluation = true;\n        try {\n            const value = expr.accept(this.evaluator, this);\n            this.m_partialEvaluation = previousEvaluationMode;\n            if (value instanceof Expr_1.Expr) {\n                return value;\n            }\n            return Expr_1.LiteralExpr.fromValue(value);\n        }\n        catch (error) {\n            // rethrow the exception\n            throw error;\n        }\n        finally {\n            // reset the evaluation mode.\n            this.m_partialEvaluation = previousEvaluationMode;\n        }\n    }\n}\nexports.ExprEvaluatorContext = ExprEvaluatorContext;\n/**\n * [[ExprEvaluator]] is used to evaluate [[Expr]] in a given environment.\n *\n * @hidden\n */\nclass ExprEvaluator {\n    static defineOperator(op, builtin) {\n        operatorDescriptors.set(op, builtin);\n    }\n    static defineOperators(builtins) {\n        Object.getOwnPropertyNames(builtins).forEach(p => {\n            this.defineOperator(p, builtins[p]);\n        });\n    }\n    /**\n     * Returns the [[OperatorDescriptor]] for the given operator name.\n     * @hidden\n     */\n    static getOperator(op) {\n        return operatorDescriptors.get(op);\n    }\n    visitVarExpr(expr, context) {\n        const value = context.env.lookup(expr.name);\n        return value !== undefined ? value : null;\n    }\n    visitNullLiteralExpr(expr, context) {\n        return null;\n    }\n    visitBooleanLiteralExpr(expr, context) {\n        return expr.value;\n    }\n    visitNumberLiteralExpr(expr, context) {\n        return expr.value;\n    }\n    visitStringLiteralExpr(expr, context) {\n        return expr.value;\n    }\n    visitObjectLiteralExpr(expr, context) {\n        return expr.value;\n    }\n    visitHasAttributeExpr(expr, context) {\n        return context.env.lookup(expr.name) !== undefined;\n    }\n    visitContainsExpr(expr, context) {\n        const value = expr.value.accept(this, context);\n        const result = expr.elements.includes(value);\n        if (context.cache !== undefined) {\n            context.cache.set(expr, result);\n        }\n        return result;\n    }\n    visitMatchExpr(match, context) {\n        const r = context.evaluate(match.value);\n        for (const [label, body] of match.branches) {\n            if (Array.isArray(label) && label.includes(r)) {\n                return context.evaluate(body);\n            }\n            else if (label === r) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n    visitCaseExpr(match, context) {\n        for (const [condition, body] of match.branches) {\n            if (context.evaluate(condition)) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n    visitCallExpr(expr, context) {\n        if (context.cache !== undefined) {\n            const v = context.cache.get(expr);\n            if (v !== undefined) {\n                return v;\n            }\n        }\n        const descriptor = expr.descriptor || operatorDescriptors.get(expr.op);\n        if (descriptor) {\n            expr.descriptor = descriptor;\n            const result = descriptor.call(context, expr);\n            if (context.cache) {\n                context.cache.set(expr, result);\n            }\n            return result;\n        }\n        throw new Error(`undefined operator '${expr.op}`);\n    }\n}\nexports.ExprEvaluator = ExprEvaluator;\nExprEvaluator.defineOperators(CastOperators_1.CastOperators);\nExprEvaluator.defineOperators(ComparisonOperators_1.ComparisonOperators);\nExprEvaluator.defineOperators(MathOperators_1.MathOperators);\nExprEvaluator.defineOperators(StringOperators_1.StringOperators);\nExprEvaluator.defineOperators(ColorOperators_1.ColorOperators);\nExprEvaluator.defineOperators(TypeOperators_1.TypeOperators);\nExprEvaluator.defineOperators(MiscOperators_1.MiscOperators);\nExprEvaluator.defineOperators(FlowOperators_1.FlowOperators);\nExprEvaluator.defineOperators(ArrayOperators_1.ArrayOperators);\nExprEvaluator.defineOperators(InterpolationOperators_1.InterpolationOperators);\nExprEvaluator.defineOperators(ObjectOperators_1.ObjectOperators);\nExprEvaluator.defineOperators(FeatureOperators_1.FeatureOperators);\nExprEvaluator.defineOperators(MapOperators_1.MapOperators);\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/ExprEvaluator.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/ExprInstantiator.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/ExprInstantiator.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Expr_1 = __webpack_require__(/*! ./Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\n/**\n * @hidden\n */\nclass ExprInstantiator {\n    visitNullLiteralExpr(expr, _context) {\n        return expr;\n    }\n    visitBooleanLiteralExpr(expr, _context) {\n        return expr;\n    }\n    visitNumberLiteralExpr(expr, _context) {\n        return expr;\n    }\n    visitStringLiteralExpr(expr, _context) {\n        return expr;\n    }\n    visitObjectLiteralExpr(expr, _context) {\n        return expr;\n    }\n    visitVarExpr(expr, context) {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name);\n        return Expr_1.LiteralExpr.fromValue(value !== undefined ? value : null);\n    }\n    visitHasAttributeExpr(expr, context) {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name) !== undefined;\n        return Expr_1.LiteralExpr.fromValue(value);\n    }\n    visitContainsExpr(expr, context) {\n        const value = expr.value.accept(this, context);\n        if (value instanceof Expr_1.LiteralExpr) {\n            const result = expr.elements.includes(value.value);\n            return Expr_1.LiteralExpr.fromValue(result);\n        }\n        return value === expr.value ? expr : new Expr_1.ContainsExpr(value, expr.elements);\n    }\n    visitCallExpr(expr, context) {\n        const args = expr.args.map(arg => arg.accept(this, context));\n        if (args.some((a, i) => a !== expr.args[i])) {\n            return new Expr_1.CallExpr(expr.op, args);\n        }\n        return expr;\n    }\n    visitMatchExpr(match, context) {\n        const value = match.value.accept(this, context);\n        if (value instanceof Expr_1.LiteralExpr) {\n            const r = value.value;\n            for (const [label, body] of match.branches) {\n                if (Array.isArray(label) && label.includes(r)) {\n                    return body.accept(this, context);\n                }\n                else if (label === r) {\n                    return body.accept(this, context);\n                }\n            }\n            return match.fallback.accept(this, context);\n        }\n        let changed = match.value !== value;\n        const branches = match.branches.map(([label, branch]) => {\n            const newBranch = branch.accept(this, context);\n            if (newBranch !== branch) {\n                changed = true;\n            }\n            return [label, newBranch];\n        });\n        const fallback = match.fallback.accept(this, context);\n        if (fallback !== match.fallback) {\n            changed = true;\n        }\n        return changed ? new Expr_1.MatchExpr(value, branches, fallback) : match;\n    }\n    visitCaseExpr(expr, context) {\n        const branches = [];\n        let changed = false;\n        for (const [condition, branch] of expr.branches) {\n            const newCondition = condition.accept(this, context);\n            if (newCondition instanceof Expr_1.LiteralExpr) {\n                if (newCondition.value) {\n                    return branch.accept(this, context);\n                }\n            }\n            else {\n                if (newCondition !== condition) {\n                    changed = true;\n                }\n                branches.push([newCondition, branch]);\n            }\n        }\n        if (branches.length === 0) {\n            // all the conditions of this CaseExpr evaluated\n            // to false, so the resulting of instantiating this CaseExpr\n            // is the same as instantiating its fallback expression.\n            return expr.fallback.accept(this, context);\n        }\n        if (branches.length !== expr.branches.length) {\n            // the number of branches changed, this means that\n            // some of the branches had constant expressions that\n            // evaluate to false. In this case the resulting\n            // `CaseExpr` has less branches.\n            changed = true;\n        }\n        // Instantiate the body of all the branches of this CaseExpr\n        // that have dynamic conditions.\n        branches.forEach(branch => {\n            const instantiatedBranch = branch[1].accept(this, context);\n            if (instantiatedBranch !== branch[1]) {\n                changed = true;\n            }\n            branch[1] = instantiatedBranch;\n        });\n        const fallback = expr.fallback.accept(this, context);\n        if (fallback !== expr.fallback) {\n            changed = true;\n        }\n        if (!changed) {\n            // nothing changed, return the old expression.\n            return expr;\n        }\n        return new Expr_1.CaseExpr(branches, fallback);\n    }\n}\nexports.ExprInstantiator = ExprInstantiator;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/ExprInstantiator.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/ExprParser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/ExprParser.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Expr_1 = __webpack_require__(/*! ./Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\n/**\n * Character value\n */\nvar Character;\n(function (Character) {\n    Character[Character[\"Tab\"] = 9] = \"Tab\";\n    Character[Character[\"Lf\"] = 10] = \"Lf\";\n    Character[Character[\"Cr\"] = 13] = \"Cr\";\n    Character[Character[\"Space\"] = 32] = \"Space\";\n    Character[Character[\"LParen\"] = 40] = \"LParen\";\n    Character[Character[\"RParen\"] = 41] = \"RParen\";\n    Character[Character[\"Comma\"] = 44] = \"Comma\";\n    Character[Character[\"Dot\"] = 46] = \"Dot\";\n    Character[Character[\"LBracket\"] = 91] = \"LBracket\";\n    Character[Character[\"Backslash\"] = 92] = \"Backslash\";\n    Character[Character[\"RBracket\"] = 93] = \"RBracket\";\n    Character[Character[\"_0\"] = 48] = \"_0\";\n    Character[Character[\"_9\"] = 57] = \"_9\";\n    Character[Character[\"_\"] = 95] = \"_\";\n    Character[Character[\"A\"] = 64] = \"A\";\n    Character[Character[\"Z\"] = 90] = \"Z\";\n    Character[Character[\"a\"] = 97] = \"a\";\n    Character[Character[\"z\"] = 122] = \"z\";\n    Character[Character[\"DoubleQuote\"] = 34] = \"DoubleQuote\";\n    Character[Character[\"SingleQuote\"] = 39] = \"SingleQuote\";\n    Character[Character[\"Exclaim\"] = 33] = \"Exclaim\";\n    Character[Character[\"Equal\"] = 61] = \"Equal\";\n    Character[Character[\"Caret\"] = 94] = \"Caret\";\n    Character[Character[\"Tilde\"] = 126] = \"Tilde\";\n    Character[Character[\"Dollar\"] = 36] = \"Dollar\";\n    Character[Character[\"Less\"] = 60] = \"Less\";\n    Character[Character[\"Greater\"] = 62] = \"Greater\";\n    Character[Character[\"Bar\"] = 124] = \"Bar\";\n    Character[Character[\"Amp\"] = 38] = \"Amp\";\n})(Character || (Character = {}));\n/**\n * Check if a codepoint is a whitespace character.\n */\nfunction isSpace(codepoint) {\n    switch (codepoint) {\n        case Character.Tab:\n        case Character.Lf:\n        case Character.Cr:\n        case Character.Space:\n            return true;\n        default:\n            return false;\n    } // switch\n}\n/**\n * Check if codepoint is a digit character.\n */\nfunction isNumber(codepoint) {\n    return codepoint >= Character._0 && codepoint <= Character._9;\n}\n/**\n * Check if codepoint is a letter character.\n */\nfunction isLetter(codepoint) {\n    return ((codepoint >= Character.a && codepoint <= Character.z) ||\n        (codepoint >= Character.A && codepoint <= Character.Z));\n}\n/**\n * Check if codepoint is either a digit or a letter character.\n */\nfunction isLetterOrNumber(codepoint) {\n    return isLetter(codepoint) || isNumber(codepoint);\n}\n/**\n * Check if codepoint is an identification character: underscore, dollar sign, dot or bracket.\n */\nfunction isIdentChar(codepoint) {\n    return (isLetterOrNumber(codepoint) ||\n        codepoint === Character._ ||\n        codepoint === Character.Dollar ||\n        codepoint === Character.Dot ||\n        codepoint === Character.LBracket ||\n        codepoint === Character.RBracket);\n}\n/**\n * Tokens used in theme grammar.\n */\nvar Token;\n(function (Token) {\n    Token[Token[\"Eof\"] = 0] = \"Eof\";\n    Token[Token[\"Error\"] = 1] = \"Error\";\n    Token[Token[\"Identifier\"] = 2] = \"Identifier\";\n    Token[Token[\"Number\"] = 3] = \"Number\";\n    Token[Token[\"String\"] = 4] = \"String\";\n    Token[Token[\"Comma\"] = 5] = \"Comma\";\n    Token[Token[\"LParen\"] = 6] = \"LParen\";\n    Token[Token[\"RParen\"] = 7] = \"RParen\";\n    Token[Token[\"LBracket\"] = 8] = \"LBracket\";\n    Token[Token[\"RBracket\"] = 9] = \"RBracket\";\n    Token[Token[\"Exclaim\"] = 10] = \"Exclaim\";\n    Token[Token[\"TildeEqual\"] = 11] = \"TildeEqual\";\n    Token[Token[\"CaretEqual\"] = 12] = \"CaretEqual\";\n    Token[Token[\"DollarEqual\"] = 13] = \"DollarEqual\";\n    Token[Token[\"EqualEqual\"] = 14] = \"EqualEqual\";\n    Token[Token[\"ExclaimEqual\"] = 15] = \"ExclaimEqual\";\n    Token[Token[\"Less\"] = 16] = \"Less\";\n    Token[Token[\"Greater\"] = 17] = \"Greater\";\n    Token[Token[\"LessEqual\"] = 18] = \"LessEqual\";\n    Token[Token[\"GreaterEqual\"] = 19] = \"GreaterEqual\";\n    Token[Token[\"BarBar\"] = 20] = \"BarBar\";\n    Token[Token[\"AmpAmp\"] = 21] = \"AmpAmp\";\n})(Token || (Token = {}));\n/**\n * Maps a token to its string name.\n */\nfunction tokenSpell(token) {\n    switch (token) {\n        case Token.Eof:\n            return \"eof\";\n        case Token.Error:\n            return \"error\";\n        case Token.Identifier:\n            return \"identifier\";\n        case Token.Number:\n            return \"number\";\n        case Token.String:\n            return \"string\";\n        case Token.Comma:\n            return \",\";\n        case Token.LParen:\n            return \"(\";\n        case Token.RParen:\n            return \")\";\n        case Token.LBracket:\n            return \"[\";\n        case Token.RBracket:\n            return \"]\";\n        case Token.Exclaim:\n            return \"!\";\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        case Token.BarBar:\n            return \"||\";\n        case Token.AmpAmp:\n            return \"&&\";\n        default:\n            throw new Error(`invalid token ${token}`);\n    }\n}\n/**\n * Lexer class implementation.\n */\nclass Lexer {\n    constructor(code) {\n        this.code = code;\n        this.m_token = Token.Error;\n        this.m_index = 0;\n        this.m_char = Character.Lf;\n    }\n    /**\n     * Single lexer token.\n     */\n    token() {\n        return this.m_token;\n    }\n    /**\n     * Parsed text.\n     */\n    text() {\n        return this.m_text || \"\";\n    }\n    /**\n     * Go to the next token.\n     */\n    next() {\n        this.m_token = this.yylex();\n        if (this.m_token === Token.Error) {\n            throw new Error(`unexpected character ${this.m_char}`);\n        }\n        return this.m_token;\n    }\n    yyinp() {\n        this.m_char = this.code.codePointAt(this.m_index++) || 0;\n    }\n    yylex() {\n        this.m_text = undefined;\n        while (isSpace(this.m_char)) {\n            this.yyinp();\n        }\n        if (this.m_char === 0) {\n            return Token.Eof;\n        }\n        const ch = this.m_char;\n        this.yyinp();\n        switch (ch) {\n            case Character.LParen:\n                return Token.LParen;\n            case Character.RParen:\n                return Token.RParen;\n            case Character.LBracket:\n                return Token.LBracket;\n            case Character.RBracket:\n                return Token.RBracket;\n            case Character.Comma:\n                return Token.Comma;\n            case Character.SingleQuote:\n            case Character.DoubleQuote: {\n                const start = this.m_index - 1;\n                while (this.m_char && this.m_char !== ch) {\n                    // ### TODO handle escape sequences\n                    this.yyinp();\n                }\n                if (this.m_char !== ch) {\n                    throw new Error(\"Unfinished string literal\");\n                }\n                this.yyinp();\n                this.m_text = this.code.substring(start, this.m_index - 2);\n                return Token.String;\n            }\n            case Character.Exclaim:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.ExclaimEqual;\n                }\n                return Token.Exclaim;\n            case Character.Caret:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.CaretEqual;\n                }\n                return Token.Error;\n            case Character.Tilde:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.TildeEqual;\n                }\n                return Token.Error;\n            case Character.Equal:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.EqualEqual;\n                }\n                return Token.Error;\n            case Character.Less:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.LessEqual;\n                }\n                return Token.Less;\n            case Character.Greater:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.GreaterEqual;\n                }\n                return Token.Greater;\n            case Character.Bar:\n                if (this.m_char === Character.Bar) {\n                    this.yyinp();\n                    return Token.BarBar;\n                }\n                return Token.Error;\n            case Character.Amp:\n                if (this.m_char === Character.Amp) {\n                    this.yyinp();\n                    return Token.AmpAmp;\n                }\n                return Token.Error;\n            default: {\n                const start = this.m_index - 2;\n                if (isLetter(ch) ||\n                    ch === Character._ ||\n                    (ch === Character.Dollar && isIdentChar(this.m_char))) {\n                    while (isIdentChar(this.m_char)) {\n                        this.yyinp();\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Identifier;\n                }\n                else if (isNumber(ch)) {\n                    while (isNumber(this.m_char)) {\n                        this.yyinp();\n                    }\n                    if (this.m_char === Character.Dot) {\n                        this.yyinp();\n                        while (isNumber(this.m_char)) {\n                            this.yyinp();\n                        }\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Number;\n                }\n                else if (ch === Character.Dollar) {\n                    if (this.m_char === Character.Equal) {\n                        this.yyinp();\n                        return Token.DollarEqual;\n                    }\n                    return Token.Error;\n                }\n            }\n        }\n        return Token.Error;\n    }\n}\nfunction getEqualityOp(token) {\n    switch (token) {\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        default:\n            return undefined;\n    } // switch\n}\nfunction getRelationalOp(token) {\n    switch (token) {\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        default:\n            return undefined;\n    } // switch\n}\nclass ExprParser {\n    constructor(code) {\n        this.lex = new Lexer(code);\n        this.lex.next();\n    }\n    parse() {\n        return this.parseLogicalOr();\n    }\n    yyexpect(token) {\n        if (this.lex.token() !== token) {\n            throw new Error(`Syntax error: Expected token '${tokenSpell(token)}' but ` +\n                `found '${tokenSpell(this.lex.token())}'`);\n        }\n        this.lex.next();\n    }\n    parsePrimary() {\n        switch (this.lex.token()) {\n            case Token.Identifier: {\n                const text = this.lex.text();\n                switch (text) {\n                    case \"has\":\n                        this.lex.next(); // skip has keyword\n                        this.yyexpect(Token.LParen);\n                        const hasAttribute = this.lex.text();\n                        this.yyexpect(Token.Identifier);\n                        this.yyexpect(Token.RParen);\n                        return new Expr_1.HasAttributeExpr(hasAttribute);\n                    case \"length\":\n                        this.lex.next(); // skip length keyword\n                        this.yyexpect(Token.LParen);\n                        const value = this.parseLogicalOr();\n                        this.yyexpect(Token.RParen);\n                        return new Expr_1.CallExpr(\"length\", [value]);\n                    default:\n                        const expr = new Expr_1.VarExpr(text);\n                        this.lex.next();\n                        return expr;\n                }\n            }\n            case Token.LParen: {\n                this.lex.next();\n                const expr = this.parseLogicalOr();\n                this.yyexpect(Token.RParen);\n                return expr;\n            }\n            default:\n                return this.parseLiteral();\n        } // switch\n    }\n    parseLiteral() {\n        switch (this.lex.token()) {\n            case Token.Number: {\n                const expr = new Expr_1.NumberLiteralExpr(parseFloat(this.lex.text()));\n                this.lex.next();\n                return expr;\n            }\n            case Token.String: {\n                const expr = new Expr_1.StringLiteralExpr(this.lex.text());\n                this.lex.next();\n                return expr;\n            }\n            default:\n                throw new Error(\"Syntax error\");\n        } // switch\n    }\n    parseUnary() {\n        if (this.lex.token() === Token.Exclaim) {\n            this.lex.next();\n            return new Expr_1.CallExpr(\"!\", [this.parseUnary()]);\n        }\n        return this.parsePrimary();\n    }\n    parseRelational() {\n        let expr = this.parseUnary();\n        while (true) {\n            if (this.lex.token() === Token.Identifier && this.lex.text() === \"in\") {\n                this.lex.next();\n                this.yyexpect(Token.LBracket);\n                const elements = [this.parseLiteral()];\n                while (this.lex.token() === Token.Comma) {\n                    this.lex.next();\n                    elements.push(this.parseLiteral());\n                }\n                this.yyexpect(Token.RBracket);\n                expr = new Expr_1.ContainsExpr(expr, elements.map(literal => literal.value));\n            }\n            else {\n                const op = getRelationalOp(this.lex.token());\n                if (op === undefined) {\n                    break;\n                }\n                this.lex.next();\n                const right = this.parseUnary();\n                expr = new Expr_1.CallExpr(op, [expr, right]);\n            }\n        }\n        return expr;\n    }\n    parseEquality() {\n        let expr = this.parseRelational();\n        while (true) {\n            const op = getEqualityOp(this.lex.token());\n            if (op === undefined) {\n                break;\n            }\n            this.lex.next();\n            const right = this.parseRelational();\n            expr = new Expr_1.CallExpr(op, [expr, right]);\n        }\n        return expr;\n    }\n    parseLogicalAnd() {\n        const expr = this.parseEquality();\n        if (this.lex.token() !== Token.AmpAmp) {\n            return expr;\n        }\n        const expressions = [expr];\n        do {\n            this.lex.next();\n            expressions.push(this.parseEquality());\n        } while (this.lex.token() === Token.AmpAmp);\n        return new Expr_1.CallExpr(\"all\", expressions);\n    }\n    parseLogicalOr() {\n        const expr = this.parseLogicalAnd();\n        if (this.lex.token() !== Token.BarBar) {\n            return expr;\n        }\n        const expressions = [expr];\n        do {\n            this.lex.next();\n            expressions.push(this.parseLogicalAnd());\n        } while (this.lex.token() === Token.BarBar);\n        return new Expr_1.CallExpr(\"any\", expressions);\n    }\n}\nexports.ExprParser = ExprParser;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/ExprParser.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/ExprPool.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/ExprPool.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Expr_1 = __webpack_require__(/*! ./Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\n/**\n * [[ExprPool]] maintains a set of unique interned [[Expr]] objects.\n *\n * @hidden\n */\nclass ExprPool {\n    constructor() {\n        this.m_booleanLiterals = new Map();\n        this.m_numberLiterals = new Map();\n        this.m_stringLiterals = new Map();\n        this.m_objectLiterals = new Map();\n        this.m_varExprs = new Map();\n        this.m_hasAttributeExprs = new Map();\n        this.m_inExprs = new Map();\n        this.m_callExprs = new Map();\n    }\n    /**\n     * Add `expr` to this [[ExprPool]] and return a unique [[Expr]]\n     * object that is structurally equivalent to `expr`.\n     *\n     * @param expr The [[Expr]] to add to this [[ExprPool]].\n     * @returns A unique [[Expr]] that is structurally equivalent to `expr`.\n     */\n    add(expr) {\n        return expr.accept(this, undefined);\n    }\n    visitNullLiteralExpr(expr, context) {\n        return Expr_1.NullLiteralExpr.instance;\n    }\n    visitBooleanLiteralExpr(expr, context) {\n        const e = this.m_booleanLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_booleanLiterals.set(expr.value, expr);\n        return expr;\n    }\n    visitNumberLiteralExpr(expr, context) {\n        const e = this.m_numberLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_numberLiterals.set(expr.value, expr);\n        return expr;\n    }\n    visitStringLiteralExpr(expr, context) {\n        const e = this.m_stringLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_stringLiterals.set(expr.value, expr);\n        return expr;\n    }\n    visitObjectLiteralExpr(expr, context) {\n        const e = this.m_objectLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_objectLiterals.set(expr.value, expr);\n        return expr;\n    }\n    visitVarExpr(expr, context) {\n        const e = this.m_varExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_varExprs.set(expr.name, expr);\n        return expr;\n    }\n    visitHasAttributeExpr(expr, context) {\n        const e = this.m_hasAttributeExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_hasAttributeExprs.set(expr.name, expr);\n        return expr;\n    }\n    visitContainsExpr(expr, context) {\n        const value = expr.value.accept(this, context);\n        if (!this.m_inExprs.has(value)) {\n            this.m_inExprs.set(value, []);\n        }\n        const inExprs = this.m_inExprs.get(value);\n        for (const inExpr of inExprs) {\n            if (inExpr.elements.length !== expr.elements.length) {\n                continue;\n            }\n            // find the index of the first element in the cached 'in' expr\n            // that is not contained in 'expr.elements'.\n            const i = inExpr.elements.findIndex(x => !expr.elements.includes(x));\n            if (i === -1) {\n                return inExpr;\n            }\n        }\n        const e = new Expr_1.ContainsExpr(value, expr.elements);\n        this.m_inExprs.set(value, [e]);\n        return e;\n    }\n    visitMatchExpr(expr, context) {\n        const value = expr.value.accept(this, context);\n        const branches = expr.branches.map(([label, body]) => [\n            label,\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n        return new Expr_1.MatchExpr(value, branches, fallback);\n    }\n    visitCaseExpr(expr, context) {\n        const branches = expr.branches.map(([condition, body]) => [\n            condition.accept(this, context),\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n        return new Expr_1.CaseExpr(branches, fallback);\n    }\n    visitCallExpr(expr, context) {\n        // rewrite the actual arguments\n        const expressions = expr.args.map(childExpr => childExpr.accept(this, context));\n        // ensure we have a valid set of interned expressions for the calls\n        if (!this.m_callExprs.has(expr.op)) {\n            this.m_callExprs.set(expr.op, []);\n        }\n        // get the calls for the given operator.\n        const calls = this.m_callExprs.get(expr.op);\n        for (const call of calls) {\n            // check the number of arguments\n            if (call.args.length !== expressions.length) {\n                continue;\n            }\n            // find the index of the first mismatch.\n            let index = 0;\n            for (; index < call.args.length; ++index) {\n                if (call.args[index] !== expressions[index]) {\n                    break;\n                }\n            }\n            if (index === call.args.length) {\n                // no mismatch found, return the 'interned' call.\n                return call;\n            }\n        }\n        const e = new Expr_1.CallExpr(expr.op, expressions);\n        calls.push(e);\n        return e;\n    }\n}\nexports.ExprPool = ExprPool;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/ExprPool.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/Extruder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/Extruder.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Fills an index buffer with the indices for the extruded walls for a polygon contour.\n *\n * @param indexBuffer Index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param contour Vertices that compose the contour.\n * @param contourEdges Collection of booleans indicating if contour edges should be added.\n * @param boundaryWalls If `false`, walls in tile boundaries will not be created.\n *\n */\nfunction addExtrudedWalls(indexBuffer, vertexOffset, vertexStride, contour, contourEdges, boundaryWalls) {\n    // Infer the index buffer's position of the vertices that form the extruded-polygons' walls\n    // by stepping through the contour segment by segment.\n    const nSegments = contour.length / vertexStride;\n    for (let i = 0; i < nSegments; ++i) {\n        const vFootprint0 = vertexOffset + i * 2;\n        const vRoof0 = vFootprint0 + 1;\n        const vFootprint1 = vertexOffset + ((i + 1) % nSegments) * 2;\n        const vRoof1 = vFootprint1 + 1;\n        if (boundaryWalls !== false || contourEdges === undefined) {\n            indexBuffer.push(vFootprint0, vRoof0, vRoof1, vRoof1, vFootprint1, vFootprint0);\n        }\n        else if (contourEdges[i]) {\n            indexBuffer.push(vFootprint0, vRoof0, vRoof1, vRoof1, vFootprint1, vFootprint0);\n        }\n    }\n}\nexports.addExtrudedWalls = addExtrudedWalls;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/Extruder.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/InterpolatedProperty.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/InterpolatedProperty.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst ColorUtils_1 = __webpack_require__(/*! ./ColorUtils */ \"./node_modules/@here/harp-datasource-protocol/lib/ColorUtils.js\");\nconst Env_1 = __webpack_require__(/*! ./Env */ \"./node_modules/@here/harp-datasource-protocol/lib/Env.js\");\nconst ExponentialInterpolant_1 = __webpack_require__(/*! ./ExponentialInterpolant */ \"./node_modules/@here/harp-datasource-protocol/lib/ExponentialInterpolant.js\");\nconst Expr_1 = __webpack_require__(/*! ./Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\nconst InterpolatedPropertyDefs_1 = __webpack_require__(/*! ./InterpolatedPropertyDefs */ \"./node_modules/@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.js\");\nconst StringEncodedNumeral_1 = __webpack_require__(/*! ./StringEncodedNumeral */ \"./node_modules/@here/harp-datasource-protocol/lib/StringEncodedNumeral.js\");\nconst logger = harp_utils_1.LoggerManager.instance.create(\"InterpolatedProperty\");\nconst interpolants = [\n    THREE.DiscreteInterpolant,\n    THREE.LinearInterpolant,\n    THREE.CubicInterpolant,\n    ExponentialInterpolant_1.ExponentialInterpolant\n];\nconst tmpBuffer = new Array(StringEncodedNumeral_1.StringEncodedNumeralFormatMaxSize);\n/**\n * Checks if a property is interpolated.\n * @param p property to be checked\n */\nfunction isInterpolatedPropertyDefinition(p) {\n    if (p &&\n        p.interpolationMode === undefined &&\n        Array.isArray(p.values) &&\n        p.values.length > 0 &&\n        p.values[0] !== undefined &&\n        Array.isArray(p.zoomLevels) &&\n        p.zoomLevels.length > 0 &&\n        p.zoomLevels[0] !== undefined &&\n        p.values.length === p.zoomLevels.length) {\n        return true;\n    }\n    return false;\n}\nexports.isInterpolatedPropertyDefinition = isInterpolatedPropertyDefinition;\n/**\n * Type guard to check if an object is an instance of `InterpolatedProperty`.\n */\nfunction isInterpolatedProperty(p) {\n    if (p &&\n        p.interpolationMode !== undefined &&\n        p.zoomLevels instanceof Float32Array &&\n        p.values !== undefined &&\n        p.values.length > 0 &&\n        (p.zoomLevels.length === p.values.length / 4 ||\n            p.zoomLevels.length === p.values.length / 3 ||\n            p.zoomLevels.length === p.values.length)) {\n        return true;\n    }\n    return false;\n}\nexports.isInterpolatedProperty = isInterpolatedProperty;\n/**\n * A temp [[Env]] containing the arguments passed to `getPropertyValue`.\n *\n * [[dynamicPropertiesTempEnv]] is used when `getPropertyValue` is\n * invoked with explicit values for `zoom` and `pixelToMeters` instead\n * of with an [[Env]].\n *\n * @hidden\n */\nconst dynamicPropertiesTempEnv = new Env_1.MapEnv({\n    $zoom: 0,\n    $pixelToMeters: 1\n});\nfunction getPropertyValue(property, envOrLevel, pixelToMeters = 1.0) {\n    if (Expr_1.Expr.isExpr(property)) {\n        let env;\n        if (typeof envOrLevel === \"number\") {\n            dynamicPropertiesTempEnv.entries.$zoom = envOrLevel;\n            dynamicPropertiesTempEnv.entries.$pixelToMeters = pixelToMeters;\n            env = dynamicPropertiesTempEnv;\n        }\n        else {\n            env = envOrLevel;\n        }\n        return property.evaluate(env, Expr_1.ExprScope.Dynamic);\n    }\n    let level;\n    if (typeof envOrLevel === \"number\") {\n        level = envOrLevel;\n    }\n    else {\n        level = envOrLevel.lookup(\"$zoom\");\n        pixelToMeters = envOrLevel.lookup(\"$pixelToMeters\");\n    }\n    // Non-interpolated property parsing\n    if (!isInterpolatedProperty(property)) {\n        if (typeof property !== \"string\") {\n            // Property in numeric or array, etc. format\n            return property;\n        }\n        else {\n            const value = StringEncodedNumeral_1.parseStringEncodedNumeral(property, pixelToMeters);\n            return value !== undefined ? value : property;\n        }\n        // Interpolated property\n    }\n    else if (property._stringEncodedNumeralType !== undefined) {\n        switch (property._stringEncodedNumeralType) {\n            case StringEncodedNumeral_1.StringEncodedNumeralType.Meters:\n            case StringEncodedNumeral_1.StringEncodedNumeralType.Pixels:\n                return getInterpolatedMetric(property, level, pixelToMeters);\n            case StringEncodedNumeral_1.StringEncodedNumeralType.Hex:\n            case StringEncodedNumeral_1.StringEncodedNumeralType.RGB:\n            case StringEncodedNumeral_1.StringEncodedNumeralType.RGBA:\n            case StringEncodedNumeral_1.StringEncodedNumeralType.HSL:\n                return getInterpolatedColor(property, level);\n        }\n    }\n    return getInterpolatedMetric(property, level, pixelToMeters);\n}\nexports.getPropertyValue = getPropertyValue;\nfunction getInterpolatedMetric(property, level, pixelToMeters) {\n    const nChannels = property.values.length / property.zoomLevels.length;\n    const interpolant = new interpolants[property.interpolationMode](property.zoomLevels, property.values, nChannels);\n    if (property.interpolationMode === InterpolatedPropertyDefs_1.InterpolationMode.Exponential &&\n        property.exponent !== undefined) {\n        interpolant.exponent = property.exponent;\n    }\n    interpolant.evaluate(level);\n    if (property._stringEncodedNumeralDynamicMask === undefined) {\n        return interpolant.resultBuffer[0];\n    }\n    else {\n        const maskInterpolant = new interpolants[property.interpolationMode](property.zoomLevels, property._stringEncodedNumeralDynamicMask, 1);\n        if (property.interpolationMode === InterpolatedPropertyDefs_1.InterpolationMode.Exponential &&\n            property.exponent !== undefined) {\n            maskInterpolant.exponent = property.exponent;\n        }\n        maskInterpolant.evaluate(level);\n        return (interpolant.resultBuffer[0] *\n            (1 + maskInterpolant.resultBuffer[0] * (pixelToMeters - 1)));\n    }\n}\nfunction getInterpolatedColor(property, level) {\n    const nChannels = property.values.length / property.zoomLevels.length;\n    const interpolant = new interpolants[property.interpolationMode](property.zoomLevels, property.values, nChannels);\n    if (property.interpolationMode === InterpolatedPropertyDefs_1.InterpolationMode.Exponential &&\n        property.exponent !== undefined) {\n        interpolant.exponent = property.exponent;\n    }\n    interpolant.evaluate(level);\n    harp_utils_1.assert(nChannels === 3 || nChannels === 4);\n    // ColorUtils.getHexFromRgba() does not clamp the values which may be out of\n    // color channels range (0 <= c <= 1) after interpolation.\n    if (nChannels === 4) {\n        return ColorUtils_1.ColorUtils.getHexFromRgba(THREE.Math.clamp(interpolant.resultBuffer[0], 0, 1), THREE.Math.clamp(interpolant.resultBuffer[1], 0, 1), THREE.Math.clamp(interpolant.resultBuffer[2], 0, 1), THREE.Math.clamp(interpolant.resultBuffer[3], 0, 1));\n    }\n    else {\n        return ColorUtils_1.ColorUtils.getHexFromRgb(THREE.Math.clamp(interpolant.resultBuffer[0], 0, 1), THREE.Math.clamp(interpolant.resultBuffer[1], 0, 1), THREE.Math.clamp(interpolant.resultBuffer[2], 0, 1));\n    }\n}\n/**\n * Convert JSON representation of interpolated property to internal, normalized version that\n * can be evaluated by [[getPropertyValue]].\n */\nfunction createInterpolatedProperty(prop) {\n    removeDuplicatePropertyValues(prop);\n    const interpolationMode = prop.interpolation !== undefined\n        ? InterpolatedPropertyDefs_1.InterpolationMode[prop.interpolation]\n        : InterpolatedPropertyDefs_1.InterpolationMode.Discrete;\n    const zoomLevels = new Float32Array(prop.zoomLevels);\n    const firstValue = prop.values[0];\n    switch (typeof firstValue) {\n        default:\n        case \"number\":\n        case \"boolean\":\n            return {\n                interpolationMode,\n                zoomLevels,\n                values: new Float32Array(prop.values),\n                exponent: prop.exponent\n            };\n        case \"string\":\n            // TODO: Minimize effort for pre-matching the numeral format.\n            const matchedFormat = StringEncodedNumeral_1.StringEncodedNumeralFormats.find(format => format.regExp.test(firstValue));\n            if (matchedFormat === undefined) {\n                if (interpolationMode === InterpolatedPropertyDefs_1.InterpolationMode.Discrete) {\n                    return {\n                        interpolationMode,\n                        zoomLevels,\n                        values: prop.values\n                    };\n                }\n                logger.error(`No StringEncodedNumeralFormat matched ${firstValue}.`);\n                return undefined;\n            }\n            let needsMask = false;\n            const propValues = new Float32Array(prop.values.length * matchedFormat.size);\n            const maskValues = new Float32Array(prop.values.length);\n            needsMask = procesStringEnocodedNumeralInterpolatedProperty(matchedFormat, prop, propValues, maskValues);\n            return {\n                interpolationMode,\n                zoomLevels,\n                values: propValues,\n                exponent: prop.exponent,\n                _stringEncodedNumeralType: matchedFormat.type,\n                _stringEncodedNumeralDynamicMask: needsMask ? maskValues : undefined\n            };\n    }\n}\nexports.createInterpolatedProperty = createInterpolatedProperty;\nfunction removeDuplicatePropertyValues(p) {\n    const eps = 0.001;\n    // detect cubic interpolations and remove stops\n    // closer than `eps`, this is needed to avoid\n    // possible NaN generated by the cubic interpolator.\n    const isCubic = p.interpolation === \"Cubic\";\n    for (let i = 0; i < p.values.length; ++i) {\n        const firstIdx = p.zoomLevels.findIndex(a => {\n            return isCubic ? Math.abs(a - p.zoomLevels[i]) < eps : a === p.zoomLevels[i];\n        });\n        if (firstIdx !== i) {\n            p.zoomLevels.splice(--i, 1);\n            p.values.splice(--i, 1);\n        }\n    }\n}\nfunction procesStringEnocodedNumeralInterpolatedProperty(baseFormat, prop, propValues, maskValues) {\n    let needsMask = false;\n    const allowedValueFormats = baseFormat.type === StringEncodedNumeral_1.StringEncodedNumeralType.Meters ||\n        baseFormat.type === StringEncodedNumeral_1.StringEncodedNumeralType.Pixels\n        ? StringEncodedNumeral_1.StringEncodedMetricFormats\n        : StringEncodedNumeral_1.StringEncodedColorFormats;\n    for (let valueIdx = 0; valueIdx < prop.values.length; ++valueIdx) {\n        let matched = false;\n        for (const valueFormat of allowedValueFormats) {\n            const value = prop.values[valueIdx];\n            matched = valueFormat.decoder(value, tmpBuffer);\n            if (!matched) {\n                continue;\n            }\n            if (valueFormat.mask !== undefined) {\n                maskValues[valueIdx] = valueFormat.mask;\n                needsMask = true;\n            }\n            for (let i = 0; i < valueFormat.size; ++i) {\n                propValues[valueIdx * valueFormat.size + i] = tmpBuffer[i];\n            }\n            break;\n        }\n        if (!matched) {\n            throw Error(`Not all interpolation values match the same format: ${JSON.stringify(prop)}`);\n        }\n    }\n    return needsMask;\n}\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/InterpolatedProperty.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Interpolation mode used when computing a [[InterpolatedProperty]] value for a given zoom level.\n */\nvar InterpolationMode;\n(function (InterpolationMode) {\n    InterpolationMode[InterpolationMode[\"Discrete\"] = 0] = \"Discrete\";\n    InterpolationMode[InterpolationMode[\"Linear\"] = 1] = \"Linear\";\n    InterpolationMode[InterpolationMode[\"Cubic\"] = 2] = \"Cubic\";\n    InterpolationMode[InterpolationMode[\"Exponential\"] = 3] = \"Exponential\";\n})(InterpolationMode = exports.InterpolationMode || (exports.InterpolationMode = {}));\n/**\n * Converts an [[InterpolatedPropertyDefinition]] to a [[JsonExpr]].\n *\n * @param property A valid [[InterpolatedPropertyDefinition]]\n */\nfunction interpolatedPropertyDefinitionToJsonExpr(property) {\n    if (property.interpolation === undefined || property.interpolation === \"Discrete\") {\n        const step = [\"step\", [\"zoom\"], property.values[0]];\n        for (let i = 1; i < property.zoomLevels.length; ++i) {\n            step.push(property.zoomLevels[i], property.values[i]);\n        }\n        return step;\n    }\n    const interpolation = [\"interpolate\"];\n    switch (property.interpolation) {\n        case \"Linear\":\n            interpolation.push([\"linear\"]);\n            break;\n        case \"Cubic\":\n            interpolation.push([\"cubic\"]);\n            break;\n        case \"Exponential\":\n            interpolation.push([\n                \"exponential\",\n                property.exponent !== undefined ? property.exponent : 2\n            ]);\n            break;\n        default:\n            throw new Error(`interpolation mode '${property.interpolation}' is not supported`);\n    } //switch\n    interpolation.push([\"zoom\"]);\n    for (let i = 0; i < property.zoomLevels.length; ++i) {\n        interpolation.push(property.zoomLevels[i], property.values[i]);\n    }\n    return interpolation;\n}\nexports.interpolatedPropertyDefinitionToJsonExpr = interpolatedPropertyDefinitionToJsonExpr;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/Outliner.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/Outliner.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst currEdgeStart = new THREE.Vector2();\nconst currEdgeGoal = new THREE.Vector2();\nconst prevEdgeStart = new THREE.Vector2();\nconst prevEdgeGoal = new THREE.Vector2();\n/**\n * Fills an index buffer with the indices for the edges of a polygon contour.\n *\n * @param indexBuffer Edge index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param polygonContour Vertices that compose the contour.\n * @param polygonContourEdges Collection of booleans indicating if contour edges should be added.\n */\nfunction addPolygonEdges(indexBuffer, vertexOffset, vertexStride, polygonContour, polygonContourEdges, isExtruded, addFootprintEdges, wallEdgeSlope) {\n    for (let i = 0; i < polygonContourEdges.length; ++i) {\n        if (polygonContourEdges[i]) {\n            if (isExtruded === true) {\n                const vFootprint0 = vertexOffset + i * 2;\n                const vRoof0 = vFootprint0 + 1;\n                const vFootprint1 = vertexOffset + ((i + 1) % polygonContourEdges.length) * 2;\n                const vRoof1 = vFootprint1 + 1;\n                if (addFootprintEdges === true) {\n                    indexBuffer.push(vFootprint0, vFootprint1);\n                }\n                indexBuffer.push(vRoof0, vRoof1);\n                const prevEdgeIdx = (i === 0 ? polygonContourEdges.length : i) - 1;\n                if (polygonContourEdges[prevEdgeIdx]) {\n                    if (wallEdgeSlope !== undefined) {\n                        const v0x = polygonContour[i * vertexStride];\n                        const v0y = polygonContour[i * vertexStride + 1];\n                        const v1x = polygonContour[((i + 1) % polygonContourEdges.length) * vertexStride];\n                        const v1y = polygonContour[((i + 1) % polygonContourEdges.length) * vertexStride + 1];\n                        currEdgeStart.set(v0x, v0y);\n                        currEdgeGoal.set(v1x, v1y);\n                        prevEdgeStart.set(polygonContour[prevEdgeIdx * vertexStride], polygonContour[prevEdgeIdx * vertexStride + 1]);\n                        prevEdgeGoal.set(currEdgeStart.x, currEdgeStart.y);\n                        if (prevEdgeGoal\n                            .sub(prevEdgeStart)\n                            .normalize()\n                            .dot(currEdgeGoal.sub(currEdgeStart).normalize()) <= wallEdgeSlope) {\n                            indexBuffer.push(vFootprint0, vRoof0);\n                        }\n                    }\n                    else {\n                        indexBuffer.push(vFootprint0, vRoof0);\n                    }\n                }\n            }\n            else {\n                const vFoot0 = vertexOffset + i;\n                const vRoof0 = vertexOffset + ((i + 1) % polygonContourEdges.length);\n                indexBuffer.push(vFoot0, vRoof0);\n            }\n        }\n    }\n}\nexports.addPolygonEdges = addPolygonEdges;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/Outliner.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/StringEncodedNumeral.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/StringEncodedNumeral.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst three_1 = __webpack_require__(/*! three */ \"three\");\nconst ColorUtils_1 = __webpack_require__(/*! ./ColorUtils */ \"./node_modules/@here/harp-datasource-protocol/lib/ColorUtils.js\");\nconst tmpColor = new three_1.Color();\n/**\n * Enumeration of supported string encoded numerals.\n */\nvar StringEncodedNumeralType;\n(function (StringEncodedNumeralType) {\n    StringEncodedNumeralType[StringEncodedNumeralType[\"Meters\"] = 0] = \"Meters\";\n    StringEncodedNumeralType[StringEncodedNumeralType[\"Pixels\"] = 1] = \"Pixels\";\n    StringEncodedNumeralType[StringEncodedNumeralType[\"Hex\"] = 2] = \"Hex\";\n    StringEncodedNumeralType[StringEncodedNumeralType[\"RGB\"] = 3] = \"RGB\";\n    StringEncodedNumeralType[StringEncodedNumeralType[\"RGBA\"] = 4] = \"RGBA\";\n    StringEncodedNumeralType[StringEncodedNumeralType[\"HSL\"] = 5] = \"HSL\";\n})(StringEncodedNumeralType = exports.StringEncodedNumeralType || (exports.StringEncodedNumeralType = {}));\nconst StringEncodedMeters = {\n    type: StringEncodedNumeralType.Meters,\n    size: 1,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))m$/,\n    decoder: (encodedValue, target) => {\n        const match = StringEncodedMeters.regExp.exec(encodedValue);\n        return match ? (target[0] = Number(match[1])) !== undefined : false;\n    }\n};\nconst StringEncodedPixels = {\n    type: StringEncodedNumeralType.Pixels,\n    size: 1,\n    mask: 1.0,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))px$/,\n    decoder: (encodedValue, target) => {\n        const match = StringEncodedPixels.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        target[0] = Number(match[1]);\n        return true;\n    }\n};\nconst StringEncodedHex = {\n    type: StringEncodedNumeralType.Hex,\n    size: 4,\n    regExp: /^\\#((?:[0-9A-Fa-f][0-9A-Fa-f]){3,4}|[0-9A-Fa-f]{3,4})$/,\n    decoder: (encodedValue, target) => {\n        const match = StringEncodedHex.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        const hex = match[1];\n        const size = hex.length;\n        // Only few sizes are possible for given reg-exp.\n        harp_utils_1.assert(size === 3 || size === 4 || size === 6 || size === 8, `Matched incorrect hex format: ${encodedValue}`);\n        // Note that we simply ignore alpha channel value.\n        // TODO: To be resolved with HARP-7517\n        if (size === 3 || size === 4) {\n            // #RGB or #RGBA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n            target[1] = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n            target[2] = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n            target[3] = size === 4 ? parseInt(hex.charAt(3) + hex.charAt(3), 16) / 255 : 1;\n        }\n        else if (size === 6 || size === 8) {\n            // #RRGGBB or #RRGGBBAA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n            target[1] = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n            target[2] = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n            target[3] = size === 8 ? parseInt(hex.charAt(6) + hex.charAt(7), 16) / 255 : 1;\n        }\n        return true;\n    }\n};\nconst StringEncodedRGB = {\n    type: StringEncodedNumeralType.RGB,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgb\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])) ?\\)$/,\n    decoder: (encodedValue, target) => {\n        const channels = StringEncodedRGB.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        return true;\n    }\n};\nconst StringEncodedRGBA = {\n    type: StringEncodedNumeralType.RGBA,\n    size: 4,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgba\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:(0(?:\\.[0-9]+)?|1(?:\\.0+)?)) ?\\)$/,\n    decoder: (encodedValue, target) => {\n        const channels = StringEncodedRGBA.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        target[3] = parseFloat(channels[4]);\n        return true;\n    }\n};\nconst StringEncodedHSL = {\n    type: StringEncodedNumeralType.HSL,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^hsl\\( ?((?:[0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-9]{1,2}|3[0-5][0-9]|360)), ?(?:([0-9]|[1-9][0-9]|100)%), ?(?:([0-9]|[1-9][0-9]|100)%) ?\\)$/,\n    decoder: (encodedValue, target) => {\n        const channels = StringEncodedHSL.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        tmpColor.setHSL(parseInt(channels[1], 10) / 360, parseInt(channels[2], 10) / 100, parseInt(channels[3], 10) / 100);\n        target[0] = tmpColor.r;\n        target[1] = tmpColor.g;\n        target[2] = tmpColor.b;\n        return true;\n    }\n};\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing sizes, lengths and distances.\n */\nexports.StringEncodedMetricFormats = [\n    StringEncodedMeters,\n    StringEncodedPixels\n];\nconst StringEncodedMetricFormatMaxSize = exports.StringEncodedMetricFormats.reduce((a, b) => Math.max(a, b.size), 0);\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing color data.\n */\nexports.StringEncodedColorFormats = [\n    StringEncodedHex,\n    StringEncodedRGB,\n    StringEncodedRGBA,\n    StringEncodedHSL\n];\nconst StringEncodedColorFormatMaxSize = exports.StringEncodedColorFormats.reduce((a, b) => Math.max(a, b.size), 0);\n/**\n * Array of supported [[StringEncodedNumeralFormat]]s (intended to be indexed with\n * [[StringEncodedNumeralType]] enum).\n */\nexports.StringEncodedNumeralFormats = [\n    ...exports.StringEncodedMetricFormats,\n    ...exports.StringEncodedColorFormats\n];\nexports.StringEncodedNumeralFormatMaxSize = Math.max(StringEncodedColorFormatMaxSize, StringEncodedMetricFormatMaxSize);\nconst tmpBuffer = new Array(exports.StringEncodedNumeralFormatMaxSize);\n/**\n * Parse string encoded numeral values using all known [[StringEncodedNumeralFormats]].\n *\n * @param numeral The string representing numeric value.\n * @param pixelToMeters The ratio used to convert from meters to pixels (default 1.0).\n * @returns Number parsed or __undefined__ if non of the numeral patterns matches the expression\n * provided in [[numeral]].\n */\nfunction parseStringEncodedNumeral(numeral, pixelToMeters = 1.0) {\n    let result;\n    const formatMatch = (format) => {\n        if (format.decoder(numeral, tmpBuffer)) {\n            switch (format.type) {\n                case StringEncodedNumeralType.Meters:\n                    result = tmpBuffer[0];\n                    break;\n                case StringEncodedNumeralType.Pixels:\n                    result = tmpBuffer[0] * pixelToMeters;\n                    break;\n                case StringEncodedNumeralType.Hex:\n                case StringEncodedNumeralType.RGBA:\n                    result = ColorUtils_1.ColorUtils.getHexFromRgba(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2], tmpBuffer[3]);\n                    break;\n                case StringEncodedNumeralType.RGB:\n                case StringEncodedNumeralType.HSL:\n                    result = ColorUtils_1.ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n                    break;\n                default:\n                    result = tmpBuffer[0];\n                    break;\n            }\n            return true;\n        }\n        return false;\n    };\n    exports.StringEncodedNumeralFormats.some(formatMatch);\n    return result;\n}\nexports.parseStringEncodedNumeral = parseStringEncodedNumeral;\n/**\n * Parse string encoded color value using all known [[StringEncodedColorFormats]].\n *\n * @param color The string encoded color expression (i.e. '#FFF', 'rgb(255, 0, 0)', etc.).\n * @returns The color parsed or __undefined__ if non of the known representations matches\n * the expression provided in [[color]].\n */\nfunction parseStringEncodedColor(color) {\n    const matchedFormat = matchFormat(exports.StringEncodedColorFormats, color, tmpBuffer);\n    if (matchedFormat === undefined) {\n        return undefined;\n    }\n    switch (matchedFormat.type) {\n        case StringEncodedNumeralType.Hex:\n        case StringEncodedNumeralType.RGBA:\n            return ColorUtils_1.ColorUtils.getHexFromRgba(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2], tmpBuffer[3]);\n        case StringEncodedNumeralType.RGB:\n        case StringEncodedNumeralType.HSL:\n            return ColorUtils_1.ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n        default:\n            return tmpBuffer[0];\n    }\n}\nexports.parseStringEncodedColor = parseStringEncodedColor;\nfunction matchFormat(formats, numeral, result) {\n    return formats.find(format => {\n        return format.decoder(numeral, result) ? true : false;\n    });\n}\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/StringEncodedNumeral.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/StyleSetEvaluator.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/StyleSetEvaluator.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst Expr_1 = __webpack_require__(/*! ./Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\nconst ExprPool_1 = __webpack_require__(/*! ./ExprPool */ \"./node_modules/@here/harp-datasource-protocol/lib/ExprPool.js\");\nconst InterpolatedProperty_1 = __webpack_require__(/*! ./InterpolatedProperty */ \"./node_modules/@here/harp-datasource-protocol/lib/InterpolatedProperty.js\");\nconst InterpolatedPropertyDefs_1 = __webpack_require__(/*! ./InterpolatedPropertyDefs */ \"./node_modules/@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.js\");\nconst TechniqueDescriptor_1 = __webpack_require__(/*! ./TechniqueDescriptor */ \"./node_modules/@here/harp-datasource-protocol/lib/TechniqueDescriptor.js\");\nconst Techniques_1 = __webpack_require__(/*! ./Techniques */ \"./node_modules/@here/harp-datasource-protocol/lib/Techniques.js\");\nconst Theme_1 = __webpack_require__(/*! ./Theme */ \"./node_modules/@here/harp-datasource-protocol/lib/Theme.js\");\nconst logger = harp_utils_1.LoggerManager.instance.create(\"StyleSetEvaluator\");\nconst emptyTechniqueDescriptor = TechniqueDescriptor_1.mergeTechniqueDescriptor({});\n/**\n * [[StyleConditionClassifier]] searches for usages of `$layer` in `when` conditions\n * associated with styling rules.\n *\n * @hidden\n */\nclass StyleConditionClassifier {\n    classify(style) {\n        if (style._whenExpr) {\n            const savedStyle = this.switchStyle(style);\n            style._whenExpr = style._whenExpr.accept(this, undefined);\n            this._style = savedStyle;\n        }\n    }\n    visitNullLiteralExpr(expr, enclosingExpr) {\n        return expr;\n    }\n    visitBooleanLiteralExpr(expr, enclosingExpr) {\n        return expr;\n    }\n    visitNumberLiteralExpr(expr, enclosingExpr) {\n        return expr;\n    }\n    visitStringLiteralExpr(expr, enclosingExpr) {\n        return expr;\n    }\n    visitObjectLiteralExpr(expr, enclosingExpr) {\n        return expr;\n    }\n    visitVarExpr(expr, enclosingExpr) {\n        return expr;\n    }\n    visitHasAttributeExpr(expr, enclosingExpr) {\n        return expr;\n    }\n    visitContainsExpr(expr, enclosingExpr) {\n        return expr;\n    }\n    visitMatchExpr(expr, enclosingExpr) {\n        return expr;\n    }\n    visitCaseExpr(expr, enclosingExpr) {\n        return expr;\n    }\n    visitCallExpr(call, enclosingExpr) {\n        if (call.op === \"all\") {\n            // processing of an `[\"all\", e1, e2, ... eN]` expression. In this case\n            // search for expressions matching comparison of `$layer` and string literals\n            // in the sub expressions.\n            const children = call.args\n                .map(childExpr => childExpr.accept(this, call))\n                .filter(childExpr => childExpr !== undefined);\n            return new Expr_1.CallExpr(call.op, children);\n        }\n        else if (enclosingExpr) {\n            // `call` is a direct child expression of an `\"all\"` operator.\n            const matched = this.matchVarStringComparison(call);\n            if (matched) {\n                if (this._style.layer === undefined && matched.name === \"$layer\") {\n                    // found a subexpression `[\"==\", [\"get\", \"$layer\"], \"some layer name\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $layer in\n                    // [[StyleInternalParams]].\n                    this._style.layer = matched.value;\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                }\n                else if (this._style._geometryType === undefined &&\n                    matched.name === \"$geometryType\") {\n                    // found a subexpression `[\"==\", [\"get\", \"$geometryType\"], \"geometry\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $geometryType in\n                    // [[StyleInternalParams]].\n                    this._style._geometryType = matched.value;\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                }\n            }\n        }\n        return call;\n    }\n    /**\n     * Tests if the given `call` matches the structure [\"==\", [\"get\", name], value].\n     * If a match is found returns an object containing the `name` and the `value`;\n     *\n     * @param call The expression to match.\n     */\n    matchVarStringComparison(call) {\n        if (call.op === \"==\") {\n            const left = call.args[0];\n            const right = call.args[1];\n            if (left instanceof Expr_1.VarExpr && right instanceof Expr_1.StringLiteralExpr) {\n                return { name: left.name, value: right.value };\n            }\n            if (right instanceof Expr_1.VarExpr && left instanceof Expr_1.StringLiteralExpr) {\n                return { name: right.name, value: left.value };\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Sets the given `style` as current.\n     *\n     * @returns The previous `style`.\n     */\n    switchStyle(style) {\n        const saved = this._style;\n        this._style = style;\n        return saved;\n    }\n}\nclass OptimizedSubSetKey {\n    constructor(layer, geometryType) {\n        this.key = \"\";\n        this.set(layer, geometryType);\n    }\n    set(layer, geometryType, env) {\n        let keyUpdateNeeded = false;\n        if (layer === undefined) {\n            const envLayer = env !== undefined ? env.lookup(\"$layer\") : undefined;\n            layer = typeof envLayer === \"string\" ? envLayer : undefined;\n        }\n        if (this.layer !== layer) {\n            this.layer = layer;\n            keyUpdateNeeded = true;\n        }\n        if (geometryType === undefined) {\n            const envGeometryType = env !== undefined ? env.lookup(\"$geometryType\") : undefined;\n            geometryType = typeof envGeometryType === \"string\" ? envGeometryType : undefined;\n        }\n        if (this.geometryType !== geometryType) {\n            this.geometryType = geometryType;\n            keyUpdateNeeded = true;\n        }\n        if (keyUpdateNeeded) {\n            this.updateKey();\n        }\n        return this;\n    }\n    updateKey() {\n        if (this.layer !== undefined) {\n            // tslint:disable-next-line:prefer-conditional-expression\n            if (this.geometryType !== undefined) {\n                this.key = `${this.layer}:${this.geometryType}`;\n            }\n            else {\n                this.key = `${this.layer}:`;\n            }\n        }\n        else {\n            if (this.geometryType !== undefined) {\n                this.key = `:${this.geometryType}`;\n            }\n            else {\n                this.key = \"all\";\n            }\n        }\n        this.cachedStyleSet = undefined;\n    }\n}\n/**\n * Combine data from datasource and apply the rules from a specified theme to show it on the map.\n */\nclass StyleSetEvaluator {\n    constructor(styleSet, definitions) {\n        this.m_techniques = [];\n        this.m_exprPool = new ExprPool_1.ExprPool();\n        this.m_cachedResults = new Map();\n        this.m_styleConditionClassifier = new StyleConditionClassifier();\n        this.m_subStyleSetCache = new Map();\n        this.m_definitionExprCache = new Map();\n        this.m_tmpOptimizedSubSetKey = new OptimizedSubSetKey();\n        this.m_emptyEnv = new Expr_1.Env();\n        this.m_definitions = definitions;\n        this.styleSet = resolveReferences(styleSet, definitions);\n        computeDefaultRenderOrder(this.styleSet);\n        this.compileStyleSet();\n    }\n    /**\n     * Find all techniques that fit the current objects' environment.\n     * *The techniques in the resulting array may not be modified* since they are being reused for\n     * identical objects.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     * representation.\n     * @param layer The optional layer name used to filter techniques.\n     * @param geometryType The optional geometryType used to filter techniques.\n     */\n    getMatchingTechniques(env, layer, geometryType) {\n        const result = [];\n        this.m_cachedResults.clear();\n        const optimizedSubSetKey = this.m_tmpOptimizedSubSetKey;\n        optimizedSubSetKey.set(layer, geometryType, env);\n        // get the requested $layer and $geometryType, if any.\n        this.m_layer = optimizedSubSetKey.layer;\n        this.m_geometryType = optimizedSubSetKey.geometryType;\n        this.m_zoomLevel = env.lookup(\"$zoom\");\n        const searchedStyleSet = this.getOptimizedStyleSet(optimizedSubSetKey);\n        for (const currStyle of searchedStyleSet) {\n            if (this.processStyle(env, currStyle, result)) {\n                break;\n            }\n        }\n        return result;\n    }\n    /**\n     * Check if `styleSet` contains any rule related to `layer`.\n     *\n     * @param layer name of layer\n     */\n    wantsLayer(layer) {\n        return (this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, undefined)).length > 0);\n    }\n    /**\n     * Check if `styleSet` contains any rule related to particular `[layer, geometryType]` pair.\n     *\n     * @param layer name of layer\n     * @param geometryType type of layer - `point`, `line` or `polygon`\n     */\n    wantsFeature(layer, geometryType) {\n        return (this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, geometryType))\n            .length > 0);\n    }\n    /**\n     * Get the expression evaluation cache, for further feature processing.\n     *\n     * This object is valid until next `getMatchingTechniques` call.\n     */\n    get expressionEvaluatorCache() {\n        return this.m_cachedResults;\n    }\n    /**\n     * Reset array of techniques.\n     *\n     * Cleans technique array and indices, so it doesn't accumulate accross several decoding runs.\n     */\n    resetTechniques() {\n        for (const techinque of this.m_techniques) {\n            techinque._index = undefined;\n        }\n        this.m_techniques.length = 0;\n    }\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get techniques() {\n        return this.m_techniques;\n    }\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get decodedTechniques() {\n        return this.m_techniques.map(makeDecodedTechnique);\n    }\n    getOptimizedStyleSet(subSetKey) {\n        if (subSetKey.cachedStyleSet !== undefined) {\n            return subSetKey.cachedStyleSet;\n        }\n        let optimizedStyleSet = this.m_subStyleSetCache.get(subSetKey.key);\n        if (optimizedStyleSet !== undefined) {\n            subSetKey.cachedStyleSet = optimizedStyleSet;\n            return optimizedStyleSet;\n        }\n        optimizedStyleSet = this.createPreFilteredStyleSet(subSetKey);\n        this.m_subStyleSetCache.set(subSetKey.key, optimizedStyleSet);\n        subSetKey.cachedStyleSet = optimizedStyleSet;\n        return optimizedStyleSet;\n    }\n    createPreFilteredStyleSet(subSetKey) {\n        const { layer, geometryType } = subSetKey;\n        return this.styleSet.filter(style => {\n            if (layer !== undefined && style.layer !== undefined && style.layer !== layer) {\n                return false;\n            }\n            if (geometryType !== undefined &&\n                style._geometryType !== undefined &&\n                style._geometryType !== geometryType) {\n                return false;\n            }\n            return true;\n        });\n    }\n    /**\n     * Compile the `when` conditions found when traversting the styling rules.\n     */\n    compileStyleSet() {\n        this.styleSet.forEach(style => this.compileStyle(style));\n        // Create optimized styleSets for each `layer` & `geometryType` tuple.\n        this.styleSet.forEach(style => {\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(style.layer, style._geometryType));\n        });\n    }\n    /**\n     * Compile the `when` conditions reachable from the given `style`.\n     *\n     * @param style The current style.\n     */\n    compileStyle(style) {\n        if (style.when !== undefined) {\n            try {\n                style._whenExpr = Array.isArray(style.when)\n                    ? Expr_1.Expr.fromJSON(style.when, this.m_definitions, this.m_definitionExprCache)\n                    : Expr_1.Expr.parse(style.when);\n                // search for usages of '$layer' and any other\n                // special symbol that can be used to speed up the evaluation\n                // of the `when` conditions associated to this `style`.\n                this.m_styleConditionClassifier.classify(style);\n                if (style._whenExpr !== undefined) {\n                    style._whenExpr = style._whenExpr.intern(this.m_exprPool);\n                }\n                if (Expr_1.isJsonExpr(style.minZoomLevel)) {\n                    style._minZoomLevelExpr = Expr_1.Expr.fromJSON(style.minZoomLevel).intern(this.m_exprPool);\n                }\n                if (Expr_1.isJsonExpr(style.maxZoomLevel)) {\n                    style._maxZoomLevelExpr = Expr_1.Expr.fromJSON(style.maxZoomLevel).intern(this.m_exprPool);\n                }\n            }\n            catch (err) {\n                logger.log(\"failed to evaluate expression\", JSON.stringify(style.when), \"error\", String(err));\n            }\n        }\n    }\n    /**\n     * Process a style (and its sub-styles) hierarchically to look for the technique that fits the\n     * current objects' environment. The attributes of the styles are assembled to create a unique\n     * technique for every object.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     *            representation.\n     * @param style Current style (could also be top of stack).\n     * @param result The array of resulting techniques. There may be more than one technique per\n     *               object, resulting in multiple graphical objects for representation.\n     * @returns `true` if style has been found and processing is finished. `false` if not found, or\n     *          more than one technique should be applied.\n     */\n    processStyle(env, style, result) {\n        if (!this.checkZoomLevel(env, style)) {\n            return false;\n        }\n        if (this.m_layer !== undefined &&\n            style.layer !== undefined &&\n            style.layer !== this.m_layer) {\n            return false;\n        }\n        if (this.m_geometryType !== undefined &&\n            style._geometryType !== undefined &&\n            style._geometryType !== this.m_geometryType) {\n            return false;\n        }\n        if (style._whenExpr) {\n            try {\n                if (!style._whenExpr.evaluate(env, Expr_1.ExprScope.Condition, this.m_cachedResults)) {\n                    // Stop processing this styling rule. The `when` condition\n                    // associated with the current `style` evaluates to false so\n                    // no techinque defined by this style should be applied.\n                    return false;\n                }\n            }\n            catch (error) {\n                logger.error(`failed to evaluate expression '${JSON.stringify(style.when)}': ${error}`);\n                return false;\n            }\n        }\n        if (style.technique === undefined) {\n            return false;\n        }\n        // we found a technique!\n        if (style.technique !== \"none\") {\n            result.push(this.getTechniqueForStyleMatch(env, style));\n        }\n        // stop processing if \"final\" is set\n        return style.final === true;\n    }\n    checkZoomLevel(env, style) {\n        if (style.minZoomLevel === undefined && style.maxZoomLevel === undefined) {\n            return true;\n        }\n        const zoomLevel = this.m_zoomLevel;\n        if (zoomLevel === undefined) {\n            return true;\n        }\n        if (style.minZoomLevel !== undefined) {\n            let minZoomLevel = style.minZoomLevel;\n            if (style._minZoomLevelExpr) {\n                // the constraint is defined as expression, evaluate it and\n                // use its value\n                try {\n                    minZoomLevel = style._minZoomLevelExpr.evaluate(env, Expr_1.ExprScope.Condition, this.m_cachedResults);\n                }\n                catch (error) {\n                    logger.error(`failed to evaluate expression '${JSON.stringify(style._minZoomLevelExpr)}': ${error}`);\n                }\n            }\n            if (typeof minZoomLevel === \"number\" && zoomLevel < minZoomLevel) {\n                return false;\n            }\n        }\n        if (style.maxZoomLevel !== undefined) {\n            let maxZoomLevel = style.maxZoomLevel;\n            if (style._maxZoomLevelExpr) {\n                try {\n                    maxZoomLevel = style._maxZoomLevelExpr.evaluate(env, Expr_1.ExprScope.Condition, this.m_cachedResults);\n                }\n                catch (error) {\n                    logger.error(`failed to evaluate expression '${JSON.stringify(style._maxZoomLevelExpr)}': ${error}`);\n                }\n            }\n            if (typeof maxZoomLevel === \"number\" && zoomLevel > maxZoomLevel) {\n                return false;\n            }\n        }\n        return true;\n    }\n    getTechniqueForStyleMatch(env, style) {\n        this.checkStyleDynamicAttributes(style);\n        let technique;\n        if (style._dynamicTechniques !== undefined) {\n            const dynamicAttributes = this.evaluateTechniqueProperties(style, env);\n            const key = this.getDynamicTechniqueKey(style, dynamicAttributes);\n            technique = style._dynamicTechniques.get(key);\n            if (technique === undefined) {\n                technique = this.createTechnique(style, key, dynamicAttributes);\n                style._dynamicTechniques.set(key, technique);\n            }\n        }\n        else {\n            technique = style._staticTechnique;\n            if (technique === undefined) {\n                style._staticTechnique = technique = this.createTechnique(style, `${style._styleSetIndex}`, []);\n            }\n        }\n        if (technique._index === undefined) {\n            technique._index = this.m_techniques.length;\n            this.m_techniques.push(technique);\n        }\n        return technique;\n    }\n    getDynamicTechniqueKey(style, dynamicAttributes) {\n        const dynamicAttrKey = dynamicAttributes\n            .map(([_attrName, attrValue]) => {\n            if (attrValue === undefined) {\n                return \"U\";\n            }\n            else {\n                return JSON.stringify(attrValue);\n            }\n        })\n            .join(\":\");\n        return `${style._styleSetIndex}:${dynamicAttrKey}`;\n    }\n    checkStyleDynamicAttributes(style) {\n        if (style._dynamicTechniqueAttributes !== undefined || style.technique === \"none\") {\n            return;\n        }\n        style._dynamicTechniqueAttributes = [];\n        style._dynamicFeatureAttributes = [];\n        style._dynamicForwardedAttributes = [];\n        style._staticAttributes = [];\n        const dynamicFeatureAttributes = style._dynamicFeatureAttributes;\n        const dynamicTechniqueAttributes = style._dynamicTechniqueAttributes;\n        const dynamicForwardedAttributes = style._dynamicForwardedAttributes;\n        const targetStaticAttributes = style._staticAttributes;\n        const techniqueDescriptor = Techniques_1.techniqueDescriptors[style.technique] || emptyTechniqueDescriptor;\n        const processAttribute = (attrName, attrValue) => {\n            if (attrValue === undefined) {\n                return;\n            }\n            if (Expr_1.isJsonExpr(attrValue)) {\n                attrValue = Expr_1.Expr.fromJSON(attrValue, this.m_definitions, this.m_definitionExprCache).intern(this.m_exprPool);\n            }\n            else if (InterpolatedProperty_1.isInterpolatedPropertyDefinition(attrValue)) {\n                // found a property using an object-like interpolation definition.\n                attrValue = Expr_1.Expr.fromJSON(InterpolatedPropertyDefs_1.interpolatedPropertyDefinitionToJsonExpr(attrValue)).intern(this.m_exprPool);\n            }\n            if (Expr_1.Expr.isExpr(attrValue)) {\n                const deps = attrValue.dependencies();\n                if (!deps.zoom && deps.properties.size === 0) {\n                    // no data-dependencies detected.\n                    attrValue = attrValue.evaluate(this.m_emptyEnv);\n                }\n            }\n            if (Expr_1.Expr.isExpr(attrValue)) {\n                let attrScope = techniqueDescriptor.attrScopes[attrName];\n                if (attrScope === undefined) {\n                    // Use [[AttrScope.TechniqueGeometry]] as default scope for the attribute.\n                    attrScope = TechniqueDescriptor_1.AttrScope.TechniqueGeometry;\n                }\n                const deps = attrValue.dependencies();\n                switch (attrScope) {\n                    case TechniqueDescriptor_1.AttrScope.FeatureGeometry:\n                        dynamicFeatureAttributes.push([attrName, attrValue]);\n                        break;\n                    case TechniqueDescriptor_1.AttrScope.TechniqueGeometry:\n                        dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        break;\n                    case TechniqueDescriptor_1.AttrScope.TechniqueRendering:\n                        if (deps.properties.size === 0) {\n                            dynamicForwardedAttributes.push([attrName, attrValue]);\n                        }\n                        else {\n                            dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        }\n                        break;\n                }\n            }\n            else if (attrValue !== undefined && attrValue !== null) {\n                targetStaticAttributes.push([attrName, attrValue]);\n            }\n        };\n        processAttribute(\"renderOrder\", style.renderOrder);\n        // TODO: What the heck is that !?\n        processAttribute(\"label\", style.labelProperty);\n        // line & solid-line secondaryRenderOrder should be generic attr\n        // TODO: maybe just warn and force move it to `attr` ?\n        processAttribute(\"secondaryRenderOrder\", style.secondaryRenderOrder);\n        if (style.attr !== undefined) {\n            for (const attrName in style.attr) {\n                if (!style.attr.hasOwnProperty(attrName)) {\n                    continue;\n                }\n                processAttribute(attrName, style.attr[attrName]);\n            }\n        }\n        if (dynamicTechniqueAttributes.length > 0) {\n            style._dynamicTechniques = new Map();\n        }\n    }\n    evaluateTechniqueProperties(style, env) {\n        if (style._dynamicTechniqueAttributes === undefined) {\n            return [];\n        }\n        const instantiationContext = { env };\n        return style._dynamicTechniqueAttributes.map(([attrName, attrExpr]) => {\n            try {\n                if (attrExpr.isDynamic()) {\n                    const reducedExpr = attrExpr.instantiate(instantiationContext);\n                    return [attrName, reducedExpr];\n                }\n                const evaluatedValue = attrExpr.evaluate(env, Expr_1.ExprScope.Value, this.m_cachedResults);\n                return [attrName, evaluatedValue];\n            }\n            catch (error) {\n                logger.error(`failed to evaluate expression '${attrExpr.toJSON()}': ${error}`);\n                return [attrName, null];\n            }\n        });\n    }\n    createTechnique(style, key, dynamicAttrs) {\n        const technique = {};\n        technique.name = style.technique;\n        if (style._staticAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._staticAttributes) {\n                if (attrValue !== null) {\n                    technique[attrName] = attrValue;\n                }\n            }\n        }\n        for (const [attrName, attrValue] of dynamicAttrs) {\n            if (attrValue !== null) {\n                technique[attrName] = attrValue;\n            }\n        }\n        if (style._dynamicFeatureAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicFeatureAttributes) {\n                technique[attrName] = attrValue;\n            }\n        }\n        if (style._dynamicForwardedAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicForwardedAttributes) {\n                // tslint:disable-next-line: prefer-conditional-expression\n                if (Expr_1.Expr.isExpr(attrValue)) {\n                    technique[attrName] = attrValue.toJSON();\n                }\n                else {\n                    technique[attrName] = attrValue;\n                }\n            }\n        }\n        technique._index = this.m_techniques.length;\n        technique._styleSetIndex = style._styleSetIndex;\n        technique._key = key;\n        this.m_techniques.push(technique);\n        return technique;\n    }\n}\nexports.StyleSetEvaluator = StyleSetEvaluator;\nfunction computeDefaultRenderOrder(styleSet) {\n    let techniqueRenderOrder = 0;\n    let styleSetIndex = 0;\n    for (const style of styleSet) {\n        style._styleSetIndex = styleSetIndex++;\n        if (style.technique !== undefined && style.renderOrder === undefined) {\n            style.renderOrder = techniqueRenderOrder++;\n        }\n    }\n}\nfunction resolveReferences(styleSet, definitions) {\n    return styleSet.map(style => resolveStyleReferences(style, definitions));\n}\nfunction resolveStyleReferences(style, definitions) {\n    if (Expr_1.isJsonExpr(style)) {\n        if (!Theme_1.isJsonExprReference(style)) {\n            throw new Error(\"invalid expression in this context, only 'ref's are supported\");\n        }\n        // expand and instantiate references to style definitions.\n        const definitionName = style[1];\n        const def = definitions && definitions[definitionName];\n        if (!def) {\n            throw new Error(`invalid reference '${definitionName}' - not found`);\n        }\n        if (!Theme_1.isActualSelectorDefinition(def)) {\n            throw new Error(`invalid reference '${definitionName}' - expected style definition`);\n        }\n        // instantiate the style\n        return resolveStyleReferences(def, definitions);\n    }\n    return Object.assign({}, style);\n}\n/**\n * Create transferable representation of dynamic technique.\n *\n * As for now, we remove all `Expr` as they are not supported on other side.\n */\nfunction makeDecodedTechnique(technique) {\n    const result = {};\n    for (const attrName in technique) {\n        if (!technique.hasOwnProperty(attrName)) {\n            continue;\n        }\n        let attrValue = technique[attrName];\n        if (Expr_1.Expr.isExpr(attrValue)) {\n            attrValue = attrValue.toJSON();\n        }\n        result[attrName] = attrValue;\n    }\n    return result;\n}\nexports.makeDecodedTechnique = makeDecodedTechnique;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/StyleSetEvaluator.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/TechniqueAttr.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/TechniqueAttr.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst Expr_1 = __webpack_require__(/*! ./Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\nconst InterpolatedProperty_1 = __webpack_require__(/*! ./InterpolatedProperty */ \"./node_modules/@here/harp-datasource-protocol/lib/InterpolatedProperty.js\");\nconst logger = harp_utils_1.LoggerManager.instance.create(\"TechniqueAttr\");\nfunction evaluateTechniqueAttr(context, attrValue, defaultValue) {\n    const env = context instanceof Expr_1.Env ? context : context.env;\n    let evaluated;\n    if (Expr_1.Expr.isExpr(attrValue)) {\n        try {\n            evaluated = attrValue.evaluate(env, Expr_1.ExprScope.Dynamic, !(context instanceof Expr_1.Env) ? context.cachedExprResults : undefined);\n        }\n        catch (error) {\n            logger.error(`failed to evaluate expression '${JSON.stringify(attrValue)}': ${error}`);\n            evaluated = undefined;\n        }\n    }\n    else if (InterpolatedProperty_1.isInterpolatedProperty(attrValue)) {\n        const storageLevel = context instanceof Expr_1.Env ? context.lookup(\"$zoom\") : context.zoomLevel;\n        evaluated = InterpolatedProperty_1.getPropertyValue(attrValue, storageLevel);\n    }\n    else {\n        evaluated = attrValue;\n    }\n    if (evaluated === undefined || evaluated === null) {\n        return defaultValue;\n    }\n    else {\n        return evaluated;\n    }\n}\nexports.evaluateTechniqueAttr = evaluateTechniqueAttr;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/TechniqueAttr.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/TechniqueDescriptor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/TechniqueDescriptor.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AttrScope;\n(function (AttrScope) {\n    /**\n     * Attributes that affect generation of feature geometry and thus must be resolved at decoding\n     * time.\n     *\n     * They may have huge variancy as they are implemented as vertex attributes or embedded in\n     * generated meshes.\n     *\n     * These attributes are available only in decoding scope.\n     */\n    AttrScope[AttrScope[\"FeatureGeometry\"] = 0] = \"FeatureGeometry\";\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * These attributes affect generated geometry and  thus must be resolved at decoding time.\n     *\n     * They shouldn't have big variancy and evaluate to at least dozens of values as each\n     * combination of these attributes consitute new technique and material.\n     *\n     * These attributes are available in decoding and rendering scope.\n     */\n    AttrScope[AttrScope[\"TechniqueGeometry\"] = 1] = \"TechniqueGeometry\";\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * Attributes that can be changed in resulting object/material from frame to frame. They are\n     * usually implemented as uniforms.\n     *\n     * These attributes may be available only at rendering scope.\n     */\n    AttrScope[AttrScope[\"TechniqueRendering\"] = 2] = \"TechniqueRendering\";\n})(AttrScope = exports.AttrScope || (exports.AttrScope = {}));\nfunction mergeTechniqueDescriptor(...descriptors) {\n    const result = {\n        attrScopes: {}\n    };\n    for (const descriptor of descriptors) {\n        if (descriptor.attrTransparencyColor !== undefined) {\n            result.attrTransparencyColor = descriptor.attrTransparencyColor;\n        }\n        if (descriptor.attrScopes !== undefined) {\n            result.attrScopes = Object.assign(Object.assign({}, result.attrScopes), descriptor.attrScopes);\n        }\n    }\n    return result;\n}\nexports.mergeTechniqueDescriptor = mergeTechniqueDescriptor;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/TechniqueDescriptor.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/TechniqueParams.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/TechniqueParams.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The kind of geometry is used to\n *\n * a) Group objects together, allowing the group to be hidden or displayed.\n *\n * b) Assigning the objects a loading phase. If a [[PhasedTileGeometryManager]] is used, techniques\n *      without a `GeometryKind` may not be processed (at the desired phase).\n *\n * Any string can be used to specify the kind of the technique in a style in the theme file. Is is\n * suggested to specify multiple kinds for specific types of data. For a highway, the following list\n * of kinds is suggested:\n *\n *    [\"line\", \"road\", \"road:highway\"]\n *\n * If it is a tunnel for a highway:\n *\n *    [\"line\", \"road\", \"road:highway\", \"tunnel\", \"road:tunnel\", \"road:highway:tunnel\"]\n *\n * If specified in this way, specific types of data (here: highway roads) can be enabled and/or\n * disabled.\n */\nvar GeometryKind;\n(function (GeometryKind) {\n    /**\n     * Used in the enabledKinds/disabledKinds filter to match any kind.\n     */\n    GeometryKind[\"All\"] = \"_all_\";\n    /**\n     * Background geometry.\n     */\n    GeometryKind[\"Background\"] = \"background\";\n    /**\n     * Terrain geometry.\n     */\n    GeometryKind[\"Terrain\"] = \"terrain\";\n    /**\n     * Default value for the FillTechnique.\n     */\n    GeometryKind[\"Area\"] = \"area\";\n    /**\n     * Default value for all line techniques.\n     */\n    GeometryKind[\"Line\"] = \"line\";\n    /**\n     * Default value for the FillTechnique.\n     */\n    GeometryKind[\"Water\"] = \"water\";\n    /**\n     * Political borders.\n     */\n    GeometryKind[\"Border\"] = \"border\";\n    /**\n     * Basis for all roads.\n     */\n    GeometryKind[\"Road\"] = \"road\";\n    /**\n     * Default value for the ExtrudedPolygonTechnique.\n     */\n    GeometryKind[\"Building\"] = \"building\";\n    /**\n     * Default value for the TextTechnique, LineMarkerTechnique and the PoiTechnique.\n     */\n    GeometryKind[\"Label\"] = \"label\";\n    /**\n     * Anything that may show up last.\n     */\n    GeometryKind[\"Detail\"] = \"detail\";\n})(GeometryKind = exports.GeometryKind || (exports.GeometryKind = {}));\n/**\n * A set of [[GeometryKind]]s.\n */\nclass GeometryKindSet extends Set {\n    /**\n     * Return `true` if the Set is a superset of the set 'subset'.\n     */\n    isSuperset(subset) {\n        for (const elem of subset) {\n            if (!this.has(elem)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Return `true` if the Set intersects Set 'set'.\n     */\n    hasIntersection(set) {\n        for (const elem of set) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Return `true` if the Set either intersects Set 'set' (if set is a Set), of has element 'set'\n     * if set is not a Set.\n     */\n    hasOrIntersects(set) {\n        if (set instanceof Set) {\n            return this.hasIntersection(set);\n        }\n        return this.has(set);\n    }\n    /**\n     * Return `true` if this set and the array of elements share at least a single element.\n     */\n    hasOrIntersectsArray(subset) {\n        for (const elem of subset) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nexports.GeometryKindSet = GeometryKindSet;\nvar TextureCoordinateType;\n(function (TextureCoordinateType) {\n    /**\n     * Texture coordinates are in tile space.\n     * SW of the tile will have (0,0) and NE will have (1,1).\n     */\n    TextureCoordinateType[\"TileSpace\"] = \"tile-space\";\n    /**\n     * Texture coordinates are in equirectangular space.\n     * (u, v) = ( (longitude+180) / 360, (latitude+90) / 180).\n     */\n    TextureCoordinateType[\"EquirectangularSpace\"] = \"equirectangular-space\";\n})(TextureCoordinateType = exports.TextureCoordinateType || (exports.TextureCoordinateType = {}));\n/**\n * Define the stacking option. Enum values for theme file are in \"kebab-case\".\n */\nvar PoiStackMode;\n(function (PoiStackMode) {\n    /**\n     * Show in a stack.\n     */\n    PoiStackMode[\"Show\"] = \"show-in-stack\";\n    /**\n     * Do not show in a stack.\n     */\n    PoiStackMode[\"Hide\"] = \"hide-in-stack\";\n    /**\n     * Show category parent in the stack.\n     */\n    PoiStackMode[\"ShowParent\"] = \"show-parent\";\n})(PoiStackMode = exports.PoiStackMode || (exports.PoiStackMode = {}));\n/**\n * Type guard to check if an object is an instance of `TextureBuffer`.\n */\nfunction isTextureBuffer(object) {\n    return object && object.buffer && typeof object.type === \"string\";\n}\nexports.isTextureBuffer = isTextureBuffer;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/TechniqueParams.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/Techniques.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/Techniques.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst TechniqueParams_1 = __webpack_require__(/*! ./TechniqueParams */ \"./node_modules/@here/harp-datasource-protocol/lib/TechniqueParams.js\");\nconst TechniqueDescriptor_1 = __webpack_require__(/*! ./TechniqueDescriptor */ \"./node_modules/@here/harp-datasource-protocol/lib/TechniqueDescriptor.js\");\n/**\n * Names of the supported texture properties.\n */\nexports.TEXTURE_PROPERTY_KEYS = [\n    \"map\",\n    \"normalMap\",\n    \"displacementMap\",\n    \"roughnessMap\",\n    \"emissiveMap\",\n    \"alphaMap\",\n    \"metalnessMap\",\n    \"bumpMap\"\n];\n/**\n * Names of the properties controlling transparency.\n */\nexports.TRANSPARENCY_PROPERTY_KEYS = [\"opacity\", \"transparent\"];\nexports.techniqueDescriptors = {};\nexports.baseTechniqueParamsDescriptor = {\n    // TODO: Choose which techniques should support color with transparency.\n    // For now we chosen all, but it maybe not suitable for text or line marker techniques.\n    attrTransparencyColor: \"color\",\n    attrScopes: {\n        renderOrder: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        renderOrderOffset: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        enabled: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        kind: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        transient: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        fadeFar: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        fadeNear: TechniqueDescriptor_1.AttrScope.TechniqueRendering\n    }\n};\nexports.pointTechniquePropTypes = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, {\n    attrScopes: {\n        texture: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        enablePicking: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        color: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        transparent: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        opacity: TechniqueDescriptor_1.AttrScope.TechniqueGeometry\n    }\n});\nexports.squaresTechniquePropTypes = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, exports.pointTechniquePropTypes);\nexports.techniqueDescriptors.squares = exports.squaresTechniquePropTypes;\nexports.circlesTechniquePropTypes = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, exports.pointTechniquePropTypes);\nexports.techniqueDescriptors.circles = exports.circlesTechniquePropTypes;\nconst lineMarkerTechniquePropTypes = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, {\n    attrScopes: {\n        text: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        label: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        useAbbreviation: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        useIsoCode: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        priority: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        textMinZoomLevel: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        textMaxZoomLevel: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        iconMinZoomLevel: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        iconMaxZoomLevel: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        distanceScale: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        textMayOverlap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        iconMayOverlap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        textReserveSpace: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        iconReserveSpace: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        renderTextDuringMovements: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        alwaysOnTop: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        textIsOptional: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        showOnMap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        stackMode: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        minDistance: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        iconIsOptional: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        iconFadeTime: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        textFadeTime: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        xOffset: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        yOffset: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        iconXOffset: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        iconYOffset: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        iconScale: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        screenHeight: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        screenWidth: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        poiTable: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        poiName: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        poiNameField: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        imageTexture: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        imageTextureField: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        imageTexturePrefix: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        imageTexturePostfix: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        style: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        fontName: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        fontStyle: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        fontVariant: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        rotation: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        tracking: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        leading: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        maxLines: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        lineWidth: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        canvasRotation: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        lineRotation: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        wrappingMode: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        hAlignment: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        vAlignment: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        backgroundColor: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        backgroundSize: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        backgroundOpacity: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        color: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        opacity: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        size: TechniqueDescriptor_1.AttrScope.TechniqueRendering\n    }\n});\nexports.techniqueDescriptors[\"line-marker\"] = lineMarkerTechniquePropTypes;\nexports.techniqueDescriptors[\"labeled-icon\"] = lineMarkerTechniquePropTypes;\nconst polygonalTechniqueDescriptor = {\n    attrScopes: {\n        polygonOffset: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        polygonOffsetFactor: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        polygonOffsetUnits: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        lineColor: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        lineFadeFar: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        lineFadeNear: TechniqueDescriptor_1.AttrScope.TechniqueRendering\n    }\n};\nexports.solidLineTechniqueDescriptor = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, polygonalTechniqueDescriptor, {\n    attrScopes: {\n        clipping: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        secondaryRenderOrder: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        color: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        opacity: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        transparent: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        lineWidth: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        secondaryWidth: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        secondaryColor: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        dashSize: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        gapSize: TechniqueDescriptor_1.AttrScope.TechniqueRendering\n    }\n});\nexports.techniqueDescriptors[\"solid-line\"] = exports.solidLineTechniqueDescriptor;\n// TODO: Remove deprecated \"dashed-line\" support in future releases.\nexports.techniqueDescriptors[\"dashed-line\"] = exports.solidLineTechniqueDescriptor;\nexports.lineTechniqueDescriptor = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, {\n    attrScopes: {\n        // TODO, check, which are really dynamic !\n        color: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        opacity: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        transparent: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        lineWidth: TechniqueDescriptor_1.AttrScope.FeatureGeometry\n    }\n});\nexports.techniqueDescriptors.line = exports.lineTechniqueDescriptor;\nconst fillTechniqueDescriptor = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, polygonalTechniqueDescriptor, {\n    attrScopes: {\n        color: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        opacity: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        transparent: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        lineWidth: TechniqueDescriptor_1.AttrScope.TechniqueRendering\n    }\n});\nexports.techniqueDescriptors.fill = fillTechniqueDescriptor;\nconst standardTechniqueDescriptor = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, {\n    attrScopes: {\n        color: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        vertexColors: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        wireframe: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        roughness: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        metalness: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        alphaTest: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        depthTest: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        transparent: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        opacity: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        emissive: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        emissiveIntensity: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        refractionRatio: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        map: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        mapProperties: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        normalMap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        normalMapProperties: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        displacementMap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        displacementMapProperties: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        roughnessMap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        roughnessMapProperties: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        emissiveMap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        emissiveMapProperties: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        bumpMap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        bumpMapProperties: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        metalnessMap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        metalnessMapProperties: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        alphaMap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        alphaMapProperties: TechniqueDescriptor_1.AttrScope.TechniqueGeometry\n    }\n});\nexports.techniqueDescriptors.standard = standardTechniqueDescriptor;\nconst extrudedPolygonTechniqueDescriptor = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, standardTechniqueDescriptor, {\n    attrScopes: {\n        height: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        floorHeight: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        color: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        defaultColor: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        defaultHeight: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        constantHeight: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        boundaryWalls: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        footprint: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        maxSlope: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        enableDepthPrePass: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        animateExtrusionDuration: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        animateExtrusion: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        opacity: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        transparent: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        lineWidth: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        lineFadeNear: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        lineFadeFar: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        lineColorMix: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        lineColor: TechniqueDescriptor_1.AttrScope.TechniqueRendering\n    }\n});\nexports.techniqueDescriptors[\"extruded-polygon\"] = extrudedPolygonTechniqueDescriptor;\nconst textTechniqueDescriptor = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, {\n    attrScopes: {\n        text: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        label: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        useAbbreviation: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        useIsoCode: TechniqueDescriptor_1.AttrScope.FeatureGeometry,\n        minZoomLevel: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        maxZoomLevel: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        distanceScale: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        mayOverlap: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        reserveSpace: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        textFadeTime: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        xOffset: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        yOffset: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        style: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        fontName: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        fontStyle: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        fontVariant: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        rotation: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        tracking: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        leading: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        maxLines: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        lineWidth: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        canvasRotation: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        lineRotation: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        wrappingMode: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        hAlignment: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        vAlignment: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        backgroundColor: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        backgroundSize: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        backgroundOpacity: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        color: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        opacity: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        priority: TechniqueDescriptor_1.AttrScope.TechniqueRendering,\n        size: TechniqueDescriptor_1.AttrScope.TechniqueRendering\n    }\n});\nexports.techniqueDescriptors.text = textTechniqueDescriptor;\nconst shaderTechniqueDescriptor = TechniqueDescriptor_1.mergeTechniqueDescriptor(exports.baseTechniqueParamsDescriptor, {\n    attrScopes: {\n        primitive: TechniqueDescriptor_1.AttrScope.TechniqueGeometry,\n        params: TechniqueDescriptor_1.AttrScope.TechniqueRendering\n    }\n});\nexports.techniqueDescriptors.shader = shaderTechniqueDescriptor;\n/**\n * Type guard to check if an object is an instance of [[CirclesTechnique]].\n */\nfunction isCirclesTechnique(technique) {\n    return technique.name === \"circles\";\n}\nexports.isCirclesTechnique = isCirclesTechnique;\n/**\n * Type guard to check if an object is an instance of [[SquaresTechnique]].\n */\nfunction isSquaresTechnique(technique) {\n    return technique.name === \"squares\";\n}\nexports.isSquaresTechnique = isSquaresTechnique;\n/**\n * Type guard to check if an object is an instance of [[PoiTechnique]].\n */\nfunction isPoiTechnique(technique) {\n    return technique.name === \"labeled-icon\";\n}\nexports.isPoiTechnique = isPoiTechnique;\n/**\n * Type guard to check if an object is an instance of [[LineMarkerTechnique]].\n */\nfunction isLineMarkerTechnique(technique) {\n    return technique.name === \"line-marker\";\n}\nexports.isLineMarkerTechnique = isLineMarkerTechnique;\n/**\n * Type guard to check if an object is an instance of [[LineTechnique]].\n */\nfunction isLineTechnique(technique) {\n    return technique.name === \"line\";\n}\nexports.isLineTechnique = isLineTechnique;\n/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]].\n */\nfunction isSolidLineTechnique(technique) {\n    return technique.name === \"solid-line\" || technique.name === \"dashed-line\";\n}\nexports.isSolidLineTechnique = isSolidLineTechnique;\n/**\n * Type guard to check if an object is an instance of [[SegmentsTechnique]].\n */\nfunction isSegmentsTechnique(technique) {\n    return technique.name === \"segments\";\n}\nexports.isSegmentsTechnique = isSegmentsTechnique;\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]]\n * or [[StandardExtrudedLineTechnique]].\n */\nfunction isExtrudedLineTechnique(technique) {\n    return technique.name === \"extruded-line\";\n}\nexports.isExtrudedLineTechnique = isExtrudedLineTechnique;\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]].\n */\nfunction isBasicExtrudedLineTechnique(technique) {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"basic\";\n}\nexports.isBasicExtrudedLineTechnique = isBasicExtrudedLineTechnique;\n/**\n * Type guard to check if an object is an instance of [[StandardExtrudedLineTechnique]].\n */\nfunction isStandardExtrudedLineTechnique(technique) {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"standard\";\n}\nexports.isStandardExtrudedLineTechnique = isStandardExtrudedLineTechnique;\n/**\n * Type guard to check if an object is an instance of [[FillTechnique]].\n */\nfunction isFillTechnique(technique) {\n    return technique.name === \"fill\";\n}\nexports.isFillTechnique = isFillTechnique;\n/**\n * Type guard to check if an object is an instance of [[ExtrudedPolygonTechnique]].\n */\nfunction isExtrudedPolygonTechnique(technique) {\n    return technique.name === \"extruded-polygon\";\n}\nexports.isExtrudedPolygonTechnique = isExtrudedPolygonTechnique;\n/**\n * Type guard to check if an object is an instance of [[StandardTechnique]].\n */\nfunction isStandardTechnique(technique) {\n    return technique.name === \"standard\";\n}\nexports.isStandardTechnique = isStandardTechnique;\n/**\n * Type guard to check if an object is an instance of [[TerrainTechnique]].\n */\nfunction isTerrainTechnique(technique) {\n    return technique.name === \"terrain\";\n}\nexports.isTerrainTechnique = isTerrainTechnique;\n/**\n * Type guard to check if an object is an instance of [[TextTechnique]].\n */\nfunction isTextTechnique(technique) {\n    return technique.name === \"text\";\n}\nexports.isTextTechnique = isTextTechnique;\n/**\n * Type guard to check if an object is an instance of [[ShaderTechnique]].\n */\nfunction isShaderTechnique(technique) {\n    return technique.name === \"shader\";\n}\nexports.isShaderTechnique = isShaderTechnique;\nfunction isLabelRejectionLineTechnique(technique) {\n    return technique.name === \"label-rejection-line\";\n}\nexports.isLabelRejectionLineTechnique = isLabelRejectionLineTechnique;\n/**\n * Check if vertex normals should be generated for this technique (if no normals are in the data).\n * @param technique Technique to check.\n */\nfunction needsVertexNormals(technique) {\n    return (isFillTechnique(technique) ||\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isStandardExtrudedLineTechnique(technique));\n}\nexports.needsVertexNormals = needsVertexNormals;\n/**\n * Get the texture coordinate type if the technique supports it.\n */\nfunction textureCoordinateType(technique) {\n    if (isStandardTechnique(technique)) {\n        return technique.textureCoordinateType;\n    }\n    else if (isExtrudedPolygonTechnique(technique)) {\n        return technique.textureCoordinateType;\n    }\n    else if (isTerrainTechnique(technique)) {\n        return technique.textureCoordinateType;\n    }\n    else {\n        return undefined;\n    }\n}\nexports.textureCoordinateType = textureCoordinateType;\n/**\n * Add all the buffers of the technique to the transfer list.\n */\nfunction addBuffersToTransferList(technique, transferList) {\n    if (isStandardTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique) ||\n        isTerrainTechnique(technique)) {\n        for (const texturePropertyKey of exports.TEXTURE_PROPERTY_KEYS) {\n            const textureProperty = technique[texturePropertyKey];\n            if (TechniqueParams_1.isTextureBuffer(textureProperty)) {\n                if (textureProperty.buffer instanceof ArrayBuffer) {\n                    transferList.push(textureProperty.buffer);\n                }\n            }\n        }\n    }\n}\nexports.addBuffersToTransferList = addBuffersToTransferList;\n/**\n * Compose full texture name for given image name with technique specified.\n * Some techniques allows to add prefix/postfix to icons names specified, this\n * function uses technique information to create fully qualified texture name.\n * @param imageName base name of the marker icon.\n * @param technique the technique describing POI or line marker.\n * @returns fully qualified texture name for loading from atlas (without extension).\n */\nfunction composeTechniqueTextureName(imageName, technique) {\n    let textureName = imageName;\n    if (typeof technique.imageTexturePrefix === \"string\") {\n        textureName = technique.imageTexturePrefix + textureName;\n    }\n    if (typeof technique.imageTexturePostfix === \"string\") {\n        textureName = textureName + technique.imageTexturePostfix;\n    }\n    return textureName;\n}\nexports.composeTechniqueTextureName = composeTechniqueTextureName;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/Techniques.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/Theme.js":
/*!******************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/Theme.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Expr_1 = __webpack_require__(/*! ./Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\nconst InterpolatedProperty_1 = __webpack_require__(/*! ./InterpolatedProperty */ \"./node_modules/@here/harp-datasource-protocol/lib/InterpolatedProperty.js\");\n/**\n * Checks if the given definition implements the [[BoxedDefinition]] interface.\n */\nfunction isBoxedDefinition(def) {\n    const bdef = def;\n    return (typeof bdef === \"object\" &&\n        bdef !== null &&\n        (typeof bdef.type === \"string\" || typeof bdef.type === \"undefined\") &&\n        (typeof bdef.value === \"string\" ||\n            typeof bdef.value === \"number\" ||\n            typeof bdef.value === \"boolean\" ||\n            InterpolatedProperty_1.isInterpolatedPropertyDefinition(bdef.value) ||\n            Expr_1.isJsonExpr(bdef.value)));\n}\nexports.isBoxedDefinition = isBoxedDefinition;\nfunction isLiteralDefinition(def) {\n    return typeof def === \"string\" || typeof def === \"number\" || typeof def === \"boolean\";\n}\nexports.isLiteralDefinition = isLiteralDefinition;\n/**\n * Checks if the given value is a reference to a definition.\n *\n * @param value The value of a technique property.\n */\nfunction isJsonExprReference(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        value[0] === \"ref\" &&\n        typeof value[1] === \"string\");\n}\nexports.isJsonExprReference = isJsonExprReference;\nfunction isActualSelectorDefinition(def) {\n    const styleDef = def;\n    return (typeof styleDef === \"object\" &&\n        styleDef !== null &&\n        !Array.isArray(styleDef) &&\n        typeof styleDef.technique === \"string\");\n}\nexports.isActualSelectorDefinition = isActualSelectorDefinition;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/Theme.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/ThemeVisitor.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/ThemeVisitor.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Expr_1 = __webpack_require__(/*! ./Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\n/**\n * The ThemeVisitor visits every style in the theme in a depth-first fashion.\n */\nclass ThemeVisitor {\n    constructor(theme) {\n        this.theme = theme;\n    }\n    /**\n     * Applies a function to every style in the theme.\n     *\n     * @param visitFunc Function to be called with `style` as an argument. Function should return\n     *                  `true` to cancel visitation.\n     * @returns `true` if function has finished prematurely.\n     */\n    visitStyles(visitFunc) {\n        const visit = (style) => {\n            if (Expr_1.isJsonExpr(style)) {\n                return false;\n            }\n            if (visitFunc(style)) {\n                return true;\n            }\n            return false;\n        };\n        if (this.theme.styles !== undefined) {\n            for (const styleSetName in this.theme.styles) {\n                if (this.theme.styles[styleSetName] !== undefined) {\n                    for (const style of this.theme.styles[styleSetName]) {\n                        if (visit(style)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nexports.ThemeVisitor = ThemeVisitor;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/ThemeVisitor.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/ThreeBufferUtils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/ThreeBufferUtils.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DecodedTile_1 = __webpack_require__(/*! ./DecodedTile */ \"./node_modules/@here/harp-datasource-protocol/lib/DecodedTile.js\");\n/**\n * Collection of helper methods to convert\n * {@link https://threejs.org/docs/index.html#api/en/core/BufferGeometry|three.js BufferGeometry}\n * to [[Geometry]] that allows creation and transfering of THREE BufferGeometry in webworkers.\n * See also [[CustomDatasourceExample]].\n */\nvar ThreeBufferUtils;\n(function (ThreeBufferUtils) {\n    function getBufferElementType(buffer) {\n        if (buffer instanceof Int8Array) {\n            return \"int8\";\n        }\n        else if (buffer instanceof Uint8Array) {\n            return \"uint8\";\n        }\n        else if (buffer instanceof Int16Array) {\n            return \"int16\";\n        }\n        else if (buffer instanceof Uint16Array) {\n            return \"uint16\";\n        }\n        else if (buffer instanceof Int32Array) {\n            return \"int32\";\n        }\n        else if (buffer instanceof Uint32Array) {\n            return \"uint32\";\n        }\n        else if (buffer instanceof Float32Array) {\n            return \"float\";\n        }\n        throw new Error(`Unsupported buffer type ${name}`);\n    }\n    ThreeBufferUtils.getBufferElementType = getBufferElementType;\n    function fromThreeBufferAttribute(bufferAttribute) {\n        const buffer = bufferAttribute.array;\n        return {\n            name: bufferAttribute.name,\n            buffer: buffer.buffer,\n            type: getBufferElementType(buffer),\n            itemCount: bufferAttribute.itemSize,\n            normalized: bufferAttribute.normalized\n        };\n    }\n    ThreeBufferUtils.fromThreeBufferAttribute = fromThreeBufferAttribute;\n    function fromThreeInterleavedBufferAttribute(bufferAttribute) {\n        throw new Error(\"Not implemented yet\");\n    }\n    ThreeBufferUtils.fromThreeInterleavedBufferAttribute = fromThreeInterleavedBufferAttribute;\n    function fromThreeBufferGeometry(bufferGeometry, techniqueIndex) {\n        const vertexAttributes = [];\n        const attributeNames = Object.getOwnPropertyNames(bufferGeometry.attributes);\n        for (const name of attributeNames) {\n            const attribute = bufferGeometry.attributes[name];\n            // FIXME: Also support InterleavedBufferAttribute\n            const vertexAttribute = fromThreeBufferAttribute(attribute);\n            vertexAttribute.name = name;\n            vertexAttributes.push(vertexAttribute);\n        }\n        const index = bufferGeometry.index !== null\n            ? fromThreeBufferAttribute(bufferGeometry.index)\n            : undefined;\n        let count = 0;\n        if (index !== undefined) {\n            count = bufferGeometry.index === null ? 0 : bufferGeometry.index.count;\n        }\n        else {\n            // If there is no index buffer, try to deduce the count from the position attribute.\n            const posAttr = bufferGeometry.attributes.position;\n            if (posAttr === undefined) {\n                throw new Error(\"Missing position attibute to deduce item count\");\n            }\n            count = posAttr.count;\n        }\n        return {\n            type: DecodedTile_1.GeometryType.Unspecified,\n            vertexAttributes,\n            index,\n            groups: [{ start: 0, count, technique: techniqueIndex }]\n        };\n    }\n    ThreeBufferUtils.fromThreeBufferGeometry = fromThreeBufferGeometry;\n})(ThreeBufferUtils = exports.ThreeBufferUtils || (exports.ThreeBufferUtils = {}));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/ThreeBufferUtils.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/TileInfo.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/TileInfo.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst Expr_1 = __webpack_require__(/*! ./Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\nconst StyleSetEvaluator_1 = __webpack_require__(/*! ./StyleSetEvaluator */ \"./node_modules/@here/harp-datasource-protocol/lib/StyleSetEvaluator.js\");\nconst TechniqueAttr_1 = __webpack_require__(/*! ./TechniqueAttr */ \"./node_modules/@here/harp-datasource-protocol/lib/TechniqueAttr.js\");\nconst Techniques_1 = __webpack_require__(/*! ./Techniques */ \"./node_modules/@here/harp-datasource-protocol/lib/Techniques.js\");\n/**\n * Represents a feature group type for tile info.\n */\nvar FeatureGroupType;\n(function (FeatureGroupType) {\n    FeatureGroupType[FeatureGroupType[\"Point\"] = 0] = \"Point\";\n    FeatureGroupType[FeatureGroupType[\"Line\"] = 1] = \"Line\";\n    FeatureGroupType[FeatureGroupType[\"Polygon\"] = 2] = \"Polygon\";\n})(FeatureGroupType = exports.FeatureGroupType || (exports.FeatureGroupType = {}));\n/**\n * Minimum estimated size of a JS object.\n */\nconst MINIMUM_OBJECT_SIZE_ESTIMATION = 100;\n/**\n * Structure of arrays containing data for all features of this group. No methods, since the object\n * is being passed as part of ExtendedTileInfo across \"process boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n */\nclass FeatureGroup {\n    /**\n     * Construct featureGroup.\n     *\n     * @param storeExtendedTags Pass `true` to create fields for more OMV tags (`layer`, `class`\n     * and `type`).\n     */\n    constructor(storeExtendedTags, startSize = 5000) {\n        /** featureIds */\n        this.featureIds = new Array();\n        /** number of features */\n        this.numFeatures = 0;\n        /** number of positions of elements (2 per point) */\n        this.numPositions = 0;\n        this.featureIds = new Array(startSize);\n        this.featureIds.length = startSize;\n        this.techniqueIndex = new Array(startSize);\n        this.techniqueIndex.length = startSize;\n        this.textIndex = new Array(startSize);\n        this.textIndex.length = startSize;\n        this.positionIndex = new Array(startSize);\n        this.positionIndex.length = startSize;\n        this.positions = new Array(10 * startSize);\n        this.positions.length = 10 * startSize;\n        if (storeExtendedTags) {\n            this.layerIndex = new Array(startSize);\n            this.layerIndex.length = startSize;\n            this.classIndex = new Array(startSize);\n            this.classIndex.length = startSize;\n            this.typeIndex = new Array(startSize);\n            this.typeIndex.length = startSize;\n        }\n    }\n    /**\n     * Compute size in bytes.\n     */\n    getNumBytes() {\n        return ((this.featureIds.length +\n            this.techniqueIndex.length +\n            this.textIndex.length +\n            this.positionIndex.length +\n            this.positions.length +\n            (this.layerIndex !== undefined ? this.layerIndex.length : 0) +\n            (this.classIndex !== undefined ? this.classIndex.length : 0) +\n            (this.typeIndex !== undefined ? this.typeIndex.length : 0)) *\n            8);\n    }\n}\nexports.FeatureGroup = FeatureGroup;\n/**\n * Structure of arrays containing data for roads. No methods, since the object is being passed as\n * part of [[ExtendedTileInfo]] across \"process boundaries\" to the web worker.\n */\nclass LineFeatureGroup extends FeatureGroup {\n    constructor() {\n        super(...arguments);\n        /**\n         * An array of object defined by the user. Certain elements may be `undefined` (if this line\n         * feature is not a road, or if the object for that feature is undefined).\n         */\n        this.userData = [];\n    }\n    /** @override */\n    getNumBytes() {\n        return (super.getNumBytes() +\n            ((this.segmentIds !== undefined ? this.segmentIds.length : 0) +\n                (this.segmentStartOffsets !== undefined ? this.segmentStartOffsets.length : 0) +\n                (this.segmentEndOffsets !== undefined ? this.segmentEndOffsets.length : 0)) *\n                8);\n    }\n}\nexports.LineFeatureGroup = LineFeatureGroup;\n/**\n * Structure of arrays containing data for polygons. No methods, since the object is being passed as\n * part of ExtendedTileInfo across \"process boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n *\n * Due to the complexity of the access, there are supporting classes to store and access data in\n * the feature groups. See [[ExtendedTileInfoWriter]] and [[ExtendedTileInfoPolygonAccessor]].\n */\nclass PolygonFeatureGroup extends FeatureGroup {\n    constructor(storeExtendedTags, startSize = 5000) {\n        super(storeExtendedTags, startSize);\n        /**\n         * Number of rings stored in all polygons in tis group. Used to keep size of the\n         * arrays.\n         */\n        this.groupNumRings = 0;\n        this.outerRingStartIndex = new Array(startSize);\n        this.outerRingStartIndex.length = startSize;\n        this.innerRingIsOuterContour = new Array(startSize);\n        this.innerRingIsOuterContour.length = startSize;\n        this.innerRingStartIndex = new Array(startSize);\n        this.innerRingStartIndex.length = startSize;\n    }\n    /** @override */\n    getNumBytes() {\n        return (super.getNumBytes() +\n            ((this.outerRingStartIndex !== undefined ? this.outerRingStartIndex.length : 0) +\n                (this.innerRingIsOuterContour !== undefined\n                    ? this.innerRingIsOuterContour.length\n                    : 0) +\n                (this.innerRingStartIndex !== undefined ? this.innerRingStartIndex.length : 0)) *\n                8);\n    }\n}\nexports.PolygonFeatureGroup = PolygonFeatureGroup;\n/**\n * Class to hold infos from [[OmvTile]]s. Optimized for fast serialization when being passed from\n * webworker to main thread. No methods, since the object is being passed across \"process\n * boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n *\n * Due to the complexity of the access, there are supporting classes to store and access data in\n * the feature groups. See [[ExtendedTileInfoWriter]] and [[ExtendedTileInfoPolygonAccessor]].\n */\nclass ExtendedTileInfo {\n    constructor(tileKey, storeExtendedTags) {\n        this.tileKey = tileKey;\n        /**\n         * Catalog of strings. Addressed by every features stringIndex.\n         */\n        this.textCatalog = new Array();\n        /**\n         * Catalog of techniques. Addressed by every features featureIndex.\n         */\n        this.techniqueCatalog = new Array();\n        /**\n         * Used for performance diagnostics.\n         */\n        this.setupTime = 0;\n        /**\n         * Size in bytes.\n         */\n        this.numBytes = 0;\n        this.pointGroup = new FeatureGroup(storeExtendedTags);\n        this.lineGroup = new LineFeatureGroup(storeExtendedTags);\n        this.polygonGroup = new PolygonFeatureGroup(storeExtendedTags);\n        if (storeExtendedTags) {\n            this.layerCatalog = new Array();\n            this.classCatalog = new Array();\n            this.typeCatalog = new Array();\n        }\n    }\n    /**\n     * Compute the memory footprint caused by objects owned by the `ExtendedTileInfo`.\n     */\n    getNumBytes() {\n        let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n        for (const str of this.textCatalog) {\n            numBytes += 2 * str.length;\n        }\n        numBytes += this.techniqueCatalog.length * MINIMUM_OBJECT_SIZE_ESTIMATION;\n        numBytes += this.pointGroup.getNumBytes();\n        numBytes += this.lineGroup.getNumBytes();\n        numBytes += this.polygonGroup.getNumBytes();\n        if (this.layerCatalog !== undefined) {\n            for (const str of this.layerCatalog) {\n                numBytes += 2 * str.length;\n            }\n            for (const str of this.classCatalog) {\n                numBytes += 2 * str.length;\n            }\n            for (const str of this.typeCatalog) {\n                numBytes += 2 * str.length;\n            }\n        }\n        return numBytes;\n    }\n}\nexports.ExtendedTileInfo = ExtendedTileInfo;\n(function (ExtendedTileInfo) {\n    function finishFeatureGroup(featureGroup) {\n        featureGroup.featureIds.length = featureGroup.numFeatures;\n        featureGroup.techniqueIndex.length = featureGroup.numFeatures;\n        featureGroup.textIndex.length = featureGroup.numFeatures;\n        featureGroup.positionIndex.length = featureGroup.numFeatures;\n        featureGroup.positions.length = featureGroup.numPositions;\n        if (featureGroup.layerIndex !== undefined) {\n            featureGroup.layerIndex.length = featureGroup.numFeatures;\n        }\n        if (featureGroup.classIndex !== undefined) {\n            featureGroup.classIndex.length = featureGroup.numFeatures;\n        }\n        if (featureGroup.typeIndex !== undefined) {\n            featureGroup.typeIndex.length = featureGroup.numFeatures;\n        }\n    }\n    function finishPolygonFeatureGroup(polygonGroup) {\n        finishFeatureGroup(polygonGroup);\n        polygonGroup.outerRingStartIndex.length = polygonGroup.numFeatures;\n        polygonGroup.innerRingIsOuterContour.length = polygonGroup.groupNumRings;\n        polygonGroup.innerRingStartIndex.length = polygonGroup.groupNumRings;\n    }\n    function finishLineFeatureGroup(lineGroup) {\n        finishFeatureGroup(lineGroup);\n        if (lineGroup.segmentIds !== undefined) {\n            lineGroup.segmentIds.length = lineGroup.numFeatures;\n            lineGroup.segmentStartOffsets.length = lineGroup.numFeatures;\n            lineGroup.segmentEndOffsets.length = lineGroup.numFeatures;\n        }\n    }\n    /**\n     * Finalize the tile's features groups.\n     */\n    function finish(tileInfo) {\n        finishFeatureGroup(tileInfo.pointGroup);\n        finishLineFeatureGroup(tileInfo.lineGroup);\n        finishPolygonFeatureGroup(tileInfo.polygonGroup);\n        tileInfo.numBytes = tileInfo.getNumBytes();\n    }\n    ExtendedTileInfo.finish = finish;\n    /**\n     * Returns the number of features in this feature group.\n     */\n    function featureGroupSize(featureGroup) {\n        return featureGroup.numFeatures;\n    }\n    ExtendedTileInfo.featureGroupSize = featureGroupSize;\n    /**\n     * Check if the feature group is finalized.\n     */\n    function featureGroupFinished(featureGroup) {\n        return featureGroup.numPositions === featureGroup.positions.length;\n    }\n    ExtendedTileInfo.featureGroupFinished = featureGroupFinished;\n    /**\n     * Check if the tileInfo is finalized.\n     */\n    function tileInfoFinished(tileInfo) {\n        return (featureGroupFinished(tileInfo.pointGroup) &&\n            featureGroupFinished(tileInfo.lineGroup) &&\n            featureGroupFinished(tileInfo.polygonGroup));\n    }\n    ExtendedTileInfo.tileInfoFinished = tileInfoFinished;\n    /**\n     * Determine the name of (OMV) feature. It implements the special handling required\n     * to determine the text content of a feature from its tags, which are passed in as the `env`.\n     *\n     * @param env Environment containing the tags from the (OMV) feature.\n     * @param useAbbreviation `true` to use the abbreviation if available.\n     * @param useIsoCode `true` to use the tag \"iso_code\".\n     * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n     *                  as the text of the string. Order reflects priority.\n     */\n    function getFeatureName(env, useAbbreviation, useIsoCode, languages) {\n        let name;\n        if (useAbbreviation) {\n            const abbreviation = env.lookup(`name:short`);\n            if (typeof abbreviation === \"string\" && abbreviation.length > 0) {\n                return abbreviation;\n            }\n        }\n        if (useIsoCode) {\n            const isoCode = env.lookup(`iso_code`);\n            if (typeof isoCode === \"string\" && isoCode.length > 0) {\n                return isoCode;\n            }\n        }\n        if (languages !== undefined) {\n            for (const lang of languages) {\n                name = env.lookup(`name:${lang}`) || env.lookup(`name_${lang}`);\n                if (typeof name === \"string\" && name.length > 0) {\n                    return name;\n                }\n            }\n        }\n        name = env.lookup(\"name\");\n        if (typeof name === \"string\") {\n            return name;\n        }\n        return undefined;\n    }\n    ExtendedTileInfo.getFeatureName = getFeatureName;\n    /**\n     * Determine the text string of the map feature. It implements the special handling required\n     * to determine the text content of a feature from its tags, which are passed in as the `env`.\n     *\n     * @param feature Feature, including properties from the (OMV) feature.\n     * @param technique technique defining how text should be created from feature\n     * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n     *                  as the text of the string. Order reflects priority.\n     */\n    function getFeatureText(context, technique, languages) {\n        let useAbbreviation;\n        let useIsoCode;\n        const env = context instanceof Expr_1.Env ? context : context.env;\n        if (Techniques_1.isTextTechnique(technique) ||\n            Techniques_1.isPoiTechnique(technique) ||\n            Techniques_1.isLineMarkerTechnique(technique)) {\n            if (technique.text !== undefined) {\n                return TechniqueAttr_1.evaluateTechniqueAttr(context, technique.text);\n            }\n            if (technique.label !== undefined) {\n                const name = env.lookup(technique.label);\n                return typeof name === \"string\" ? name : undefined;\n            }\n            useAbbreviation = technique.useAbbreviation;\n            useIsoCode = technique.useIsoCode;\n        }\n        return getFeatureName(env, useAbbreviation, useIsoCode, languages);\n    }\n    ExtendedTileInfo.getFeatureText = getFeatureText;\n})(ExtendedTileInfo = exports.ExtendedTileInfo || (exports.ExtendedTileInfo = {}));\n/**\n * Support class for [[ExtendedTileInfo]]. Assist in filling it with data.\n */\nclass ExtendedTileInfoWriter {\n    /**\n     * Create an [[ExtendedTileInfoWriter]] for an [[ExtendedTileInfo]]. Assist in filling the\n     * [[ExtendedTileInfo]] with data.\n     *\n     * @param tileInfo [[ExtendedTileInfo]] to write data to.\n     * @param storeExtendedTags Pass `true` if feature data like `layer`, `class`or `type` should\n     *          be stored for every feature.\n     */\n    constructor(tileInfo, storeExtendedTags) {\n        this.tileInfo = tileInfo;\n        this.storeExtendedTags = storeExtendedTags;\n        /** Map to identify which techniques already have been added to the [[ExtendedTileInfo]]. */\n        this.techniqueIndexMap = new Map();\n        /** Map to identify which strings already have been added to the [[ExtendedTileInfo]]. */\n        this.stringMap = new Map();\n        /** Map to identify which `layer` names already have been added to the [[ExtendedTileInfo]]. */\n        this.layerMap = new Map();\n        /** Map to identify which `class` names already have been added to the [[ExtendedTileInfo]]. */\n        this.classMap = new Map();\n        /** Map to identify which `type` names already have been added to the [[ExtendedTileInfo]]. */\n        this.typeMap = new Map();\n    }\n    /**\n     * Adds a [[Technique]] to the catalog of techniques. Individual techniques have a `_index` file\n     * which has been created in the [[StyleSetEvaluator]]. This index is required to identify a\n     * technique. The `Map` is used to map techniques to already added techniques, or store the\n     * technique as new, and add it to the map.\n     *\n     * @param technique The [[Technique]] to add.\n     */\n    addTechnique(technique) {\n        let infoTileTechniqueIndex = this.techniqueIndexMap.get(technique._index);\n        if (infoTileTechniqueIndex !== undefined) {\n            return infoTileTechniqueIndex;\n        }\n        const decodedTechnique = StyleSetEvaluator_1.makeDecodedTechnique(technique);\n        infoTileTechniqueIndex = this.tileInfo.techniqueCatalog.length;\n        this.techniqueIndexMap.set(decodedTechnique._index, infoTileTechniqueIndex);\n        this.tileInfo.techniqueCatalog.push(decodedTechnique);\n        return infoTileTechniqueIndex;\n    }\n    /**\n     * Add a feature.\n     *\n     * @param featureGroup The feature group to add to.\n     * @param technique The technique to add.\n     * @param env The `env` which is a mix of original OMV feature tags and fields added by the\n     *      [[StyleSetEvaluator]]\n     * @param featureId The featureId, a number unique for many features (but not all).\n     * @param infoTileTechniqueIndex The previously computed index of the technique. Must have been\n     *      computed by `addTechnique(technique)`.\n     * @param isPolygonGroup `true`for polygons.\n     */\n    addFeature(featureGroup, env, featureId, featureText, infoTileTechniqueIndex, featureGroupType) {\n        // compute name/label of feature\n        let stringIndex = -1;\n        if (featureText !== undefined && featureText.length > 0) {\n            stringIndex = this.addText(featureText);\n        }\n        // add indices into the arrays.\n        featureGroup.featureIds[featureGroup.numFeatures] = featureId;\n        featureGroup.techniqueIndex[featureGroup.numFeatures] = infoTileTechniqueIndex;\n        featureGroup.textIndex[featureGroup.numFeatures] = stringIndex;\n        featureGroup.positionIndex[featureGroup.numFeatures] = featureGroup.numPositions;\n        switch (featureGroupType) {\n            case FeatureGroupType.Polygon:\n                // polygons need the extra fields for polygon rings\n                const polygonGroup = featureGroup;\n                harp_utils_1.assert(polygonGroup.outerRingStartIndex !== undefined);\n                harp_utils_1.assert(polygonGroup.innerRingStartIndex !== undefined);\n                harp_utils_1.assert(polygonGroup.innerRingIsOuterContour !== undefined);\n                polygonGroup.outerRingStartIndex[featureGroup.numFeatures] =\n                    polygonGroup.groupNumRings;\n                break;\n            case FeatureGroupType.Line:\n                featureGroup.userData[featureGroup.numFeatures] = env.entries;\n                break;\n        }\n        // store the extra feature fields\n        if (this.storeExtendedTags) {\n            featureGroup.layerIndex[featureGroup.numFeatures] = this.addLayer(env.lookup(\"$layer\"));\n            featureGroup.classIndex[featureGroup.numFeatures] = this.addClass(env.lookup(\"class\"));\n            featureGroup.typeIndex[featureGroup.numFeatures] = this.addType(env.lookup(\"type\"));\n        }\n        featureGroup.numFeatures++;\n    }\n    /**\n     * Add the X/Y coordinate of the point. Only for point feature groups.\n     *\n     * @param featureGroup The feature group to add it to.\n     * @param x X Position of point.\n     * @param y Y Position of point.\n     */\n    addFeaturePoint(featureGroup, x, y) {\n        featureGroup.positions[featureGroup.numPositions++] = x;\n        featureGroup.positions[featureGroup.numPositions++] = y;\n    }\n    /**\n     * Add the line points as X/Y coordinates to the line feature.\n     *\n     * If a line feature has more than one line (rare for HERE data), it should define multiple\n     * line features for it.\n     *\n     * @param featureGroup The feature group to add to. Must be line feature group.\n     * @param points The X/Y coordinates of the points.\n     */\n    addFeaturePoints(featureGroup, points) {\n        const n = featureGroup.numPositions;\n        const l = points.length;\n        const p = featureGroup.positions;\n        for (let i = 0; i < l; i++) {\n            p[n + i] = points[i];\n        }\n        featureGroup.numPositions += points.length;\n    }\n    /**\n     * Add the information about road segments to the line feature. Performs lazy initialization of\n     * `segmentIds`, `segmentStartOffsets`, and `segmentEndOffsets` members of a\n     * [[LineFeatureGroup]] instance.\n     *\n     * @param featureGroup The line feature group to add information to.\n     * @param segmentId Segment id of a feature.\n     * @param startOffset Start offset of a feature.\n     * @param endOffset End offset of a feature.\n     */\n    addRoadSegments(featureGroup, segmentId, startOffset, endOffset) {\n        if (featureGroup.segmentIds === undefined) {\n            featureGroup.segmentIds = new Array();\n            featureGroup.segmentStartOffsets = new Array();\n            featureGroup.segmentEndOffsets = new Array();\n        }\n        featureGroup.segmentIds[featureGroup.numFeatures - 1] = segmentId;\n        featureGroup.segmentStartOffsets[featureGroup.numFeatures - 1] = startOffset;\n        featureGroup.segmentEndOffsets[featureGroup.numFeatures - 1] = endOffset;\n    }\n    /**\n     * Add a single ring to the polygon. Can be called multiple times to add multiple rings to the\n     * polygon.\n     *\n     * @param featureGroup Polygon feature group to add polygon ring to.\n     * @param contour The X/Y coordinates of the ring.\n     * @param isOuterRing Pass `true`if it is a outer ring, otherwise `false`.\n     */\n    addRingPoints(featureGroup, contour, isOuterRing) {\n        featureGroup.innerRingStartIndex[featureGroup.groupNumRings] = featureGroup.numPositions;\n        featureGroup.innerRingIsOuterContour[featureGroup.groupNumRings] = isOuterRing ? 1 : 0;\n        featureGroup.groupNumRings++;\n        const n = featureGroup.numPositions;\n        const l = contour.length;\n        const p = featureGroup.positions;\n        for (let i = 0; i < l; i++) {\n            p[n + i] = contour[i];\n        }\n        featureGroup.numPositions += contour.length;\n    }\n    /**\n     * Finalize the tile info's feature group.\n     */\n    finish() {\n        ExtendedTileInfo.finish(this.tileInfo);\n    }\n    addText(name) {\n        return this.addStringValue(name, this.tileInfo.textCatalog, this.stringMap);\n    }\n    addLayer(name) {\n        return this.addStringValue(name, this.tileInfo.layerCatalog, this.layerMap);\n    }\n    addClass(name) {\n        return this.addStringValue(name, this.tileInfo.classCatalog, this.classMap);\n    }\n    addType(name) {\n        return this.addStringValue(name, this.tileInfo.typeCatalog, this.typeMap);\n    }\n    // Add a string to the strings catalog. Returns index into the catalog.\n    addStringValue(str, catalog, map) {\n        if (str === undefined || str === null) {\n            return -1;\n        }\n        const name = str.toString();\n        let i = map.get(name);\n        if (i !== undefined) {\n            return i;\n        }\n        i = catalog.length;\n        catalog.push(name);\n        map.set(name, i);\n        return i;\n    }\n}\nexports.ExtendedTileInfoWriter = ExtendedTileInfoWriter;\n/**\n * Implementation of [[ExtendedTileInfoPolygonAccessor]].\n */\nclass ExtendedTileInfoPolygonAccessorImpl {\n    constructor() {\n        /**\n         * Feature's index in the group.\n         */\n        this.featureIndex = 0;\n        /**\n         * Indicates where the ring starts.\n         */\n        this.ringStart = 0;\n        /**\n         * Number of rings.\n         */\n        this.numRings = 0;\n    }\n    /**\n     * Setup the accessor for extended [[TileInfo]].\n     *\n     * @param polygons polygons feature group.\n     * @param featureIndex feature's index in the group.\n     * @param ringStart where the ring starts.\n     * @param numRings number of rings.\n     */\n    setup(polygons, featureIndex, ringStart, numRings) {\n        this.polygons = polygons;\n        this.featureIndex = featureIndex;\n        this.ringStart = ringStart;\n        this.numRings = numRings;\n    }\n    /**\n     * Shut down the accessor and free all references.\n     */\n    reset() {\n        this.polygons = undefined;\n        this.featureIndex = 0;\n        this.ringStart = 0;\n        this.numRings = 0;\n    }\n    isOuterRing(ringIndex) {\n        harp_utils_1.assert(ringIndex >= 0);\n        harp_utils_1.assert(ringIndex < this.numRings);\n        harp_utils_1.assert(this.polygons !== undefined);\n        if (ringIndex < 0 || ringIndex >= this.numRings || this.polygons === undefined) {\n            throw new Error(\"ExtendedTileInfoPolygonAccessor: Invalid ring index\");\n        }\n        return this.polygons.innerRingIsOuterContour[this.ringStart + ringIndex] !== 0;\n    }\n    getPoints(ringIndex) {\n        harp_utils_1.assert(ringIndex >= 0);\n        harp_utils_1.assert(ringIndex < this.numRings);\n        harp_utils_1.assert(this.polygons !== undefined);\n        if (ringIndex < 0 || ringIndex >= this.numRings || this.polygons === undefined) {\n            throw new Error(\"ExtendedTileInfoPolygonAccessor: Invalid ring index\");\n        }\n        // compute the start/size of the points in this ring. All `points` are actually just the\n        // indices of a single X/Y coordinate.\n        const pointsStart = this.polygons.innerRingStartIndex[this.ringStart + ringIndex];\n        let numPointValues;\n        if (ringIndex < this.numRings - 1) {\n            numPointValues =\n                this.polygons.innerRingStartIndex[this.ringStart + ringIndex + 1] - pointsStart;\n        }\n        else {\n            if (this.ringStart + ringIndex < this.polygons.innerRingStartIndex.length - 1) {\n                numPointValues =\n                    this.polygons.innerRingStartIndex[this.ringStart + ringIndex + 1] - pointsStart;\n            }\n            else {\n                numPointValues = this.polygons.positions.length - pointsStart;\n            }\n        }\n        return {\n            points: this.polygons.positions,\n            pointsStart,\n            numPointValues\n        };\n    }\n}\n/**\n * Supporting class for [[ExtendedTileInfo]]. Takes an [[ExtendedTileInfoHandler]] and calls an\n * `accept` for every feature of the [[ExtendedTileInfo]], or just all features of a specified\n * `featureId`.\n */\nclass ExtendedTileInfoVisitor {\n    constructor(tileInfo) {\n        this.tileInfo = tileInfo;\n    }\n    /**\n     * Visit all feature in the [[ExtendedTileInfo]]\n     *\n     * @param handler Let the `handler` visit all features.\n     */\n    visitAll(handler) {\n        this.visitAllPointFeatures(handler);\n        this.visitAllLineFeatures(handler);\n        this.visitAllPolygonFeatures(handler);\n    }\n    /**\n     * Visit all features of a specified featureId.\n     *\n     * @param featureId The featureId to visit.\n     * @param handler The `handler` to use.\n     */\n    visitFeature(featureId, handler) {\n        let numFeaturesFound = 0;\n        const numPointFeatures = this.tileInfo.pointGroup.numFeatures;\n        const pointFeatures = this.tileInfo.pointGroup.featureIds;\n        for (let i = 0; i < numPointFeatures; i++) {\n            if (pointFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitPointFeature(i, handler);\n            }\n        }\n        const numLineFeatures = this.tileInfo.lineGroup.numFeatures;\n        const lineFeatures = this.tileInfo.lineGroup.featureIds;\n        for (let i = 0; i < numLineFeatures; i++) {\n            if (lineFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitLineFeature(i, handler);\n            }\n        }\n        const numPolygonFeatures = this.tileInfo.polygonGroup.numFeatures;\n        const polygonsFeatures = this.tileInfo.polygonGroup.featureIds;\n        for (let i = 0; i < numPolygonFeatures; i++) {\n            if (polygonsFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitPolygonFeature(i, handler);\n            }\n        }\n        return numFeaturesFound;\n    }\n    /**\n     * Visit all `POINT` features.\n     *\n     * @param handler The `handler` to use.\n     */\n    visitAllPointFeatures(handler) {\n        const numFeatures = this.tileInfo.pointGroup.numFeatures;\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitPointFeature(i, handler);\n        }\n    }\n    /**\n     * Visit all `LINESTRING` features.\n     *\n     * @param handler The handler to use.\n     */\n    visitAllLineFeatures(handler) {\n        const numFeatures = this.tileInfo.lineGroup.numFeatures;\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitLineFeature(i, handler);\n        }\n    }\n    /**\n     * Visit all `POLYGON` features.\n     *\n     * @param handler The `handler` to use.\n     */\n    visitAllPolygonFeatures(handler) {\n        const numFeatures = this.tileInfo.polygonGroup.numFeatures;\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitPolygonFeature(i, handler);\n        }\n    }\n    getTag(featureIndex, index) {\n        return index !== undefined && index[featureIndex] >= 0 ? index[featureIndex] : -1;\n    }\n    /**\n     * Call the `handler` on a point feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    visitPointFeature(featureIndex, handler) {\n        const tileInfo = this.tileInfo;\n        const points = tileInfo.pointGroup;\n        const start = points.positionIndex[featureIndex];\n        const x = points.positions[start];\n        const y = points.positions[start + 1];\n        if (!!handler.acceptPoint) {\n            handler.acceptPoint(points.featureIds[featureIndex], points.techniqueIndex[featureIndex], x, y, points.textIndex[featureIndex], this.getTag(featureIndex, points.layerIndex), this.getTag(featureIndex, points.classIndex), this.getTag(featureIndex, points.typeIndex));\n        }\n    }\n    /**\n     * Call the `handler` on a line feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    visitLineFeature(featureIndex, handler) {\n        const tileInfo = this.tileInfo;\n        const lines = tileInfo.lineGroup;\n        const numFeatures = lines.numFeatures;\n        const positionsStart = lines.positionIndex[featureIndex];\n        const numPointValues = featureIndex === numFeatures - 1\n            ? lines.positions.length - positionsStart\n            : lines.positionIndex[featureIndex + 1] - positionsStart;\n        let segmentId;\n        let startOffset;\n        let endOffset;\n        if (lines.segmentIds !== undefined) {\n            segmentId = lines.segmentIds[featureIndex];\n            startOffset = lines.segmentStartOffsets[featureIndex];\n            endOffset = lines.segmentEndOffsets[featureIndex];\n        }\n        if (!!handler.acceptLine) {\n            handler.acceptLine(lines.featureIds[featureIndex], lines.techniqueIndex[featureIndex], lines.textIndex[featureIndex], this.getTag(featureIndex, lines.layerIndex), this.getTag(featureIndex, lines.classIndex), this.getTag(featureIndex, lines.typeIndex), tileInfo.lineGroup.positions, positionsStart, numPointValues, segmentId, startOffset, endOffset);\n        }\n    }\n    /**\n     * Call the `handler` on a polygon feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    visitPolygonFeature(featureIndex, handler) {\n        if (handler.acceptPolygon === undefined) {\n            return;\n        }\n        const tileInfo = this.tileInfo;\n        const polygons = tileInfo.polygonGroup;\n        const numFeatures = polygons.numFeatures;\n        const ringStart = polygons.outerRingStartIndex[featureIndex];\n        const numRings = featureIndex === numFeatures - 1\n            ? polygons.innerRingStartIndex.length - ringStart\n            : polygons.outerRingStartIndex[featureIndex + 1] - ringStart;\n        // Use a static instance, so we do not allocate anything here\n        ExtendedTileInfoVisitor.polygonAccessor.setup(polygons, featureIndex, ringStart, numRings);\n        handler.acceptPolygon(polygons.featureIds[featureIndex], polygons.techniqueIndex[featureIndex], polygons.textIndex[featureIndex], this.getTag(featureIndex, polygons.layerIndex), this.getTag(featureIndex, polygons.classIndex), this.getTag(featureIndex, polygons.typeIndex), ExtendedTileInfoVisitor.polygonAccessor);\n        // Free all data references.\n        ExtendedTileInfoVisitor.polygonAccessor.reset();\n    }\n}\nexports.ExtendedTileInfoVisitor = ExtendedTileInfoVisitor;\n// static instance to work without allocations.\nExtendedTileInfoVisitor.polygonAccessor = new ExtendedTileInfoPolygonAccessorImpl();\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/TileInfo.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/WorkerDecoderProtocol.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/WorkerDecoderProtocol.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Allows to cancel and prioritize requests inside the requestQueue. Useful to optimize the order of\n * decoding tiles during animations and camera movements.\n *\n * `RequestController` is not extending [[AbortController]], because this is not supported in ES5.\n */\nclass RequestController {\n    /**\n     * Creates an instance of `RequestController`.\n     *\n     * @param {number} priority\n     * @param {AbortController} abortController Optional [[AbortController]] used internally, since\n     *      [[AbortController]]s should not be subclassed.\n     */\n    constructor(priority = 0, abortController = new AbortController()) {\n        this.priority = priority;\n        this.abortController = abortController;\n    }\n    get signal() {\n        return this.abortController.signal;\n    }\n    /**\n     * Invoking this method will set this object's AbortSignal's aborted flag and\n     * signal to any observers that the associated activity is to be aborted.\n     */\n    abort() {\n        this.abortController.abort();\n    }\n}\nexports.RequestController = RequestController;\n/**\n * Communication protocol with [[ITileDecoder]].\n */\nvar WorkerDecoderProtocol;\n(function (WorkerDecoderProtocol) {\n    /**\n     * Define possible names of messages exchanged with decoder services within `WebWorker`.\n     */\n    let DecoderMessageName;\n    (function (DecoderMessageName) {\n        DecoderMessageName[\"Configuration\"] = \"configuration\";\n    })(DecoderMessageName = WorkerDecoderProtocol.DecoderMessageName || (WorkerDecoderProtocol.DecoderMessageName = {}));\n    /**\n     * Type guard to check if an object is an instance of `ConfigurationMessage`.\n     */\n    function isConfigurationMessage(message) {\n        return (message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === DecoderMessageName.Configuration);\n    }\n    WorkerDecoderProtocol.isConfigurationMessage = isConfigurationMessage;\n    /**\n     * Define possible names of requests called on decoder services within `WebWorker`.\n     */\n    let Requests;\n    (function (Requests) {\n        Requests[\"DecodeTileRequest\"] = \"decode-tile-request\";\n        Requests[\"TileInfoRequest\"] = \"tile-info-request\";\n    })(Requests = WorkerDecoderProtocol.Requests || (WorkerDecoderProtocol.Requests = {}));\n    /**\n     * Type guard to check if an object is a decoded tile object sent to a worker.\n     */\n    function isDecodeTileRequest(message) {\n        return (message &&\n            typeof message.type === \"string\" &&\n            message.type === Requests.DecodeTileRequest);\n    }\n    WorkerDecoderProtocol.isDecodeTileRequest = isDecodeTileRequest;\n    /**\n     * Type guard to check if an object is an info tile object sent to a worker.\n     */\n    function isTileInfoRequest(message) {\n        return (message && typeof message.type === \"string\" && message.type === Requests.TileInfoRequest);\n    }\n    WorkerDecoderProtocol.isTileInfoRequest = isTileInfoRequest;\n})(WorkerDecoderProtocol = exports.WorkerDecoderProtocol || (exports.WorkerDecoderProtocol = {}));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/WorkerDecoderProtocol.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/WorkerServiceProtocol.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/WorkerServiceProtocol.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Common communication protocol for [[WorkerService]].\n */\nvar WorkerServiceProtocol;\n(function (WorkerServiceProtocol) {\n    /**\n     * Service id of worker manager ([[WorkerServiceManager]]) used to create/destroy service\n     * instances in workers.\n     */\n    WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID = \"worker-service-manager\";\n    /**\n     * Define possible names of messages exchanged with services within `WebWorker`.\n     */\n    let ServiceMessageName;\n    (function (ServiceMessageName) {\n        ServiceMessageName[\"Initialized\"] = \"initialized\";\n        ServiceMessageName[\"Request\"] = \"request\";\n        ServiceMessageName[\"Response\"] = \"response\";\n    })(ServiceMessageName = WorkerServiceProtocol.ServiceMessageName || (WorkerServiceProtocol.ServiceMessageName = {}));\n    /**\n     * Type guard to check if an object is a signal message from worker.\n     */\n    function isInitializedMessage(message) {\n        return (message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Initialized);\n    }\n    WorkerServiceProtocol.isInitializedMessage = isInitializedMessage;\n    /**\n     * Define possible names of requests called on services within `WebWorker`.\n     */\n    let Requests;\n    (function (Requests) {\n        Requests[\"CreateService\"] = \"create-service\";\n        Requests[\"DestroyService\"] = \"destroy-service\";\n    })(Requests = WorkerServiceProtocol.Requests || (WorkerServiceProtocol.Requests = {}));\n    /**\n     * Test if `error` thrown by [[CreateServiceRequest]] was caused by unknown type of service.\n     */\n    function isUnknownServiceError(error) {\n        return /unknown targetServiceType requested: /.test(error.message);\n    }\n    WorkerServiceProtocol.isUnknownServiceError = isUnknownServiceError;\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    function isRequestMessage(message) {\n        return (message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Request);\n    }\n    WorkerServiceProtocol.isRequestMessage = isRequestMessage;\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    function isResponseMessage(message) {\n        return (message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Response);\n    }\n    WorkerServiceProtocol.isResponseMessage = isResponseMessage;\n})(WorkerServiceProtocol = exports.WorkerServiceProtocol || (exports.WorkerServiceProtocol = {}));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/WorkerServiceProtocol.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/WorkerTilerProtocol.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/WorkerTilerProtocol.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Communication protocol with [[ITiler]].\n */\nvar WorkerTilerProtocol;\n(function (WorkerTilerProtocol) {\n    /**\n     * Define possible names of requests called on tiler services within `WebWorker`.\n     */\n    let Requests;\n    (function (Requests) {\n        Requests[\"RegisterIndex\"] = \"register-index\";\n        Requests[\"UpdateIndex\"] = \"update-index\";\n        Requests[\"TileRequest\"] = \"tile-request\";\n    })(Requests = WorkerTilerProtocol.Requests || (WorkerTilerProtocol.Requests = {}));\n    /**\n     * Type guard to check if an object is an index registration request sent to a worker.\n     */\n    function isRegisterIndexRequest(message) {\n        return (message && typeof message.type === \"string\" && message.type === Requests.RegisterIndex);\n    }\n    WorkerTilerProtocol.isRegisterIndexRequest = isRegisterIndexRequest;\n    /**\n     * Type guard to check if an object is an update request for the index registration.\n     */\n    function isUpdateIndexRequest(message) {\n        return message && typeof message.type === \"string\" && message.type === Requests.UpdateIndex;\n    }\n    WorkerTilerProtocol.isUpdateIndexRequest = isUpdateIndexRequest;\n    /**\n     * Type guard to check if an object is a tile request sent to a worker.\n     */\n    function isTileRequest(message) {\n        return message && typeof message.type === \"string\" && message.type === Requests.TileRequest;\n    }\n    WorkerTilerProtocol.isTileRequest = isTileRequest;\n})(WorkerTilerProtocol = exports.WorkerTilerProtocol || (exports.WorkerTilerProtocol = {}));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/WorkerTilerProtocol.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/ArrayOperators.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/ArrayOperators.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operators = {\n    at: {\n        call: (context, call) => {\n            const args = call.args;\n            const index = context.evaluate(args[0]);\n            if (typeof index !== \"number\") {\n                throw new Error(`expected the index of the element to retrieve`);\n            }\n            const value = context.evaluate(args[1]);\n            if (!Array.isArray(value)) {\n                throw new Error(`expected an array`);\n            }\n            return index >= 0 && index < value.length ? value[index] : null;\n        }\n    }\n};\nexports.ArrayOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/ArrayOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/CastOperators.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/CastOperators.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operators = {\n    \"to-boolean\": {\n        call: (context, call) => {\n            return Boolean(context.evaluate(call.args[0]));\n        }\n    },\n    \"to-string\": {\n        call: (context, call) => {\n            return String(context.evaluate(call.args[0]));\n        }\n    },\n    \"to-number\": {\n        call: (context, call) => {\n            for (const arg of call.args) {\n                const value = Number(context.evaluate(arg));\n                if (!isNaN(value)) {\n                    return value;\n                }\n            }\n            throw new Error(\"cannot convert the value to a number\");\n        }\n    }\n};\nexports.CastOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/CastOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/ColorOperators.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/ColorOperators.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst ColorUtils_1 = __webpack_require__(/*! ../ColorUtils */ \"./node_modules/@here/harp-datasource-protocol/lib/ColorUtils.js\");\nconst StringEncodedNumeral_1 = __webpack_require__(/*! ../StringEncodedNumeral */ \"./node_modules/@here/harp-datasource-protocol/lib/StringEncodedNumeral.js\");\nconst operators = {\n    alpha: {\n        call: (context, call) => {\n            let color = context.evaluate(call.args[0]);\n            if (typeof color === \"string\") {\n                color = StringEncodedNumeral_1.parseStringEncodedColor(color);\n            }\n            const alpha = typeof color === \"number\" ? ColorUtils_1.ColorUtils.getAlphaFromHex(color) : 1;\n            return alpha;\n        }\n    },\n    rgba: {\n        call: (context, call) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            const a = context.evaluate(call.args[3]);\n            if (typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                typeof a === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0 &&\n                a >= 0 &&\n                a <= 1) {\n                return rgbaToHex(r, g, b, a);\n            }\n            throw new Error(`unknown color 'rgba(${r},${g},${b},${a})'`);\n        }\n    },\n    rgb: {\n        call: (context, call) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            if (typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0) {\n                return rgbToHex(r, g, b);\n            }\n            throw new Error(`unknown color 'rgb(${r},${g},${b})'`);\n        }\n    },\n    // Hsl operator contains angle modulated to <0, 360> range, percent of\n    // saturation and lightness in <0, 100> range, i.e. hsl(360, 100, 100)\n    hsl: {\n        call: (context, call) => {\n            const h = context.evaluate(call.args[0]);\n            const s = context.evaluate(call.args[1]);\n            const l = context.evaluate(call.args[2]);\n            if (typeof h === \"number\" &&\n                typeof s === \"number\" &&\n                typeof l === \"number\" &&\n                h >= 0 &&\n                s >= 0 &&\n                l >= 0) {\n                return hslToHex(h, s, l);\n            }\n            throw new Error(`unknown color 'hsl(${h},${s}%,${l}%)'`);\n        }\n    }\n};\nfunction rgbaToHex(r, g, b, a) {\n    // We decode rgba color channels using custom hex format with transparency.\n    return ColorUtils_1.ColorUtils.getHexFromRgba(THREE.Math.clamp(r, 0, 255) / 255, THREE.Math.clamp(g, 0, 255) / 255, THREE.Math.clamp(b, 0, 255) / 255, THREE.Math.clamp(a, 0, 1));\n}\nfunction rgbToHex(r, g, b) {\n    return ColorUtils_1.ColorUtils.getHexFromRgb(THREE.Math.clamp(r, 0, 255) / 255, THREE.Math.clamp(g, 0, 255) / 255, THREE.Math.clamp(b, 0, 255) / 255);\n}\nfunction hslToHex(h, s, l) {\n    return ColorUtils_1.ColorUtils.getHexFromHsl(THREE.Math.euclideanModulo(h, 360) / 360, THREE.Math.clamp(s, 0, 100) / 100, THREE.Math.clamp(l, 0, 100) / 100);\n}\nexports.ColorOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/ColorOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/ComparisonOperators.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/ComparisonOperators.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction compare(context, call, strict = false) {\n    const left = context.evaluate(call.args[0]);\n    const right = context.evaluate(call.args[1]);\n    if (!((typeof left === \"number\" && typeof right === \"number\") ||\n        (typeof left === \"string\" && typeof right === \"string\"))) {\n        if (strict) {\n            throw new Error(`invalid operands '${left}' and '${right}' for operator '${call.op}'`);\n        }\n    }\n    switch (call.op) {\n        case \"<\":\n            return left < right;\n        case \">\":\n            return left > right;\n        case \"<=\":\n            return left <= right;\n        case \">=\":\n            return left >= right;\n        default:\n            throw new Error(`invalid comparison operator '${call.op}'`);\n    }\n}\nconst operators = {\n    \"!\": {\n        call: (context, call) => {\n            return !context.evaluate(call.args[0]);\n        }\n    },\n    \"==\": {\n        call: (context, call) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left === right;\n        }\n    },\n    \"!=\": {\n        call: (context, call) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left !== right;\n        }\n    },\n    \"<\": { call: (context, call) => compare(context, call) },\n    \">\": { call: (context, call) => compare(context, call) },\n    \"<=\": { call: (context, call) => compare(context, call) },\n    \">=\": { call: (context, call) => compare(context, call) }\n};\nexports.ComparisonOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/ComparisonOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/FeatureOperators.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/FeatureOperators.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operators = {\n    \"geometry-type\": {\n        call: (context, call) => {\n            const geometryType = context.env.lookup(\"$geometryType\");\n            switch (geometryType) {\n                case \"point\":\n                    return \"Point\";\n                case \"line\":\n                    return \"LineString\";\n                case \"polygon\":\n                    return \"Polygon\";\n                default:\n                    return null;\n            }\n        }\n    }\n};\nexports.FeatureOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/FeatureOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/FlowOperators.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/FlowOperators.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction conditionalCast(context, type, args) {\n    switch (type) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n            for (const childExpr of args) {\n                const value = context.evaluate(childExpr);\n                if (typeof value === type) {\n                    return value;\n                }\n            }\n            throw new Error(`expected a '${type}'`);\n        default:\n            throw new Error(`invalid type '${type}'`);\n    } // switch\n}\nconst operators = {\n    all: {\n        call: (context, call) => {\n            for (const childExpr of call.args) {\n                if (!context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n    any: {\n        call: (context, call) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n    none: {\n        call: (context, call) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n    boolean: {\n        call: (context, call) => {\n            return conditionalCast(context, \"boolean\", call.args);\n        }\n    },\n    number: {\n        call: (context, call) => {\n            return conditionalCast(context, \"number\", call.args);\n        }\n    },\n    string: {\n        call: (context, call) => {\n            return conditionalCast(context, \"string\", call.args);\n        }\n    }\n};\nexports.FlowOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/FlowOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/InterpolationOperators.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/InterpolationOperators.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Expr_1 = __webpack_require__(/*! ../Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\nconst InterpolatedProperty_1 = __webpack_require__(/*! ../InterpolatedProperty */ \"./node_modules/@here/harp-datasource-protocol/lib/InterpolatedProperty.js\");\n/**\n * Evaluates the given piecewise function.\n */\nfunction step(context, call) {\n    const { args } = call;\n    const value = context.evaluate(args[0]);\n    if (value === null) {\n        // returns the default value of step.\n        return context.evaluate(args[1]);\n    }\n    if (typeof value !== \"number\") {\n        throw new Error(`the input of a 'step' operator must have type 'number'`);\n    }\n    let first = 1;\n    let last = args.length / 2 - 1;\n    while (first < last) {\n        // tslint:disable-next-line: no-bitwise\n        const mid = (first + last) >>> 1;\n        const stop = args[mid * 2].value;\n        if (value < stop) {\n            last = mid - 1;\n        }\n        else if (value > stop) {\n            first = mid + 1;\n        }\n        else {\n            last = mid;\n        }\n    }\n    const result = args[first * 2];\n    if (!(result instanceof Expr_1.NumberLiteralExpr)) {\n        throw new Error(\"expected a numeric literal\");\n    }\n    const index = result.value <= value ? first : first - 1;\n    return context.evaluate(args[index * 2 + 1]);\n}\n/**\n * Prepare and validate the \"interpolate\" call.\n *\n * @param call An [[Expr]] representing an \"interpolate\" call.\n * @hidden\n */\nfunction prepareInterpolateCallExpr(call) {\n    if (call._interpolatedProperty || call._mode !== undefined) {\n        return;\n    }\n    const interpolatorType = call.args[0];\n    if (!(interpolatorType instanceof Expr_1.CallExpr)) {\n        throw new Error(\"expected an interpolation type\");\n    }\n    let mode;\n    let exponent;\n    if (interpolatorType.op === \"linear\") {\n        mode = \"Linear\";\n    }\n    else if (interpolatorType.op === \"discrete\") {\n        mode = \"Discrete\";\n    }\n    else if (interpolatorType.op === \"cubic\") {\n        mode = \"Cubic\";\n    }\n    else if (interpolatorType.op === \"exponential\") {\n        mode = \"Exponential\";\n        const base = interpolatorType.args[0];\n        if (!(base instanceof Expr_1.NumberLiteralExpr)) {\n            throw new Error(\"expected the base of the exponential interpolation\");\n        }\n        exponent = base.value;\n    }\n    else {\n        throw new Error(\"unrecognized interpolation type\");\n    }\n    const input = call.args[1];\n    if (!(input instanceof Expr_1.CallExpr)) {\n        throw new Error(\"expected the input of the interpolation\");\n    }\n    if (input.op !== \"zoom\") {\n        throw new Error(\"only 'zoom' is supported\");\n    }\n    if (call.args.length === 2 || call.args.length % 2) {\n        throw new Error(\"invalid number of samples\");\n    }\n    const stops = [];\n    const values = [];\n    let isConstantInterpolation = true;\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n        if (!(stop instanceof Expr_1.NumberLiteralExpr)) {\n            throw new Error(\"expected a numeric literal\");\n        }\n        if (stops.length > 0 && stop.value === stops[stops.length - 1]) {\n            stops[stops.length - 1] = stop.value - 0.0000001;\n        }\n        stops.push(stop.value);\n        if (isConstantInterpolation) {\n            const value = call.args[i + 1];\n            if (value instanceof Expr_1.LiteralExpr) {\n                values.push(value.value);\n            }\n            else {\n                isConstantInterpolation = false;\n            }\n        }\n    }\n    if (isConstantInterpolation) {\n        const result = InterpolatedProperty_1.createInterpolatedProperty({\n            interpolation: mode,\n            exponent,\n            zoomLevels: stops,\n            values\n        });\n        if (!result) {\n            throw new Error(\"failed to create interpolation\");\n        }\n        call._interpolatedProperty = result;\n    }\n    else {\n        call._mode = mode;\n        call._exponent = exponent;\n        call._stops = stops;\n    }\n}\n/**\n * Classify the given `step` call.\n *\n * This function checks the input of the `step` and ensures that the stops\n * are literals.\n *\n * @param call A call to `[\"step\", ...]`.\n * @hidden\n */\nfunction classifyStepCallExpr(call) {\n    if (call._inputIsZoom !== undefined) {\n        // nothing to do, the `call` was already classified.\n        return;\n    }\n    if (call.args[0] === undefined) {\n        throw new Error(\"expected the input of the 'step' operator\");\n    }\n    if (call.args.length < 3 || call.args.length % 2) {\n        throw new Error(\"not enough arguments\");\n    }\n    const input = call.args[0];\n    // tslint:disable-next-line: prefer-conditional-expression\n    if (input instanceof Expr_1.CallExpr && input.op === \"zoom\") {\n        call._inputIsZoom = true;\n    }\n    else {\n        call._inputIsZoom = false;\n    }\n    // check that the stops are literals.\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n        if (!(stop instanceof Expr_1.NumberLiteralExpr)) {\n            throw new Error(\"expected a numeric literal\");\n        }\n    }\n}\n/**\n * Prepares the given call for the dynamic exception.\n * This method collects the stops and\n *\n * @param call A call to `[\"step\", ...]`.\n * @hidden\n */\nfunction prepareStepCallExpr(call) {\n    if (call._stops || call._interpolatedProperty) {\n        // nothing to do, the `call` was already prepared for execution.\n        return;\n    }\n    // collect the stops of the step call.\n    const stops = [Number.MIN_SAFE_INTEGER];\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n        stops.push(stop.value);\n    }\n    // collect the values of the step call.\n    const values = [];\n    let hasConstantValues = true;\n    for (let i = 1; hasConstantValues && i < call.args.length; i += 2) {\n        const literal = call.args[i];\n        if (literal instanceof Expr_1.LiteralExpr) {\n            values.push(literal.value);\n        }\n        else {\n            hasConstantValues = false;\n        }\n    }\n    if (hasConstantValues) {\n        // all the values of this zoom-based `step` are constant,\n        // create an interpolated property and store it together\n        // with the call.\n        const interpolatedProperty = InterpolatedProperty_1.createInterpolatedProperty({\n            interpolation: \"Discrete\",\n            zoomLevels: stops,\n            values\n        });\n        if (interpolatedProperty === undefined) {\n            throw new Error(\"failed to create interpolator\");\n        }\n        call._interpolatedProperty = interpolatedProperty;\n    }\n    else {\n        // the values the `[\"step\"]` call are not constants,\n        // cache the `zoomLevels` to avoid recreating input `Array`\n        // when instantiating a new [[InterpolatedProperty]].\n        call._stops = stops;\n    }\n}\nconst operators = {\n    interpolate: {\n        isDynamicOperator: (call) => {\n            return call.args[1] && call.args[1].isDynamic();\n        },\n        call: (context, call) => {\n            prepareInterpolateCallExpr(call);\n            if (context.scope !== Expr_1.ExprScope.Dynamic) {\n                return call;\n            }\n            let interpolatedProperty = call._interpolatedProperty;\n            if (!interpolatedProperty) {\n                const values = [];\n                for (let i = 2; i < call.args.length; i += 2) {\n                    const value = context.evaluate(call.args[i + 1]);\n                    values.push(value);\n                }\n                interpolatedProperty = InterpolatedProperty_1.createInterpolatedProperty({\n                    interpolation: call._mode,\n                    exponent: call._exponent,\n                    zoomLevels: call._stops,\n                    values\n                });\n                if (interpolatedProperty === undefined) {\n                    throw new Error(\"failed to create interpolator\");\n                }\n            }\n            return InterpolatedProperty_1.getPropertyValue(interpolatedProperty, context.env);\n        }\n    },\n    step: {\n        isDynamicOperator: (call) => {\n            return call.args[0] && call.args[0].isDynamic();\n        },\n        call: (context, call) => {\n            classifyStepCallExpr(call);\n            if (context.scope === Expr_1.ExprScope.Value) {\n                return call;\n            }\n            if (context.scope === Expr_1.ExprScope.Condition || call._inputIsZoom === false) {\n                return step(context, call);\n            }\n            prepareStepCallExpr(call);\n            let interpolatedProperty = call._interpolatedProperty;\n            if (!interpolatedProperty) {\n                // the values of the interpolation are not literals,\n                // evaluate the sub expressions and combine them\n                // with the constant stops computed when preparing this call.\n                const values = [];\n                for (let i = 1; i < call.args.length; i += 2) {\n                    const value = context.evaluate(call.args[i]);\n                    values.push(value);\n                }\n                interpolatedProperty = InterpolatedProperty_1.createInterpolatedProperty({\n                    interpolation: \"Discrete\",\n                    zoomLevels: call._stops,\n                    values\n                });\n                if (interpolatedProperty === undefined) {\n                    throw new Error(\"failed to create interpolator\");\n                }\n            }\n            return InterpolatedProperty_1.getPropertyValue(interpolatedProperty, context.env);\n        }\n    }\n};\nexports.InterpolationOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/InterpolationOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/MapOperators.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/MapOperators.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Expr_1 = __webpack_require__(/*! ../Expr */ \"./node_modules/@here/harp-datasource-protocol/lib/Expr.js\");\nconst operators = {\n    \"ppi-scale\": {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            const scaleFactor = call.args[1] ? context.evaluate(call.args[1]) : 1;\n            return value * scaleFactor;\n        }\n    },\n    \"world-ppi-scale\": {\n        isDynamicOperator: () => {\n            return true;\n        },\n        call: (context, call) => {\n            const pixels = context.evaluate(call.args[0]);\n            const scaleFactor = call.args[1] ? context.evaluate(call.args[1]) : 1;\n            const zoom = context.env.lookup(\"$zoom\");\n            const zoomWidth = Math.pow(2, 17) / Math.pow(2, zoom);\n            const v = pixels * zoomWidth * scaleFactor;\n            return v;\n        }\n    },\n    \"world-discrete-ppi-scale\": {\n        isDynamicOperator: () => {\n            return true;\n        },\n        call: (context, call) => {\n            const pixels = context.evaluate(call.args[0]);\n            const scaleFactor = call.args[1] ? context.evaluate(call.args[1]) : 1;\n            const zoom = context.env.lookup(\"$zoom\");\n            const zoomWidthDiscrete = Math.pow(2, 17) / Math.pow(2, Math.floor(zoom));\n            const v = pixels * zoomWidthDiscrete * scaleFactor;\n            return v;\n        }\n    },\n    ppi: {\n        call: (context) => {\n            const ppi = context.env.lookup(\"$ppi\");\n            if (typeof ppi === \"number\") {\n                return ppi;\n            }\n            return 72;\n        }\n    },\n    zoom: {\n        isDynamicOperator: () => {\n            return true;\n        },\n        call: (context) => {\n            if (context.scope === Expr_1.ExprScope.Condition) {\n                const zoom = context.env.lookup(\"$zoom\");\n                if (zoom !== undefined) {\n                    return zoom;\n                }\n                throw new Error(\"failed to get the zoom level.\");\n            }\n            // direct usages of 'zoom' outside technique filter conditions\n            // and interpolations are not allowed.\n            throw new Error(\"invalid usage of the 'zoom' operator.\");\n        }\n    }\n};\nexports.MapOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/MapOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/MathOperators.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/MathOperators.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst operators = {\n    \"^\": {\n        call: (context, call) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(`invalid operands '${typeof a}' and '${typeof b}' for operator '^'`);\n            }\n            return Math.pow(a, b);\n        }\n    },\n    \"-\": {\n        call: (context, call) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                throw new Error(`invalid operands '${typeof a}' and '${typeof b}' for operator '-'`);\n            }\n            return a - b;\n        }\n    },\n    \"/\": {\n        call: (context, call) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(`invalid operands '${typeof a}' and '${typeof b}' for operator '/'`);\n            }\n            return a / b;\n        }\n    },\n    \"%\": {\n        call: (context, call) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(`invalid operands '${typeof a}' and '${typeof b}' for operator '%'`);\n            }\n            return a % b;\n        }\n    },\n    \"+\": {\n        call: (context, call) => {\n            return call.args.reduce((a, b) => Number(a) + Number(context.evaluate(b)), 0);\n        }\n    },\n    \"*\": {\n        call: (context, call) => {\n            return call.args.reduce((a, b) => Number(a) * Number(context.evaluate(b)), 1);\n        }\n    },\n    abs: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'abs'`);\n            }\n            return Math.abs(value);\n        }\n    },\n    acos: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'acos'`);\n            }\n            return Math.acos(value);\n        }\n    },\n    asin: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'asin'`);\n            }\n            return Math.asin(value);\n        }\n    },\n    atan: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'atan'`);\n            }\n            return Math.atan(value);\n        }\n    },\n    ceil: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ceil'`);\n            }\n            return Math.ceil(value);\n        }\n    },\n    cos: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'cos'`);\n            }\n            return Math.cos(value);\n        }\n    },\n    e: {\n        call: () => {\n            return Math.E;\n        }\n    },\n    floor: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'floor'`);\n            }\n            return Math.floor(value);\n        }\n    },\n    ln: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln'`);\n            }\n            return Math.log(value);\n        }\n    },\n    ln2: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln2'`);\n            }\n            return Math.log2(value);\n        }\n    },\n    log10: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'log10'`);\n            }\n            return Math.log10(value);\n        }\n    },\n    max: {\n        call: (context, call) => {\n            return Math.max(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n    min: {\n        call: (context, call) => {\n            return Math.min(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n    /**\n     * Clamp numeric value to given range, inclusive.\n     *\n     * Synopsis:\n     * ```\n     * [\"clamp\", v: number, min: number, max: number]`\n     * ```\n     */\n    clamp: {\n        call: (context, call) => {\n            const v = context.evaluate(call.args[0]);\n            const min = context.evaluate(call.args[1]);\n            const max = context.evaluate(call.args[2]);\n            if (typeof v !== \"number\" || typeof min !== \"number\" || typeof max !== \"number\") {\n                throw new Error(`invalid operands '${v}', ${min}, ${max} for operator 'clamp'`);\n            }\n            return THREE.Math.clamp(v, min, max);\n        }\n    },\n    pi: {\n        call: () => {\n            return Math.PI;\n        }\n    },\n    round: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'round'`);\n            }\n            return Math.round(value);\n        }\n    },\n    sin: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sin'`);\n            }\n            return Math.sin(value);\n        }\n    },\n    sqrt: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sqrt'`);\n            }\n            return Math.sqrt(value);\n        }\n    },\n    tan: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'tan'`);\n            }\n            return Math.tan(value);\n        }\n    }\n};\nexports.MathOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/MathOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/MiscOperators.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/MiscOperators.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operators = {\n    length: {\n        call: (context, call) => {\n            const value = context.evaluate(call.args[0]);\n            if (Array.isArray(value) || typeof value === \"string\") {\n                return value.length;\n            }\n            throw new Error(`invalid operand '${value}' for operator 'length'`);\n        }\n    },\n    coalesce: {\n        call: (context, call) => {\n            for (const childExpr of call.args) {\n                const value = context.evaluate(childExpr);\n                if (value !== null) {\n                    return value;\n                }\n            }\n            return null;\n        }\n    }\n};\nexports.MiscOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/MiscOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/ObjectOperators.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/ObjectOperators.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nvar LookupMode;\n(function (LookupMode) {\n    LookupMode[LookupMode[\"get\"] = 0] = \"get\";\n    LookupMode[LookupMode[\"has\"] = 1] = \"has\";\n})(LookupMode || (LookupMode = {}));\nfunction lookupMember(context, args, lookupMode) {\n    const memberName = context.evaluate(args[0]);\n    if (typeof memberName !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    const object = context.evaluate(args[1]);\n    if (object && typeof object === \"object\" && hasOwnProperty.call(object, memberName)) {\n        return lookupMode === LookupMode.get ? object[memberName] : true;\n    }\n    return lookupMode === LookupMode.get ? null : false;\n}\nconst operators = {\n    get: {\n        call: (context, call) => lookupMember(context, call.args, LookupMode.get)\n    },\n    has: {\n        call: (context, call) => lookupMember(context, call.args, LookupMode.has)\n    }\n};\nexports.ObjectOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/ObjectOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/StringOperators.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/StringOperators.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operators = {\n    concat: {\n        call: (context, call) => {\n            return \"\".concat(...call.args.map(a => String(context.evaluate(a))));\n        }\n    },\n    downcase: {\n        call: (context, call) => {\n            return String(context.evaluate(call.args[0])).toLocaleLowerCase();\n        }\n    },\n    upcase: {\n        call: (context, call) => {\n            return String(context.evaluate(call.args[0])).toLocaleUpperCase();\n        }\n    },\n    \"~=\": {\n        call: (context, call) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.indexOf(right) !== -1;\n            }\n            return false;\n        }\n    },\n    \"^=\": {\n        call: (context, call) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.startsWith(right);\n            }\n            return false;\n        }\n    },\n    \"$=\": {\n        call: (context, call) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.endsWith(right);\n            }\n            return false;\n        }\n    }\n};\nexports.StringOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/StringOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-datasource-protocol/lib/operators/TypeOperators.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@here/harp-datasource-protocol/lib/operators/TypeOperators.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operators = {\n    typeof: {\n        call: (context, call) => {\n            return typeof context.evaluate(call.args[0]);\n        }\n    }\n};\nexports.TypeOperators = operators;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-datasource-protocol/lib/operators/TypeOperators.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geojson-datasource/index-worker.js":
/*!********************************************************************!*\
  !*** ./node_modules/@here/harp-geojson-datasource/index-worker.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./lib/GeoJsonDecoder */ \"./node_modules/@here/harp-geojson-datasource/lib/GeoJsonDecoder.js\"));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geojson-datasource/index-worker.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geojson-datasource/lib/GeoJsonDecoder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@here/harp-geojson-datasource/lib/GeoJsonDecoder.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\nconst index_worker_1 = __webpack_require__(/*! @here/harp-mapview-decoder/index-worker */ \"./node_modules/@here/harp-mapview-decoder/index-worker.js\");\nconst TileDecoderService_1 = __webpack_require__(/*! @here/harp-mapview-decoder/lib/TileDecoderService */ \"./node_modules/@here/harp-mapview-decoder/lib/TileDecoderService.js\");\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst GeoJsonGeometryCreator_1 = __webpack_require__(/*! ./GeoJsonGeometryCreator */ \"./node_modules/@here/harp-geojson-datasource/lib/GeoJsonGeometryCreator.js\");\nconst logger = harp_utils_1.LoggerManager.instance.create(\"GeoJsonDecoder\");\n/**\n * `GeoJsonTileDecoder` is used to decode GeoJSON data and create geometries with additional\n * properties ready for use by [[GeoJsonTile]]. In case a custom styling is present in the GeoJSON\n * data, additional techniques will be created. Each decoded GeoJSON feature is represented as a\n * `Point`, a `Line` or a `Polygon`.\n *\n * The following techniques used for that:\n * <br/>\n * Point: `point` (THREE.PointsMaterial)\n * <br/>\n * Line: `solid-line` (SolidLineMaterial),\n * `segments` (THREE.LineBasicMaterial) - invisible lines for raycasting)\n * <br/>\n * Polygon: `polygon` (THREE.MeshBasicMaterial),\n * `segments` (THREE.LineBasicMaterial) - lines for styling polygon edges\n *\n * To improve performance, objects of the same type and technique are merged into the same geometry.\n */\nclass GeoJsonTileDecoder extends index_worker_1.ThemedTileDecoder {\n    /**\n     * Builds a `GeoJsonTileDecoder`.\n     */\n    constructor() {\n        super();\n    }\n    /**\n     *\n     *@override\n     */\n    connect() {\n        return Promise.resolve();\n    }\n    /**\n     * Read the data contained in the `data` parameter and returns a [[DecodedTile]].\n     *\n     * @param data The [[GeoJsonDataType]] containing all the features to be processed.\n     * @param tileKey The [[TileKey]] that identifies the tile.\n     * @param styleSetEvaluator The [[StyleSetEvaluator]] that reads the style and apply it to the\n     *      meshes.\n     * @param projection The current camera projection.\n     * @override\n     */\n    decodeThemedTile(data, tileKey, styleSetEvaluator, projection) {\n        const decoder = new GeoJsonDecoder(projection, styleSetEvaluator);\n        const decodedTile = decoder.getDecodedTile(tileKey, data);\n        return Promise.resolve(decodedTile);\n    }\n}\nexports.GeoJsonTileDecoder = GeoJsonTileDecoder;\n/**\n * Decoder for the [[GeoJsonDataSource]].\n */\nclass GeoJsonDecoder {\n    /**\n     * Default constructor.\n     *\n     * @param m_projection MapView projection\n     * @param m_styleSetEvaluator theme evaluator\n     */\n    constructor(m_projection, m_styleSetEvaluator) {\n        this.m_projection = m_projection;\n        this.m_styleSetEvaluator = m_styleSetEvaluator;\n        this.m_storeExtendedTags = true;\n    }\n    /**\n     * Returns a `DecodedTile` with geometries ([[GeoJsonGeometry]]) and techniques.\n     *\n     * @returns decoded tile\n     */\n    getDecodedTile(tileKey, data) {\n        const center = this.getTileCenter(tileKey);\n        const tileInfo = new harp_datasource_protocol_1.ExtendedTileInfo(tileKey, this.m_storeExtendedTags);\n        const tileInfoWriter = new harp_datasource_protocol_1.ExtendedTileInfoWriter(tileInfo, this.m_storeExtendedTags);\n        this.m_styleSetEvaluator.resetTechniques();\n        const extendedTile = {\n            info: tileInfo,\n            writer: tileInfoWriter\n        };\n        const geometries = GeoJsonGeometryCreator_1.GeoJsonGeometryCreator.createGeometries(data, center, this.m_projection, this.m_styleSetEvaluator, extendedTile);\n        const tile = {\n            geometries: geometries.geometries,\n            techniques: this.m_styleSetEvaluator.techniques,\n            tileInfo: this.getTileInfo(extendedTile)\n        };\n        if (geometries.poiGeometries.length > 0) {\n            tile.poiGeometries = geometries.poiGeometries;\n        }\n        if (geometries.textGeometries.length > 0) {\n            tile.textGeometries = geometries.textGeometries;\n        }\n        if (geometries.textPathGeometries.length > 0) {\n            tile.textPathGeometries = geometries.textPathGeometries;\n        }\n        // HARP-7419: TODO, support tile.pathGeometries, not currently needed, but may be needed\n        // in future.\n        return tile;\n    }\n    getTileCenter(tileKey) {\n        const geoBox = harp_geoutils_1.webMercatorTilingScheme.getGeoBox(tileKey);\n        const tileBounds = this.m_projection.projectBox(geoBox, new harp_geoutils_1.OrientedBox3());\n        return tileBounds.position;\n    }\n    getTileInfo(extendedTile) {\n        extendedTile.writer.finish();\n        return extendedTile.info;\n    }\n}\n/**\n * GeoJson tile decoder service.\n */\nclass GeoJsonTileDecoderService {\n    /**\n     * Register GeoJson tile decoder service based on [[GeoJsonTileDecoder]] service class in\n     * [[WorkerServiceManager]].\n     */\n    static start() {\n        index_worker_1.WorkerServiceManager.getInstance().register({\n            serviceType: \"geojson-tile-decoder\",\n            factory: (serviceId) => TileDecoderService_1.TileDecoderService.start(serviceId, new GeoJsonTileDecoder())\n        });\n    }\n}\nexports.GeoJsonTileDecoderService = GeoJsonTileDecoderService;\n/**\n * Starts a GeoJson decoder service.\n *\n * @deprecated Please use [[GeoJsonTileDecoderService.start]].\n */\nclass GeoJsonWorkerClient {\n    // TODO(HARP-3651): remove this class when clients are ready\n    constructor() {\n        logger.warn(\"GeoJsonWorkerClient class is deprecated, please use GeoJsonTileDecoderService.start\");\n        GeoJsonTileDecoderService.start();\n    }\n}\nexports.GeoJsonWorkerClient = GeoJsonWorkerClient;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geojson-datasource/lib/GeoJsonDecoder.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geojson-datasource/lib/GeoJsonGeometryCreator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@here/harp-geojson-datasource/lib/GeoJsonGeometryCreator.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\nconst Lines_1 = __webpack_require__(/*! @here/harp-lines/lib/Lines */ \"./node_modules/@here/harp-lines/lib/Lines.js\");\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst earcut_1 = __webpack_require__(/*! earcut */ \"./node_modules/earcut/src/earcut.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst GeoJsonParser_1 = __webpack_require__(/*! ./GeoJsonParser */ \"./node_modules/@here/harp-geojson-datasource/lib/GeoJsonParser.js\");\n/**\n * Store temporary variables needed for the creation of a mesh.\n */\nclass MeshBuffer {\n    constructor() {\n        this.positions = [];\n        this.indices = [];\n        this.groups = [];\n        this.outlineIndices = [];\n        this.edgeIndices = [];\n        /**\n         * Optional list of feature start indices. The indices point into the index attribute.\n         */\n        this.featureStarts = [];\n        /**\n         * Optional object containing the geojson properties defined by the end-user.\n         */\n        this.geojsonProperties = [];\n    }\n}\n/**\n * Bears the code creating the [[Tile]] geometries from a GeoJson.\n */\nclass GeoJsonGeometryCreator {\n    /**\n     * The method to call to create geometries from a GeoJson.\n     *\n     * @param geojson The GeoJson data.\n     * @param center The center of the tile.\n     * @param projection The projection in use.\n     * @param styleSetEvaluator The evaluator of the current [[GeoJsonDataSource]].\n     * @param extendedTile Tile information.\n     */\n    static createGeometries(geojson, center, projection, styleSetEvaluator, extendedTile) {\n        const buffers = {\n            geometryBuffer: new Map(),\n            textGeometryBuffer: new Map(),\n            textPathGeometryBuffer: new Map(),\n            poiGeometryBuffer: new Map()\n        };\n        GeoJsonParser_1.GeoJsonParser.processGeoJson(geojson, extendedTile, center, projection, styleSetEvaluator, buffers);\n        const geometries = {\n            geometries: [],\n            poiGeometries: [],\n            textGeometries: [],\n            textPathGeometries: []\n        };\n        const tileWorldBounds = new THREE.Box3();\n        const geoBox = harp_geoutils_1.webMercatorTilingScheme.getGeoBox(extendedTile.info.tileKey);\n        const tileBounds = projection.projectBox(geoBox, tileWorldBounds);\n        const tileCenter = new THREE.Vector3();\n        tileBounds.getCenter(tileCenter);\n        const tileWorldExtents = tileWorldBounds.max.sub(tileCenter).x;\n        buffers.geometryBuffer.forEach((geometryData, techniqueIndex) => {\n            switch (geometryData.type) {\n                case \"point\":\n                    geometries.geometries.push(this.createPointGeometry(geometryData, techniqueIndex));\n                    break;\n                case \"solid-line\":\n                case \"dashed-line\":\n                    geometries.geometries.push(this.createSolidLineGeometry(geometryData, techniqueIndex));\n                    break;\n                case \"polygon\":\n                    geometries.geometries.push(this.createPolygonGeometry(geometryData, techniqueIndex));\n                    break;\n                case \"outline\":\n                    geometries.geometries.push(this.createPolygonOutlineGeometry(geometryData, techniqueIndex, tileWorldExtents));\n                    break;\n                case \"segments\":\n                    geometries.geometries.push(this.createSegmentsGeometry(geometryData, techniqueIndex));\n                    break;\n            }\n        });\n        buffers.poiGeometryBuffer.forEach((geometryData, techniqueIndex) => {\n            geometries.poiGeometries.push(this.createPoiGeometry(geometryData, techniqueIndex));\n        });\n        buffers.textGeometryBuffer.forEach((geometryData, techniqueIndex) => {\n            geometries.textGeometries.push(this.createTextGeometry(geometryData, techniqueIndex));\n        });\n        buffers.textPathGeometryBuffer.forEach((geometryData, techniqueIndex) => {\n            this.createTextPathGeometries(geometryData, techniqueIndex, geometries);\n        });\n        return geometries;\n    }\n    static createPoiGeometry(geometryData, techniqueIndex) {\n        return {\n            positions: {\n                name: \"position\",\n                type: \"float\",\n                itemCount: 3,\n                buffer: new Float32Array(geometryData.points.vertices).buffer\n            },\n            technique: techniqueIndex,\n            texts: [0],\n            objInfos: geometryData.points.geojsonProperties\n        };\n    }\n    static createTextGeometry(geometryData, techniqueIndex) {\n        const labelProperty = geometryData.labelProperty;\n        const stringCatalog = geometryData.points.geojsonProperties.map((properties) => {\n            return properties[labelProperty].toString();\n        });\n        return {\n            positions: {\n                name: \"position\",\n                type: \"float\",\n                itemCount: 3,\n                buffer: new Float32Array(geometryData.points.vertices).buffer\n            },\n            technique: techniqueIndex,\n            texts: [0],\n            stringCatalog,\n            objInfos: geometryData.points.geojsonProperties\n        };\n    }\n    static createTextPathGeometries(geometryData, techniqueIndex, geometries) {\n        for (let i = 0; i < geometryData.lines.vertices.length; i++) {\n            const pathVertex = geometryData.lines.vertices[i];\n            const path = [];\n            path.push(...pathVertex);\n            const pathLengthSqr = harp_utils_1.Math2D.computeSquaredLineLength(path);\n            const properties = geometryData.lines.geojsonProperties[i];\n            const text = properties[geometryData.labelProperty].toString();\n            const geometry = {\n                technique: techniqueIndex,\n                path,\n                pathLengthSqr,\n                text,\n                objInfos: properties\n            };\n            geometries.textPathGeometries.push(geometry);\n        }\n    }\n    static createPointGeometry(geometryData, techniqueIndex) {\n        return {\n            type: harp_datasource_protocol_1.GeometryType.Point,\n            vertexAttributes: [\n                {\n                    name: \"position\",\n                    buffer: new Float32Array(geometryData.points.vertices).buffer,\n                    itemCount: 3,\n                    type: \"float\"\n                }\n            ],\n            groups: [\n                {\n                    start: 0,\n                    count: 0,\n                    technique: techniqueIndex\n                }\n            ],\n            objInfos: geometryData.points.geojsonProperties\n        };\n    }\n    static createSolidLineGeometry(geometryData, techniqueIndex) {\n        const lineCenter = new THREE.Vector3();\n        const lines = new Lines_1.LineGroup();\n        const positions = new Array();\n        for (const line of geometryData.lines.vertices) {\n            lines.add(lineCenter, line);\n            positions.push(...line);\n        }\n        return {\n            type: harp_datasource_protocol_1.GeometryType.SolidLine,\n            index: {\n                buffer: new Uint32Array(lines.indices).buffer,\n                itemCount: 1,\n                type: \"uint32\",\n                name: \"index\"\n            },\n            interleavedVertexAttributes: [\n                {\n                    type: \"float\",\n                    stride: lines.stride,\n                    buffer: new Float32Array(lines.vertices).buffer,\n                    attributes: lines.vertexAttributes\n                }\n            ],\n            vertexAttributes: [\n                {\n                    name: \"points\",\n                    buffer: new Float32Array(positions).buffer,\n                    itemCount: 2,\n                    type: \"float\"\n                }\n            ],\n            groups: [\n                {\n                    start: 0,\n                    count: 0,\n                    technique: techniqueIndex\n                }\n            ]\n        };\n    }\n    static createPolygonGeometry(geometryData, techniqueIndex) {\n        const meshBuffer = new MeshBuffer();\n        const { positions, indices, groups, featureStarts, geojsonProperties } = meshBuffer;\n        const holesVertices = [];\n        for (const polygon of geometryData.polygons) {\n            const baseVertex = positions.length / 3;\n            // Holes, if any.\n            if (polygon.holes.length) {\n                for (let i = 0; i < polygon.holes.length; i++) {\n                    if (i === polygon.holes.length - 1) {\n                        holesVertices[i] = polygon.vertices.slice(polygon.holes[i] * 3);\n                    }\n                    else {\n                        holesVertices[i] = polygon.vertices.slice(polygon.holes[i] * 3, polygon.holes[i + 1] * 3);\n                    }\n                }\n            }\n            featureStarts.push(indices.length / 3);\n            geojsonProperties.push(polygon.geojsonProperties);\n            for (let i = 0; i < polygon.vertices.length; i += 3) {\n                positions.push(polygon.vertices[i], polygon.vertices[i + 1], polygon.vertices[i + 2]);\n            }\n            const triangles = earcut_1.default(polygon.vertices, polygon.holes, 3);\n            for (let i = 0; i < triangles.length; i += 3) {\n                const v1 = triangles[i];\n                const v2 = triangles[i + 1];\n                const v3 = triangles[i + 2];\n                indices.push(v1 + baseVertex, v2 + baseVertex, v3 + baseVertex);\n            }\n        }\n        if (indices.length > 0) {\n            groups.push({\n                start: 0,\n                count: indices.length,\n                technique: techniqueIndex\n            });\n        }\n        const geometry = {\n            type: harp_datasource_protocol_1.GeometryType.Polygon,\n            vertexAttributes: [\n                {\n                    name: \"position\",\n                    buffer: new Float32Array(meshBuffer.positions).buffer,\n                    itemCount: 3,\n                    type: \"float\"\n                }\n            ],\n            groups: meshBuffer.groups\n        };\n        if (meshBuffer.indices.length > 0) {\n            geometry.index = {\n                name: \"index\",\n                buffer: new Uint32Array(meshBuffer.indices).buffer,\n                itemCount: 1,\n                type: \"uint32\"\n            };\n            geometry.featureStarts = meshBuffer.featureStarts;\n            geometry.objInfos = meshBuffer.geojsonProperties;\n        }\n        return geometry;\n    }\n    static createPolygonOutlineGeometry(geometryData, techniqueIndex, tileWorldExtents) {\n        const meshBuffer = new MeshBuffer();\n        const { indices, featureStarts, geojsonProperties } = meshBuffer;\n        let contour;\n        const holesVertices = [];\n        const solidOutline = new Lines_1.LineGroup();\n        const position = new Array();\n        for (const polygon of geometryData.polygons) {\n            contour = polygon.holes.length\n                ? polygon.vertices.slice(0, polygon.holes[0] * 3)\n                : polygon.vertices;\n            // External ring.\n            this.addOutlineVertices(contour, tileWorldExtents, solidOutline, position);\n            // Holes, if any.\n            if (polygon.holes.length) {\n                for (let i = 0; i < polygon.holes.length; i++) {\n                    if (i === polygon.holes.length - 1) {\n                        holesVertices[i] = polygon.vertices.slice(polygon.holes[i] * 3);\n                    }\n                    else {\n                        holesVertices[i] = polygon.vertices.slice(polygon.holes[i] * 3, polygon.holes[i + 1] * 3);\n                    }\n                    this.addOutlineVertices(holesVertices[i], tileWorldExtents, solidOutline, position);\n                }\n            }\n            featureStarts.push(indices.length / 3);\n            geojsonProperties.push(polygon.geojsonProperties);\n        }\n        const geometry = {\n            type: harp_datasource_protocol_1.GeometryType.SolidLine,\n            index: {\n                buffer: new Uint32Array(solidOutline.indices).buffer,\n                itemCount: 1,\n                type: \"uint32\",\n                name: \"index\"\n            },\n            interleavedVertexAttributes: [\n                {\n                    type: \"float\",\n                    stride: solidOutline.stride,\n                    buffer: new Float32Array(solidOutline.vertices).buffer,\n                    attributes: solidOutline.vertexAttributes\n                }\n            ],\n            vertexAttributes: [\n                {\n                    name: \"points\",\n                    buffer: new Float32Array(position).buffer,\n                    itemCount: 2,\n                    type: \"float\"\n                }\n            ],\n            groups: [\n                {\n                    start: 0,\n                    count: 0,\n                    technique: techniqueIndex\n                }\n            ]\n        };\n        if (meshBuffer.indices.length > 0) {\n            geometry.index = {\n                name: \"index\",\n                buffer: new Uint32Array(meshBuffer.indices).buffer,\n                itemCount: 1,\n                type: \"uint32\"\n            };\n            geometry.featureStarts = meshBuffer.featureStarts;\n            geometry.objInfos = meshBuffer.geojsonProperties;\n        }\n        return geometry;\n    }\n    static createSegmentsGeometry(geometryData, techniqueIndex) {\n        return {\n            type: harp_datasource_protocol_1.GeometryType.Line,\n            vertexAttributes: [\n                {\n                    name: \"position\",\n                    buffer: new Float32Array(geometryData.points.vertices).buffer,\n                    itemCount: 3,\n                    type: \"float\"\n                }\n            ],\n            groups: [\n                {\n                    start: 0,\n                    count: 0,\n                    technique: techniqueIndex\n                }\n            ]\n        };\n    }\n    static addOutlineVertices(contour, tileExtents, lines, buffer) {\n        const lineCenter = new THREE.Vector3();\n        let outline = [];\n        for (let i = 0; i < contour.length; i += 3) {\n            outline.push(contour[i], contour[i + 1], contour[i + 2]);\n            if ((this.isOnTileBorder(contour[i], tileExtents) &&\n                this.isOnTileBorder(contour[i + 3], tileExtents)) ||\n                (this.isOnTileBorder(contour[i + 1], tileExtents) &&\n                    this.isOnTileBorder(contour[i + 4], tileExtents))) {\n                lines.add(lineCenter, [...outline]);\n                buffer.push(...outline);\n                outline = [];\n            }\n        }\n        lines.add(lineCenter, [...outline]);\n        buffer.push(...outline);\n    }\n    static isOnTileBorder(value, extents) {\n        return extents - Math.abs(value) <= 0.01;\n    }\n}\nexports.GeoJsonGeometryCreator = GeoJsonGeometryCreator;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geojson-datasource/lib/GeoJsonGeometryCreator.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geojson-datasource/lib/GeoJsonParser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@here/harp-geojson-datasource/lib/GeoJsonParser.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst index_decoder_1 = __webpack_require__(/*! @here/harp-datasource-protocol/index-decoder */ \"./node_modules/@here/harp-datasource-protocol/index-decoder.js\");\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst Flattener_1 = __webpack_require__(/*! ./utils/Flattener */ \"./node_modules/@here/harp-geojson-datasource/lib/utils/Flattener.js\");\nconst logger = harp_utils_1.LoggerManager.instance.create(\"GeoJsonFeatureParser\");\n/**\n * Store temporary variables needed for the creation of a geometry.\n */\nclass GeometryData {\n    constructor() {\n        this.points = { vertices: [], geojsonProperties: [] };\n        this.lines = { vertices: [], geojsonProperties: [] };\n        this.polygons = [];\n    }\n}\nexports.GeometryData = GeometryData;\n/**\n * Class holding the GeoJson data parsing.\n */\nclass GeoJsonParser {\n    /**\n     * Method exposed to parse the incoming GeoJson data.\n     *\n     * @param geojson The javascript object obtained from the parsing of the GeoJSON.\n     * @param extendedTile The related [[ExtendedTile]].\n     * @param center The [[THREE.Vector3]] holding the coordinates of the [[Tile]] center.\n     * @param projection The current [[Projection]].\n     * @param styleSetEvaluator The [[StyleSetEvaluator]] associated to the tile's decoder.\n     * @param buffers The [[GeometryDataBuffers]].\n     */\n    static processGeoJson(geojson, extendedTile, center, projection, styleSetEvaluator, buffers) {\n        switch (geojson.type) {\n            case \"Feature\":\n                this.processFeature(geojson, extendedTile, center, projection, styleSetEvaluator, buffers);\n                break;\n            case \"FeatureCollection\":\n                geojson.features.forEach(feature => this.processFeature(feature, extendedTile, center, projection, styleSetEvaluator, buffers));\n                break;\n            default:\n                const collectionFeature = {\n                    type: \"Feature\",\n                    geometry: geojson\n                };\n                this.processFeature(collectionFeature, extendedTile, center, projection, styleSetEvaluator, buffers);\n                break;\n        }\n    }\n    static processFeature(feature, extendedTile, center, projection, styleSetEvaluator, buffers) {\n        // Skip features without geometries.\n        if (feature.geometry === null) {\n            return;\n        }\n        let techniqueIndices = [];\n        switch (feature.geometry.type) {\n            case \"Point\":\n                techniqueIndices = this.findTechniqueIndices(feature, \"point\", styleSetEvaluator);\n                for (const techniqueIndex of techniqueIndices) {\n                    const technique = styleSetEvaluator.techniques[techniqueIndex];\n                    if (harp_datasource_protocol_1.isPoiTechnique(technique)) {\n                        this.processPois([feature.geometry.coordinates], center, projection, techniqueIndex, buffers.poiGeometryBuffer, feature.properties);\n                    }\n                    else if (harp_datasource_protocol_1.isTextTechnique(technique)) {\n                        this.processPointLabels([feature.geometry.coordinates], center, projection, techniqueIndex, technique.label, buffers.textGeometryBuffer, feature.properties);\n                    }\n                    else if (harp_datasource_protocol_1.isCirclesTechnique(technique) || harp_datasource_protocol_1.isSquaresTechnique(technique)) {\n                        this.processPoints([feature.geometry.coordinates], center, projection, techniqueIndex, buffers.geometryBuffer, feature.properties);\n                    }\n                }\n                break;\n            case \"MultiPoint\":\n                techniqueIndices = this.findTechniqueIndices(feature, \"point\", styleSetEvaluator);\n                for (const techniqueIndex of techniqueIndices) {\n                    const technique = styleSetEvaluator.techniques[techniqueIndex];\n                    if (harp_datasource_protocol_1.isPoiTechnique(technique)) {\n                        this.processPois(feature.geometry.coordinates, center, projection, techniqueIndex, buffers.poiGeometryBuffer, feature.properties);\n                    }\n                    else if (harp_datasource_protocol_1.isTextTechnique(technique)) {\n                        this.processPointLabels(feature.geometry.coordinates, center, projection, techniqueIndex, technique.label, buffers.textGeometryBuffer, feature.properties);\n                    }\n                    else if (harp_datasource_protocol_1.isCirclesTechnique(technique) || harp_datasource_protocol_1.isSquaresTechnique(technique)) {\n                        this.processPoints(feature.geometry.coordinates, center, projection, techniqueIndex, buffers.geometryBuffer, feature.properties);\n                    }\n                }\n                break;\n            case \"LineString\":\n                techniqueIndices = this.findTechniqueIndices(feature, \"line\", styleSetEvaluator);\n                for (const techniqueIndex of techniqueIndices) {\n                    const technique = styleSetEvaluator.techniques[techniqueIndex];\n                    if (harp_datasource_protocol_1.isSolidLineTechnique(technique)) {\n                        this.processLines(extendedTile, [feature.geometry.coordinates], center, projection, techniqueIndex, styleSetEvaluator, buffers.geometryBuffer, feature.id, feature.properties);\n                    }\n                    else if (harp_datasource_protocol_1.isTextTechnique(technique)) {\n                        this.processLineLabels([feature.geometry.coordinates], center, projection, techniqueIndex, technique.label, buffers.textPathGeometryBuffer, feature.properties);\n                    }\n                }\n                break;\n            case \"MultiLineString\":\n                techniqueIndices = this.findTechniqueIndices(feature, \"line\", styleSetEvaluator);\n                for (const techniqueIndex of techniqueIndices) {\n                    const technique = styleSetEvaluator.techniques[techniqueIndex];\n                    if (harp_datasource_protocol_1.isSolidLineTechnique(technique)) {\n                        this.processLines(extendedTile, feature.geometry.coordinates, center, projection, techniqueIndex, styleSetEvaluator, buffers.geometryBuffer, feature.id, feature.properties);\n                    }\n                    else if (harp_datasource_protocol_1.isTextTechnique(technique)) {\n                        this.processLineLabels(feature.geometry.coordinates, center, projection, techniqueIndex, technique.label, buffers.textPathGeometryBuffer, feature.properties);\n                    }\n                }\n                break;\n            case \"Polygon\":\n                techniqueIndices = this.findTechniqueIndices(feature, \"polygon\", styleSetEvaluator);\n                for (const techniqueIndex of techniqueIndices) {\n                    const technique = styleSetEvaluator.techniques[techniqueIndex];\n                    if (harp_datasource_protocol_1.isFillTechnique(technique) || harp_datasource_protocol_1.isSolidLineTechnique(technique)) {\n                        this.processPolygons([feature.geometry.coordinates], center, projection, techniqueIndex, buffers.geometryBuffer, harp_datasource_protocol_1.isSolidLineTechnique(technique), feature.properties);\n                    }\n                    else if (harp_datasource_protocol_1.isTextTechnique(technique)) {\n                        this.processMultiPolygonLabels([feature.geometry.coordinates], center, projection, techniqueIndex, technique.label, buffers.textGeometryBuffer, feature.properties);\n                    }\n                }\n                break;\n            case \"MultiPolygon\":\n                techniqueIndices = this.findTechniqueIndices(feature, \"polygon\", styleSetEvaluator);\n                for (const techniqueIndex of techniqueIndices) {\n                    const technique = styleSetEvaluator.techniques[techniqueIndex];\n                    if (harp_datasource_protocol_1.isFillTechnique(technique) || harp_datasource_protocol_1.isSolidLineTechnique(technique)) {\n                        this.processPolygons(feature.geometry.coordinates, center, projection, techniqueIndex, buffers.geometryBuffer, harp_datasource_protocol_1.isSolidLineTechnique(technique), feature.properties);\n                    }\n                    else if (harp_datasource_protocol_1.isTextTechnique(technique)) {\n                        this.processMultiPolygonLabels(feature.geometry.coordinates, center, projection, techniqueIndex, technique.label, buffers.textGeometryBuffer, feature.properties);\n                    }\n                }\n                break;\n            case \"GeometryCollection\":\n                feature.geometry.geometries.forEach(geometry => {\n                    const collectionFeature = {\n                        type: \"Feature\",\n                        properties: feature.properties,\n                        geometry\n                    };\n                    this.processFeature(collectionFeature, extendedTile, center, projection, styleSetEvaluator, buffers);\n                });\n                break;\n            default:\n                logger.warn(\"Invalid GeoJSON data. Unknown geometry type.\");\n        }\n    }\n    static processPoints(pointLocations, center, projection, techniqueIndex, geometryBuffer, geojsonProperties = {}) {\n        const buffer = this.findOrCreateGeometryBuffer(techniqueIndex, geometryBuffer);\n        buffer.type = \"point\";\n        for (const location of pointLocations) {\n            this.m_cached_geoCoord.latitude = location[1];\n            this.m_cached_geoCoord.longitude = location[0];\n            projection.projectPoint(this.m_cached_geoCoord, this.m_cached_worldCoord).sub(center);\n            buffer.points.vertices.push(this.m_cached_worldCoord.x, this.m_cached_worldCoord.y, this.m_cached_worldCoord.z);\n            const pointIndex = buffer.points.vertices.length / 3 - 1;\n            buffer.points.geojsonProperties[pointIndex] = geojsonProperties;\n        }\n    }\n    static processLines(extendedTile, lines, center, projection, techniqueIndex, styleSetEvaluator, geometryBuffer, featureId, geojsonProperties = {}) {\n        const buffer = this.findOrCreateGeometryBuffer(techniqueIndex, geometryBuffer);\n        buffer.type = \"solid-line\";\n        for (const line of lines) {\n            buffer.lines.geojsonProperties.push(geojsonProperties);\n            const vertices = [];\n            for (const point of line) {\n                if (point === null || point[0] === null || point[0] === undefined) {\n                    return;\n                }\n                this.m_cached_geoCoord.latitude = point[1];\n                this.m_cached_geoCoord.longitude = point[0];\n                projection\n                    .projectPoint(this.m_cached_geoCoord, this.m_cached_worldCoord)\n                    .sub(center);\n                vertices.push(this.m_cached_worldCoord.x, this.m_cached_worldCoord.y, this.m_cached_worldCoord.z);\n            }\n            buffer.lines.vertices.push(vertices);\n        }\n        const featureDetails = {};\n        if (featureId !== undefined) {\n            featureDetails.featureId = featureId;\n        }\n        const env = new index_decoder_1.MapEnv(Object.assign({ type: \"line\" }, featureDetails));\n        const techniques = styleSetEvaluator.getMatchingTechniques(env);\n        const featureIdNumber = 0; //geojsonTile do not have an integer for the featureId. Use 0.\n        if (buffer.lines.vertices.length !== buffer.lines.geojsonProperties.length) {\n            logger.log(\"The amount of lines and the amount of geo properties has to be the same\");\n            return;\n        }\n        this.addTileInfo(extendedTile, techniques, buffer.lines.vertices, featureIdNumber, env, buffer.lines.geojsonProperties);\n    }\n    static processPolygons(multiPolygons, center, projection, techniqueIndex, geometryBuffer, isPolygonOutlines, geojsonProperties = {}) {\n        const buffer = this.findOrCreateGeometryBuffer(techniqueIndex, geometryBuffer);\n        buffer.type = isPolygonOutlines ? \"outline\" : \"polygon\";\n        for (const polygons of multiPolygons) {\n            const vertices = [];\n            const holes = [];\n            for (const polygon of polygons) {\n                if (polygon[0] === null || typeof polygon[0][0] !== \"number\") {\n                    return;\n                }\n                // the first polygon in the coordinates array is the main polygon the other ones\n                // are holes.\n                if (vertices.length) {\n                    holes.push(vertices.length / 3);\n                }\n                for (const point of polygon) {\n                    this.m_cached_geoCoord.latitude = point[1];\n                    this.m_cached_geoCoord.longitude = point[0];\n                    projection\n                        .projectPoint(this.m_cached_geoCoord, this.m_cached_worldCoord)\n                        .sub(center);\n                    // polygon issue fix\n                    if (point[0] >= 180) {\n                        this.m_cached_worldCoord.x = this.m_cached_worldCoord.x * -1;\n                    }\n                    vertices.push(this.m_cached_worldCoord.x, this.m_cached_worldCoord.y, this.m_cached_worldCoord.z);\n                }\n            }\n            buffer.polygons.push({ vertices, holes, geojsonProperties });\n        }\n    }\n    static processLineLabels(lines, center, projection, techniqueIndex, labelProperty, textPathGeometryBuffer, geojsonProperties = {}) {\n        const buffer = this.findOrCreateGeometryBuffer(techniqueIndex, textPathGeometryBuffer);\n        buffer.type = \"text-path\";\n        buffer.labelProperty = labelProperty;\n        const vertices = [];\n        for (const line of lines) {\n            for (const point of line) {\n                this.m_cached_geoCoord.latitude = point[1];\n                this.m_cached_geoCoord.longitude = point[0];\n                projection\n                    .projectPoint(this.m_cached_geoCoord, this.m_cached_worldCoord)\n                    .sub(center);\n                vertices.push(this.m_cached_worldCoord.x, this.m_cached_worldCoord.y, this.m_cached_worldCoord.z);\n            }\n        }\n        buffer.lines.vertices.push(vertices);\n        buffer.lines.geojsonProperties.push(geojsonProperties);\n    }\n    static processMultiPolygonLabels(multiPolygon, center, projection, techniqueIndex, labelProperty, textGeometryBuffer, geojsonProperties = {}) {\n        const buffer = this.findOrCreateGeometryBuffer(techniqueIndex, textGeometryBuffer);\n        buffer.type = \"point\";\n        buffer.labelProperty = labelProperty;\n        const points = { x: [], y: [], z: [] };\n        for (const polygons of multiPolygon) {\n            for (const polygon of polygons) {\n                for (const point of polygon) {\n                    this.m_cached_geoCoord.latitude = point[1];\n                    this.m_cached_geoCoord.longitude = point[0];\n                    projection\n                        .projectPoint(this.m_cached_geoCoord, this.m_cached_worldCoord)\n                        .sub(center);\n                    points.x.push(this.m_cached_worldCoord.x);\n                    points.y.push(this.m_cached_worldCoord.y);\n                    points.z.push(this.m_cached_worldCoord.z);\n                }\n            }\n        }\n        const length = points.x.length;\n        this.m_cached_worldCoord.setX(points.x.reduce((a, b) => a + b) / length);\n        this.m_cached_worldCoord.setY(points.y.reduce((a, b) => a + b) / length);\n        this.m_cached_worldCoord.setZ(points.z.reduce((a, b) => a + b) / length);\n        buffer.points.vertices.push(this.m_cached_worldCoord.x, this.m_cached_worldCoord.y, this.m_cached_worldCoord.z);\n        buffer.points.geojsonProperties.push(geojsonProperties);\n    }\n    static processPointLabels(textLocations, center, projection, techniqueIndex, labelProperty, textGeometryBuffer, geojsonProperties = {}) {\n        const buffer = this.findOrCreateGeometryBuffer(techniqueIndex, textGeometryBuffer);\n        buffer.type = \"text\";\n        buffer.labelProperty = labelProperty;\n        for (const location of textLocations) {\n            this.m_cached_geoCoord.latitude = location[1];\n            this.m_cached_geoCoord.longitude = location[0];\n            projection.projectPoint(this.m_cached_geoCoord, this.m_cached_worldCoord).sub(center);\n            buffer.points.vertices.push(this.m_cached_worldCoord.x, this.m_cached_worldCoord.y, this.m_cached_worldCoord.z);\n            const pointIndex = buffer.points.vertices.length / 3 - 1;\n            buffer.points.geojsonProperties[pointIndex] = geojsonProperties;\n        }\n    }\n    static processPois(poiLocations, center, projection, techniqueIndex, poiGeometryBuffer, geojsonProperties = {}) {\n        const buffer = this.findOrCreateGeometryBuffer(techniqueIndex, poiGeometryBuffer);\n        buffer.type = \"poi\";\n        for (const location of poiLocations) {\n            this.m_cached_geoCoord.latitude = location[1];\n            this.m_cached_geoCoord.longitude = location[0];\n            projection.projectPoint(this.m_cached_geoCoord, this.m_cached_worldCoord).sub(center);\n            buffer.points.vertices.push(this.m_cached_worldCoord.x, this.m_cached_worldCoord.y, this.m_cached_worldCoord.z);\n            const pointIndex = buffer.points.vertices.length / 3 - 1;\n            buffer.points.geojsonProperties[pointIndex] = geojsonProperties;\n        }\n    }\n    static findTechniqueIndices(feature, envType, styleSetEvaluator) {\n        const featureDetails = Flattener_1.Flattener.flatten(feature.properties, \"properties\");\n        featureDetails.featureId = feature.id;\n        const env = new index_decoder_1.MapEnv(Object.assign({ type: envType }, featureDetails));\n        const techniques = styleSetEvaluator.getMatchingTechniques(env);\n        return techniques.map(technique => {\n            return technique._index;\n        });\n    }\n    static addTileInfo(extendedTile, techniques, lines, featureId, env, geojsonProperties) {\n        if (geojsonProperties.length !== lines.length) {\n            logger.error(\"geojsonProperties and lines should have the same lenght\");\n            return;\n        }\n        const tileInfoWriter = extendedTile.writer;\n        for (const technique of techniques) {\n            if (technique === undefined) {\n                continue;\n            }\n            const infoTileTechniqueIndex = tileInfoWriter.addTechnique(technique);\n            let currentGeoJsonIndex = 0;\n            for (const aLine of lines) {\n                // add the geoJsonProperties for this line. undefined values are accepted as some\n                // line may not have any data.\n                const lineFeatureGroup = extendedTile.info.lineGroup;\n                if (lineFeatureGroup.userData === undefined) {\n                    lineFeatureGroup.userData = [geojsonProperties[currentGeoJsonIndex]];\n                }\n                else {\n                    lineFeatureGroup.userData.push(geojsonProperties[currentGeoJsonIndex]);\n                }\n                currentGeoJsonIndex++;\n                const featureText = harp_datasource_protocol_1.ExtendedTileInfo.getFeatureText(env, technique);\n                tileInfoWriter.addFeature(extendedTile.info.lineGroup, env, featureId, featureText, infoTileTechniqueIndex, harp_datasource_protocol_1.FeatureGroupType.Line);\n                tileInfoWriter.addFeaturePoints(extendedTile.info.lineGroup, aLine);\n            }\n            if (this.m_gatherRoadSegments) {\n                const segmentId = env.lookup(\"segmentId\");\n                if (segmentId !== undefined) {\n                    const startOffset = env.lookup(\"startOffset\");\n                    const endOffset = env.lookup(\"endOffset\");\n                    tileInfoWriter.addRoadSegments(extendedTile.info.lineGroup, segmentId, startOffset !== undefined ? startOffset : 0, endOffset !== undefined ? endOffset : 1);\n                }\n            }\n        }\n    }\n    static findOrCreateGeometryBuffer(index, geometryBuffer) {\n        let buffer = geometryBuffer.get(index);\n        if (buffer !== undefined) {\n            return buffer;\n        }\n        buffer = new GeometryData();\n        geometryBuffer.set(index, buffer);\n        return buffer;\n    }\n}\nexports.GeoJsonParser = GeoJsonParser;\nGeoJsonParser.m_cached_worldCoord = new THREE.Vector3();\nGeoJsonParser.m_cached_geoCoord = new harp_geoutils_1.GeoCoordinates(0, 0);\nGeoJsonParser.m_gatherRoadSegments = true;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geojson-datasource/lib/GeoJsonParser.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geojson-datasource/lib/utils/Flattener.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@here/harp-geojson-datasource/lib/utils/Flattener.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns a depthless object from a JSON-like object, via the method `flatten`. Traditional vanilla\n * JS writing is used to create the new properties representing the previously nested values: dots\n * (\".\") for objects and brackets (\"[]\") with their indices for arrays.\n *\n * @example\n * ```typescript\n * const jsonLike = {\n *     \"number\": 2,\n *     \"string\": \"\",\n *     \"boolean\": false,\n *     \"null\": null,\n *     \"nestedObject\": {\n *         \"foo\": null,\n *         \"array\": [57]\n *     },\n *     \"array\": [33, { bar: \"foo\" }]\n * };\n *\n * const flattenedJsonLike = Flattener.flatten(jsonLike, \"properties\");\n *\n * // `jsonLike` is not modified. `flattenedJsonLike` is as follows:\n * {\n *     \"properties.number\": 2,\n *     \"properties.string\": \"\",\n *     \"properties.boolean\": false,\n *     \"properties.null\": null,\n *     \"properties.nestedObject.foo\": null,\n *     \"properties.nestedObject.array[0]\": 57,\n *     \"properties.array[0]\": 33,\n *     \"properties.array[1].bar\": \"foo\"\n * }\n * ```\n */\nclass Flattener {\n    /**\n     * The entry point of the `Flattener`.\n     *\n     * @param model The original object whose fields will be flatten in another one.\n     * @param prefix An optional prefix for the flattened properties.\n     */\n    static flatten(model, prefix = \"\") {\n        const result = {};\n        this.processObject(model, result, prefix);\n        return result;\n    }\n    /**\n     * Loops through the properties of an object and appends the string `\".property\"` to the path,\n     * then further calls `Flattener.processValue` on each value of this object.\n     *\n     * @param object The object to flatten.\n     * @param target The empty object created in `this.m_result`, and being filled.\n     * @param path The path to extend with this object nesting level.\n     */\n    static processObject(object, target, path) {\n        for (const property in object) {\n            if (object[property] !== undefined) {\n                const prefix = path.length ? path + \".\" + property : property;\n                this.processValue(object[property], target, prefix);\n            }\n        }\n    }\n    /**\n     * Loops through the array and appends the string `\"[index]\"` to the path, then further calls\n     * `Flattener.processValue` on each element of the array.\n     *\n     * @param array The array to flatten.\n     * @param target The empty object created in `this.m_result`, and being filled.\n     * @param path The path to extend with this array nesting level.\n     */\n    static processArray(array, target, path) {\n        for (let index = 0; index < array.length; index++) {\n            const prefix = `${path}[${index}]`;\n            this.processValue(array[index], target, prefix);\n        }\n    }\n    /**\n     * Writes the source value, or in case it is an array or an object, dispatches the flattening to\n     * the relevant handlers.\n     *\n     * @param value The value to flatten. Can be any value supported by the JSON format.\n     * @param target The empty object created in `this.m_result`, and being filled.\n     * @param key The name of the property to write, prefixed with the upper nesting levels.\n     */\n    static processValue(value, target, key) {\n        if ([\"number\", \"string\", \"boolean\"].indexOf(typeof value) > -1 || value === null) {\n            target[key] = value;\n        }\n        else if (Array.isArray(value)) {\n            this.processArray(value, target, key);\n        }\n        else {\n            this.processObject(value, target, key);\n        }\n    }\n}\nexports.Flattener = Flattener;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geojson-datasource/lib/utils/Flattener.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\nconst three_1 = __webpack_require__(/*! three */ \"three\");\nconst SubdivisionModifier_1 = __webpack_require__(/*! ./SubdivisionModifier */ \"./node_modules/@here/harp-geometry/lib/SubdivisionModifier.js\");\nconst VERTEX_POSITION_CACHE = [new three_1.Vector3(), new three_1.Vector3(), new three_1.Vector3()];\n/**\n * The [[SphericalGeometrySubdivisionModifier]] subdivides triangle mesh geometries positioned\n * on the surface of a sphere centered at `(0, 0, 0)`.\n */\nclass SphericalGeometrySubdivisionModifier extends SubdivisionModifier_1.SubdivisionModifier {\n    /**\n     * Constructs a new [[SphericalGeometrySubdivisionModifier]].\n     *\n     * @param angle The maximum angle in radians between two vertices and the origin.\n     * @param projection The projection that defines the world space of this geometry.\n     */\n    constructor(angle, projection = harp_geoutils_1.sphereProjection) {\n        super();\n        this.angle = angle;\n        this.projection = projection;\n    }\n    /** @override */\n    shouldSplitTriangle(a, b, c) {\n        const aa = harp_geoutils_1.sphereProjection.reprojectPoint(this.projection, a, VERTEX_POSITION_CACHE[0]);\n        const bb = harp_geoutils_1.sphereProjection.reprojectPoint(this.projection, b, VERTEX_POSITION_CACHE[1]);\n        const cc = harp_geoutils_1.sphereProjection.reprojectPoint(this.projection, c, VERTEX_POSITION_CACHE[2]);\n        const alpha = aa.angleTo(bb);\n        const beta = bb.angleTo(cc);\n        const gamma = cc.angleTo(aa);\n        // find the maximum angle\n        const m = Math.max(alpha, Math.max(beta, gamma));\n        // split the triangle if needed.\n        if (m < this.angle) {\n            return undefined;\n        }\n        if (m === alpha) {\n            return 0;\n        }\n        else if (m === beta) {\n            return 1;\n        }\n        else if (m === gamma) {\n            return 2;\n        }\n        throw new Error(\"failed to split triangle\");\n    }\n}\nexports.SphericalGeometrySubdivisionModifier = SphericalGeometrySubdivisionModifier;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geometry/lib/SubdivisionModifier.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@here/harp-geometry/lib/SubdivisionModifier.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = __webpack_require__(/*! three */ \"three\");\nconst tmpVectorA = new three_1.Vector3();\nconst tmpVectorB = new three_1.Vector3();\nconst tmpVectorC = new three_1.Vector3();\n/**\n * The [[SubdivisionModifier]] subdivides triangle mesh geometries.\n */\nclass SubdivisionModifier {\n    /**\n     * Constructs a new [[SubdivisionModifier]].\n     */\n    constructor() {\n        // nothing to do\n    }\n    /**\n     * Subdivides the faces of the given [[THREE.BufferGeometry]].\n     *\n     * This method modifies (in-place) the vertices and the faces of the geometry.\n     * Please note that only the vertex position and their UV coordinates are subdivided.\n     * Normals, vertex colors and other attributes are left unmodified.\n     *\n     * @param geometry The [[THREE.BufferGeometry]] to subdivide.\n     */\n    modify(geometry) {\n        const positionAttr = geometry.getAttribute(\"position\");\n        const position = Array.from(positionAttr.array);\n        const uvAttr = geometry.getAttribute(\"uv\");\n        const uv = uvAttr !== undefined ? Array.from(uvAttr.array) : undefined;\n        const edgeAttr = geometry.getAttribute(\"edge\");\n        const edge = edgeAttr !== undefined ? Array.from(edgeAttr.array) : undefined;\n        const wallAttr = geometry.getAttribute(\"wall\");\n        const wall = wallAttr !== undefined ? Array.from(wallAttr.array) : undefined;\n        const indexAttr = geometry.getIndex();\n        const indices = Array.from(indexAttr.array);\n        // A cache containing the indices of the vertices added\n        // when subdiving the faces of the geometry.\n        const cache = new Map();\n        /**\n         * Returns the index of the vertex positioned in the middle of the given vertices.\n         */\n        function middleVertex(i, j) {\n            // Build a unique `key` for the pair of indices `(i, j)`.\n            const key = `${Math.min(i, j)}_${Math.max(i, j)}`;\n            const h = cache.get(key);\n            if (h !== undefined) {\n                // Nothing to do, a vertex in the middle of (i, j) was already created.\n                return h;\n            }\n            // The position of the new vertex.\n            tmpVectorA.set(position[i * 3], position[i * 3 + 1], position[i * 3 + 2]);\n            tmpVectorB.set(position[j * 3], position[j * 3 + 1], position[j * 3 + 2]);\n            tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n            // The index of the new vertex.\n            const index = position.length / 3;\n            position.push(...tmpVectorC.toArray());\n            // Cache the position of the new vertex.\n            cache.set(key, index);\n            // The uvs of the new vertex.\n            if (uv !== undefined) {\n                tmpVectorA.set(uv[i * 2], uv[i * 2 + 1], 0);\n                tmpVectorB.set(uv[j * 2], uv[j * 2 + 1], 0);\n                tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n                uv.push(tmpVectorC.x, tmpVectorC.y);\n            }\n            // The edge and wall attributes of the new vertex.\n            // If a new vertex has been introduced between i and j, connect the elements\n            // accordingly.\n            if (edge !== undefined) {\n                if (edge[i] === j) {\n                    edge.push(j);\n                    edge[i] = index;\n                }\n                else if (edge[j] === i) {\n                    edge.push(i);\n                    edge[j] = index;\n                }\n                else {\n                    edge.push(-1);\n                }\n            }\n            if (wall !== undefined) {\n                if (wall[i] === j) {\n                    wall.push(j);\n                    wall[i] = index;\n                }\n                else if (wall[j] === i) {\n                    wall.push(i);\n                    wall[j] = index;\n                }\n                else {\n                    wall.push(-1);\n                }\n            }\n            return index;\n        }\n        const newIndices = [];\n        while (indices.length >= 3) {\n            const v0 = indices.shift();\n            const v1 = indices.shift();\n            const v2 = indices.shift();\n            tmpVectorA.set(position[v0 * 3], position[v0 * 3 + 1], position[v0 * 3 + 2]);\n            tmpVectorB.set(position[v1 * 3], position[v1 * 3 + 1], position[v1 * 3 + 2]);\n            tmpVectorC.set(position[v2 * 3], position[v2 * 3 + 1], position[v2 * 3 + 2]);\n            const edgeToSplit = this.shouldSplitTriangle(tmpVectorA, tmpVectorB, tmpVectorC);\n            switch (edgeToSplit) {\n                case 0: {\n                    const v3 = middleVertex(v0, v1);\n                    indices.push(v0, v3, v2, v3, v1, v2);\n                    break;\n                }\n                case 1: {\n                    const v3 = middleVertex(v1, v2);\n                    indices.push(v0, v1, v3, v0, v3, v2);\n                    break;\n                }\n                case 2: {\n                    const v3 = middleVertex(v2, v0);\n                    indices.push(v0, v1, v3, v3, v1, v2);\n                    break;\n                }\n                case undefined: {\n                    newIndices.push(v0, v1, v2);\n                    break;\n                }\n                default:\n                    throw new Error(\"failed to subdivide the given geometry\");\n            }\n        }\n        positionAttr.array = new Float32Array(position);\n        positionAttr.count = position.length / positionAttr.itemSize;\n        positionAttr.needsUpdate = true;\n        geometry.setIndex(newIndices);\n        if (uv !== undefined) {\n            uvAttr.array = new Float32Array(uv);\n            uvAttr.count = uv.length / uvAttr.itemSize;\n            uvAttr.needsUpdate = true;\n        }\n        if (edge !== undefined) {\n            edgeAttr.array = new Float32Array(edge);\n            edgeAttr.count = edge.length / edgeAttr.itemSize;\n            edgeAttr.needsUpdate = true;\n        }\n        return geometry;\n    }\n}\nexports.SubdivisionModifier = SubdivisionModifier;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geometry/lib/SubdivisionModifier.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./lib/coordinates/GeoBox */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoBox.js\"));\n__export(__webpack_require__(/*! ./lib/coordinates/GeoCoordinatesLike */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinatesLike.js\"));\n__export(__webpack_require__(/*! ./lib/coordinates/GeoCoordinates */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js\"));\n__export(__webpack_require__(/*! ./lib/coordinates/GeoPointLike */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoPointLike.js\"));\n__export(__webpack_require__(/*! ./lib/coordinates/LatLngLike */ \"./node_modules/@here/harp-geoutils/lib/coordinates/LatLngLike.js\"));\n__export(__webpack_require__(/*! ./lib/projection/EarthConstants */ \"./node_modules/@here/harp-geoutils/lib/projection/EarthConstants.js\"));\n__export(__webpack_require__(/*! ./lib/projection/EquirectangularProjection */ \"./node_modules/@here/harp-geoutils/lib/projection/EquirectangularProjection.js\"));\n__export(__webpack_require__(/*! ./lib/projection/IdentityProjection */ \"./node_modules/@here/harp-geoutils/lib/projection/IdentityProjection.js\"));\n__export(__webpack_require__(/*! ./lib/projection/Projection */ \"./node_modules/@here/harp-geoutils/lib/projection/Projection.js\"));\n__export(__webpack_require__(/*! ./lib/projection/MercatorProjection */ \"./node_modules/@here/harp-geoutils/lib/projection/MercatorProjection.js\"));\n__export(__webpack_require__(/*! ./lib/projection/TransverseMercatorProjection */ \"./node_modules/@here/harp-geoutils/lib/projection/TransverseMercatorProjection.js\"));\n__export(__webpack_require__(/*! ./lib/projection/SphereProjection */ \"./node_modules/@here/harp-geoutils/lib/projection/SphereProjection.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/FlatTileBoundingBoxGenerator */ \"./node_modules/@here/harp-geoutils/lib/tiling/FlatTileBoundingBoxGenerator.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/HalfQuadTreeSubdivisionScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/HalfQuadTreeSubdivisionScheme.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/QuadTreeSubdivisionScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/QuadTree */ \"./node_modules/@here/harp-geoutils/lib/tiling/QuadTree.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/SubTiles */ \"./node_modules/@here/harp-geoutils/lib/tiling/SubTiles.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/TileKey */ \"./node_modules/@here/harp-geoutils/lib/tiling/TileKey.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/TileKeyUtils */ \"./node_modules/@here/harp-geoutils/lib/tiling/TileKeyUtils.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/TileTreeTraverse */ \"./node_modules/@here/harp-geoutils/lib/tiling/TileTreeTraverse.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/TilingScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/TilingScheme.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/HereTilingScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/HereTilingScheme.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/WebMercatorTilingScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/WebMercatorTilingScheme.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/MercatorTilingScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/MercatorTilingScheme.js\"));\n__export(__webpack_require__(/*! ./lib/tiling/PolarTilingScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/PolarTilingScheme.js\"));\n__export(__webpack_require__(/*! ./lib/math/Vector3Like */ \"./node_modules/@here/harp-geoutils/lib/math/Vector3Like.js\"));\n__export(__webpack_require__(/*! ./lib/math/Box3Like */ \"./node_modules/@here/harp-geoutils/lib/math/Box3Like.js\"));\n__export(__webpack_require__(/*! ./lib/math/OrientedBox3Like */ \"./node_modules/@here/harp-geoutils/lib/math/OrientedBox3Like.js\"));\n__export(__webpack_require__(/*! ./lib/math/MathUtils */ \"./node_modules/@here/harp-geoutils/lib/math/MathUtils.js\"));\n__export(__webpack_require__(/*! ./lib/math/TransformLike */ \"./node_modules/@here/harp-geoutils/lib/math/TransformLike.js\"));\n__export(__webpack_require__(/*! ./lib/math/OrientedBox3 */ \"./node_modules/@here/harp-geoutils/lib/math/OrientedBox3.js\"));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/index.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/coordinates/GeoBox.js":
/*!********************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/coordinates/GeoBox.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GeoCoordinates_1 = __webpack_require__(/*! ./GeoCoordinates */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\n/**\n * `GeoBox` is used to represent a bounding box in geo coordinates.\n */\nclass GeoBox {\n    /**\n     * Constructs a new `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    constructor(southWest, northEast) {\n        this.southWest = southWest;\n        this.northEast = northEast;\n    }\n    /**\n     * Returns a `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    static fromCoordinates(southWest, northEast) {\n        return new GeoBox(southWest, northEast);\n    }\n    /**\n     * Returns the minimum altitude or `undefined`.\n     */\n    get minAltitude() {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.min(this.southWest.altitude, this.northEast.altitude);\n    }\n    /**\n     * Returns the maximum altitude or `undefined`.\n     */\n    get maxAltitude() {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.max(this.southWest.altitude, this.northEast.altitude);\n    }\n    /**\n     * Returns the south latitude in degrees of this `GeoBox`.\n     */\n    get south() {\n        return this.southWest.latitude;\n    }\n    /**\n     * Returns the north altitude in degrees of this `GeoBox`.\n     */\n    get north() {\n        return this.northEast.latitude;\n    }\n    /**\n     * Returns the west longitude in degrees of this `GeoBox`.\n     */\n    get west() {\n        return this.southWest.longitude;\n    }\n    /**\n     * Returns the east longitude in degrees of this `GeoBox`.\n     */\n    get east() {\n        return this.northEast.longitude;\n    }\n    /**\n     * Returns the center of this `GeoBox`.\n     */\n    get center() {\n        const latitude = (this.south + this.north) * 0.5;\n        const { west, east } = this;\n        const { minAltitude, altitudeSpan } = this;\n        let altitude;\n        if (minAltitude !== undefined && altitudeSpan !== undefined) {\n            altitude = minAltitude + altitudeSpan * 0.5;\n        }\n        if (west < east) {\n            return new GeoCoordinates_1.GeoCoordinates(latitude, (west + east) * 0.5, altitude);\n        }\n        let longitude = (360 + east + west) * 0.5;\n        if (longitude > 360) {\n            longitude -= 360;\n        }\n        return new GeoCoordinates_1.GeoCoordinates(latitude, longitude, altitude);\n    }\n    /**\n     * Returns the latitude span in radians.\n     */\n    get latitudeSpanInRadians() {\n        return THREE.Math.degToRad(this.latitudeSpan);\n    }\n    /**\n     * Returns the longitude span in radians.\n     */\n    get longitudeSpanInRadians() {\n        return THREE.Math.degToRad(this.longitudeSpan);\n    }\n    /**\n     * Returns the latitude span in degrees.\n     */\n    get latitudeSpan() {\n        return this.north - this.south;\n    }\n    get altitudeSpan() {\n        if (this.maxAltitude === undefined || this.minAltitude === undefined) {\n            return undefined;\n        }\n        return this.maxAltitude - this.minAltitude;\n    }\n    /**\n     * Returns the longitude span in degrees.\n     */\n    get longitudeSpan() {\n        let width = this.northEast.longitude - this.southWest.longitude;\n        if (width < 0) {\n            width += 360;\n        }\n        return width;\n    }\n    /**\n     * Returns the latitude span in degrees.\n     * @deprecated Use [[latitudeSpan]] instead.\n     */\n    get latitudeSpanInDegrees() {\n        return this.latitudeSpan;\n    }\n    /**\n     * Returns the longitude span in degrees.\n     * @deprecated Use [[longitudeSpan]] instead.\n     */\n    get longitudeSpanInDegrees() {\n        return this.longitudeSpan;\n    }\n    /**\n     * Returns `true` if the given geo coordinates are contained in this `GeoBox`.\n     *\n     * @param point The geo coordinates.\n     */\n    contains(point) {\n        if (point.altitude === undefined ||\n            this.minAltitude === undefined ||\n            this.maxAltitude === undefined) {\n            return this.containsHelper(point);\n        }\n        const isFlat = this.minAltitude === this.maxAltitude;\n        const isSameAltitude = this.minAltitude === point.altitude;\n        const isWithinAltitudeRange = this.minAltitude <= point.altitude && this.maxAltitude > point.altitude;\n        // If box is flat, we should check the altitude and containment,\n        // otherwise we should check also altitude difference where we consider\n        // point to be inside if alt is from [m_minAltitude, m_maxAltitude) range!\n        if (isFlat ? isSameAltitude : isWithinAltitudeRange) {\n            return this.containsHelper(point);\n        }\n        return false;\n    }\n    /**\n     * Clones this `GeoBox` instance.\n     */\n    clone() {\n        return new GeoBox(this.southWest, this.northEast);\n    }\n    /**\n     * Update the bounding box by considering a given point.\n     *\n     * @param point The point that may expand the bounding box.\n     */\n    growToContain(point) {\n        this.southWest.latitude = Math.min(this.southWest.latitude, point.latitude);\n        this.southWest.longitude = Math.min(this.southWest.longitude, point.longitude);\n        this.southWest.altitude =\n            this.southWest.altitude !== undefined && point.altitude !== undefined\n                ? Math.min(this.southWest.altitude, point.altitude)\n                : this.southWest.altitude !== undefined\n                    ? this.southWest.altitude\n                    : point.altitude !== undefined\n                        ? point.altitude\n                        : undefined;\n        this.northEast.latitude = Math.max(this.northEast.latitude, point.latitude);\n        this.northEast.longitude = Math.max(this.northEast.longitude, point.longitude);\n        this.northEast.altitude =\n            this.northEast.altitude !== undefined && point.altitude !== undefined\n                ? Math.max(this.northEast.altitude, point.altitude)\n                : this.northEast.altitude !== undefined\n                    ? this.northEast.altitude\n                    : point.altitude !== undefined\n                        ? point.altitude\n                        : undefined;\n    }\n    containsHelper(point) {\n        if (point.latitude < this.southWest.latitude || point.latitude >= this.northEast.latitude) {\n            return false;\n        }\n        const { west, east } = this;\n        if (east > west) {\n            return point.longitude >= west && point.longitude < east;\n        }\n        return point.longitude > east || point.longitude <= west;\n    }\n}\nexports.GeoBox = GeoBox;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/coordinates/GeoBox.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GeoCoordinatesLike_1 = __webpack_require__(/*! ./GeoCoordinatesLike */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinatesLike.js\");\nconst GeoPointLike_1 = __webpack_require__(/*! ./GeoPointLike */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoPointLike.js\");\nconst LatLngLike_1 = __webpack_require__(/*! ./LatLngLike */ \"./node_modules/@here/harp-geoutils/lib/coordinates/LatLngLike.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\n/**\n * `GeoCoordinates` is used to represent geo positions.\n */\nclass GeoCoordinates {\n    /**\n     * Creates a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    constructor(latitude, longitude, altitude) {\n        this.latitude = latitude;\n        this.longitude = longitude;\n        this.altitude = altitude;\n    }\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    static fromDegrees(latitude, longitude, altitude) {\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in radians.\n     * @param longitude Longitude in radians.\n     * @param altitude Altitude in meters.\n     */\n    static fromRadians(latitude, longitude, altitude) {\n        return new GeoCoordinates(THREE.Math.radToDeg(latitude), THREE.Math.radToDeg(longitude), altitude);\n    }\n    /**\n     * Creates a [[GeoCoordinates]] from a [[LatLngLike]] literal.\n     * ```typescript\n     * const center = { lat: 53.3, lng: 13.4 };\n     * mapView.geoCenter = GeoCoordinates.fromLatLng(center);\n     * ```\n     * @param latLng A [[LatLngLike]] object literal.\n     */\n    static fromLatLng(latLng) {\n        return new GeoCoordinates(latLng.lat, latLng.lng);\n    }\n    /**\n     * Creates a [[GeoCoordinates]] from a [[GeoPointLike]] tuple.\n     *\n     * Example:\n     * ```typescript\n     * mapView.geoCenter = GeoCoordinates.fromGeoPoint([longitude, latitude]);\n     *\n     * let geoCoords: number[] = ...;\n     *\n     * if (isGeoPointLike(geoCoords)) {\n     *     const p = GeoCoordinates.fromGeoPoint(geoCoords);\n     * }\n     * ```\n     * @param geoPoint An [[Array]] of at least two elements following the order\n     * longitude, latitude, altitude.\n     */\n    static fromGeoPoint(geoPoint) {\n        return new GeoCoordinates(geoPoint[1], geoPoint[0], geoPoint[2]);\n    }\n    /**\n     * Creates a [[GeoCoordinates]] from different types of geo coordinate objects.\n     *\n     * Example:\n     * ```typescript\n     * const fromGeoPointLike = GeoCoordinates.fromObject([longitude, latitude]);\n     * const fromGeoCoordinateLike = GeoCoordinates.fromObject({ longitude, latitude });\n     * const fromGeoCoordinate = GeoCoordinates.fromObject(new GeoCoordinates(latitude, longitude));\n     * const fromLatLngLike = GeoCoordinates.fromObject({ lat: latitude , lng: longitude });\n     * ```\n     *\n     * @param geoPoint Either [[GeoPointLike]], [[GeoCoordinatesLike]]\n     * or [[LatLngLike]] object literal.\n     */\n    static fromObject(geoPoint) {\n        if (GeoPointLike_1.isGeoPointLike(geoPoint)) {\n            return GeoCoordinates.fromGeoPoint(geoPoint);\n        }\n        else if (GeoCoordinatesLike_1.isGeoCoordinatesLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(geoPoint.latitude, geoPoint.longitude, geoPoint.altitude);\n        }\n        else if (LatLngLike_1.isLatLngLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(geoPoint.lat, geoPoint.lng);\n        }\n        throw new Error(\"Invalid input coordinate format.\");\n    }\n    /**\n     * Returns the latitude in radians.\n     */\n    get latitudeInRadians() {\n        return THREE.Math.degToRad(this.latitude);\n    }\n    /**\n     * Returns the longitude in radians.\n     */\n    get longitudeInRadians() {\n        return THREE.Math.degToRad(this.longitude);\n    }\n    /**\n     * Returns the latitude in degrees.\n     * @deprecated Use the [[latitude]] property instead.\n     */\n    get latitudeInDegrees() {\n        return this.latitude;\n    } // compat api\n    /**\n     * Returns the longitude in degrees.\n     * @deprecated Use the [[longitude]] property instead.\n     */\n    get longitudeInDegrees() {\n        return this.longitude;\n    } // compat api\n    /**\n     * The latitude in the degrees.\n     */\n    get lat() {\n        return this.latitude;\n    }\n    /**\n     * The longitude in the degrees.\n     */\n    get lng() {\n        return this.longitude;\n    }\n    /**\n     * Returns `true` if this `GeoCoordinates` is valid; returns `false` otherwise.\n     */\n    isValid() {\n        return !isNaN(this.latitude) && !isNaN(this.longitude);\n    }\n    /**\n     * Returns the normalized `GeoCoordinates`.\n     */\n    normalized() {\n        let { latitude, longitude } = this;\n        if (isNaN(latitude) || isNaN(longitude)) {\n            return this;\n        }\n        if (latitude > 90) {\n            let wrapped = (latitude + 90) % 360;\n            if (wrapped >= 180) {\n                longitude += 180;\n                wrapped = 360 - wrapped;\n            }\n            latitude = wrapped - 90;\n        }\n        if (latitude < -90) {\n            let wrapped = (latitude - 90) % 360;\n            if (wrapped <= -180) {\n                longitude += 180;\n                wrapped = -360 - wrapped;\n            }\n            latitude = wrapped + 90;\n        }\n        if (longitude < -180 || longitude > 180) {\n            const sign = Math.sign(longitude);\n            longitude = (((longitude % 360) + 180 * sign) % 360) - 180 * sign;\n        }\n        if (latitude === this.latitude && longitude === this.longitude) {\n            return this;\n        }\n        return new GeoCoordinates(latitude, longitude, this.altitude);\n    }\n    /**\n     * Returns `true` if this `GeoCoordinates` is equal to the other.\n     *\n     * @param other GeoCoordinatesLike to compare to.\n     */\n    equals(other) {\n        return (this.latitude === other.latitude &&\n            this.longitude === other.longitude &&\n            this.altitude === other.altitude);\n    }\n    /**\n     * Copy values from the other.\n     *\n     * @param other GeoCoordinatesLike to copy all values from.\n     */\n    copy(other) {\n        this.latitude = other.latitude;\n        this.longitude = other.longitude;\n        this.altitude = other.altitude;\n        return this;\n    }\n    /**\n     * Clones this `GeoCoordinates`.\n     * @deprecated\n     */\n    clone() {\n        return new GeoCoordinates(this.latitude, this.longitude, this.altitude);\n    }\n    /**\n     * Returns this [[GeoCoordinates]] as [[LatLngLike]] literal.\n     */\n    toLatLng() {\n        return { lat: this.latitude, lng: this.longitude };\n    }\n    /**\n     * Converts this [[GeoCoordinates]] to a [[GeoPointLike]].\n     */\n    toGeoPoint() {\n        return this.altitude !== undefined\n            ? [this.longitude, this.latitude, this.altitude]\n            : [this.longitude, this.latitude];\n    }\n}\nexports.GeoCoordinates = GeoCoordinates;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinatesLike.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinatesLike.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Type guard to assert that `object` conforms to [[GeoCoordinatesLike]] data interface.\n */\nfunction isGeoCoordinatesLike(object) {\n    return (object &&\n        typeof object.latitude === \"number\" &&\n        typeof object.longitude === \"number\" &&\n        (typeof object.altitude === \"number\" || typeof object.altitude === \"undefined\"));\n}\nexports.isGeoCoordinatesLike = isGeoCoordinatesLike;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinatesLike.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/coordinates/GeoPointLike.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/coordinates/GeoPointLike.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Type guard to assert that `object` conforms to [[GeoPointLike]] interface.\n */\nfunction isGeoPointLike(geoPoint) {\n    if (Array.isArray(geoPoint)) {\n        const [longitude, latitude, altitude] = geoPoint;\n        return (typeof longitude === \"number\" &&\n            typeof latitude === \"number\" &&\n            (altitude === undefined || typeof altitude === \"number\"));\n    }\n    return false;\n}\nexports.isGeoPointLike = isGeoPointLike;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/coordinates/GeoPointLike.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/coordinates/LatLngLike.js":
/*!************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/coordinates/LatLngLike.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Type guard to assert that `object` conforms to [[LatLngLike]] interface.\n */\nfunction isLatLngLike(object) {\n    return object && typeof object.lat === \"number\" && typeof object.lng === \"number\";\n}\nexports.isLatLngLike = isLatLngLike;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/coordinates/LatLngLike.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/math/Box3Like.js":
/*!***************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/math/Box3Like.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns true if the given object implements the [[Box3Like]] interface.\n *\n * @param object A valid object.\n */\nfunction isBox3Like(object) {\n    const box3 = object;\n    return box3.min !== undefined && box3.max !== undefined;\n}\nexports.isBox3Like = isBox3Like;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/math/Box3Like.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/math/MathUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/math/MathUtils.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst THREE = __webpack_require__(/*! three */ \"three\");\nvar MathUtils;\n(function (MathUtils) {\n    /**\n     * Creates a new empty bounding box.\n     * @deprecated\n     */\n    function newEmptyBox3() {\n        return {\n            min: { x: Infinity, y: Infinity, z: Infinity },\n            max: { x: -Infinity, y: -Infinity, z: -Infinity }\n        };\n    }\n    MathUtils.newEmptyBox3 = newEmptyBox3;\n    /**\n     * Set the components of the given [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The [Vector3Like]\n     */\n    function newVector3(x, y, z, v) {\n        if (v === undefined) {\n            return { x, y, z };\n        }\n        v.x = x;\n        v.y = y;\n        v.z = z;\n        return v;\n    }\n    MathUtils.newVector3 = newVector3;\n    /**\n     * Converts an angle measured in degrees to an equivalent value in radians.\n     *\n     * @param degrees Value in degrees.\n     * @returns Value in radians.\n     * @deprecated\n     */\n    MathUtils.degToRad = THREE.Math.degToRad;\n    /**\n     * Converts an angle measured in radians to an equivalent value in degrees.\n     *\n     * @param degrees Value in radians.\n     * @returns Value in degrees.\n     * @deprecated\n     */\n    MathUtils.radToDeg = THREE.Math.radToDeg;\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     * @returns Clamped value.\n     * @deprecated\n     */\n    MathUtils.clamp = THREE.Math.clamp;\n    /**\n     * Normalize angle in degrees to range `[0, 360)`.\n     *\n     * @param a Angle in degrees.\n     * @returns Angle in degrees in range `[0, 360)`.\n     */\n    function normalizeAngleDeg(a) {\n        a = a % 360;\n        if (a < 0) {\n            a = a + 360;\n        }\n        return a;\n    }\n    MathUtils.normalizeAngleDeg = normalizeAngleDeg;\n    /**\n     * Return the minimal delta between angles `a` and `b` given in degrees.\n     *\n     * Equivalent to `a - b` in coordinate space with exception vector direction can be reversed\n     * that if `abs(a-b) > 180` because trip is shorter in 'other' direction.\n     *\n     * Useful when interpolating between `b` and `a` in angle space.\n     *\n     * @param a Start angle in degrees.\n     * @param b End angle in degrees.\n     * @returns Angle that that satisfies condition `a - b - d = 0` in angle space.\n     */\n    function angleDistanceDeg(a, b) {\n        a = normalizeAngleDeg(a);\n        b = normalizeAngleDeg(b);\n        const d = a - b;\n        if (d > 180) {\n            return d - 360;\n        }\n        else if (d <= -180) {\n            return d + 360;\n        }\n        else {\n            return d;\n        }\n    }\n    MathUtils.angleDistanceDeg = angleDistanceDeg;\n    /**\n     * Interpolate linearly between two angles given in degrees.\n     *\n     * @param p0 Angle from in degrees\n     * @param p1 Angle to in degrees\n     * @param t Interpolation factor (alpha), in range `0-1`.\n     */\n    function interpolateAnglesDeg(p0, p1, t) {\n        // hand crafted version,\n        // see stack for maybe better versions:\n        //    https://stackoverflow.com/questions/2708476/rotation-interpolation\n        const d = angleDistanceDeg(p1, p0);\n        const r = (p0 + d * t) % 360;\n        return r;\n    }\n    MathUtils.interpolateAnglesDeg = interpolateAnglesDeg;\n})(MathUtils = exports.MathUtils || (exports.MathUtils = {}));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/math/MathUtils.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/math/OrientedBox3.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/math/OrientedBox3.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = __webpack_require__(/*! three */ \"three\");\nclass OrientedBox3 {\n    /**\n     * Creates a new `OrientedBox3`.\n     *\n     * @hideconstructor\n     */\n    constructor(position, rotationMatrix, extents) {\n        /**\n         * The position of the center of this `OrientedBox3`.\n         */\n        this.position = new three_1.Vector3();\n        /**\n         * The x-axis of this `OrientedBox3`.\n         */\n        this.xAxis = new three_1.Vector3(1, 0, 0);\n        /**\n         * The y-axis of this `OrientedBox3`.\n         */\n        this.yAxis = new three_1.Vector3(0, 1, 0);\n        /**\n         * The z-axis of this `OrientedBox3`.\n         */\n        this.zAxis = new three_1.Vector3(0, 0, 1);\n        /**\n         * The extents of this `OrientedBox3`.\n         */\n        this.extents = new three_1.Vector3();\n        if (position !== undefined) {\n            this.position.copy(position);\n        }\n        if (rotationMatrix !== undefined) {\n            rotationMatrix.extractBasis(this.xAxis, this.yAxis, this.zAxis);\n        }\n        if (extents !== undefined) {\n            this.extents.copy(extents);\n        }\n    }\n    /**\n     * Create a copy of this [[OrientedBoundingBox]].\n     */\n    clone() {\n        const newBox = new OrientedBox3();\n        newBox.copy(this);\n        return newBox;\n    }\n    /**\n     * Copies the values of `other` to this [[OrientedBox3]].\n     * @param other The other [[OrientedBox3]] to copy.\n     */\n    copy(other) {\n        this.position.copy(other.position);\n        this.xAxis.copy(other.xAxis);\n        this.yAxis.copy(other.yAxis);\n        this.zAxis.copy(other.zAxis);\n        this.extents.copy(other.extents);\n    }\n    /**\n     * Gets the center position of this [[OrientedBox3]].\n     *\n     * @param center The returned center position.\n     */\n    getCenter(center = new three_1.Vector3()) {\n        return center.copy(this.position);\n    }\n    /**\n     * Gets the size of this [[OrientedBox3]].\n     *\n     * @param size The returned size.\n     */\n    getSize(size = new three_1.Vector3()) {\n        return size.copy(this.extents).multiplyScalar(2);\n    }\n    /**\n     * Gets the orientation matrix of this `OrientedBox3`.\n     * @param matrix The output orientation matrix.\n     */\n    getRotationMatrix(matrix = new three_1.Matrix4()) {\n        return matrix.makeBasis(this.xAxis, this.yAxis, this.zAxis);\n    }\n    /**\n     * Checks intersection with the given `THREE.Frustum` or array of `THREE.Plane`s.\n     *\n     * @param frustumOrPlanes Frustum or array of planes.\n     */\n    intersects(frustumOrPlanes) {\n        const planes = Array.isArray(frustumOrPlanes)\n            ? frustumOrPlanes\n            : frustumOrPlanes.planes;\n        for (const plane of planes) {\n            const r = Math.abs(plane.normal.dot(this.xAxis) * this.extents.x) +\n                Math.abs(plane.normal.dot(this.yAxis) * this.extents.y) +\n                Math.abs(plane.normal.dot(this.zAxis) * this.extents.z);\n            const d = plane.distanceToPoint(this.position);\n            if (d + r < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns true if this [[OrientedBox3]] contains the given point.\n     *\n     * @param point A valid point.\n     */\n    contains(point) {\n        const dx = point.x - this.position.x;\n        const dy = point.y - this.position.y;\n        const dz = point.z - this.position.z;\n        const x = Math.abs(dx * this.xAxis.x + dy * this.xAxis.y + dz * this.xAxis.z);\n        const y = Math.abs(dx * this.yAxis.x + dy * this.yAxis.y + dz * this.yAxis.z);\n        const z = Math.abs(dx * this.zAxis.x + dy * this.zAxis.y + dz * this.zAxis.z);\n        if (x > this.extents.x || y > this.extents.y || z > this.extents.z) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns the distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPoint(point) {\n        return Math.sqrt(this.distanceToPointSquared(point));\n    }\n    /**\n     * Returns the squared distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPointSquared(point) {\n        const d = new three_1.Vector3();\n        d.subVectors(point, this.position);\n        const lengths = [d.dot(this.xAxis), d.dot(this.yAxis), d.dot(this.zAxis)];\n        let result = 0;\n        for (let i = 0; i < 3; ++i) {\n            const length = lengths[i];\n            const extent = this.extents.getComponent(i);\n            if (length < -extent) {\n                const dd = extent + length;\n                result += dd * dd;\n            }\n            else if (length > extent) {\n                const dd = length - extent;\n                result += dd * dd;\n            }\n        }\n        return result;\n    }\n}\nexports.OrientedBox3 = OrientedBox3;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/math/OrientedBox3.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/math/OrientedBox3Like.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/math/OrientedBox3Like.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns true if the given object implements the interface [[OrientedBox3Like]].\n *\n * @param object The object.\n */\nfunction isOrientedBox3Like(object) {\n    const obb = object;\n    return (obb.position !== undefined &&\n        obb.xAxis !== undefined &&\n        obb.yAxis !== undefined &&\n        obb.zAxis !== undefined &&\n        obb.extents !== undefined);\n}\nexports.isOrientedBox3Like = isOrientedBox3Like;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/math/OrientedBox3Like.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/math/TransformLike.js":
/*!********************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/math/TransformLike.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns true if the given object implements the interface [[TransformLike]].\n *\n * @param object The object.\n */\nfunction isTransformLike(object) {\n    const transform = object;\n    return (transform.position !== undefined &&\n        transform.xAxis !== undefined &&\n        transform.yAxis !== undefined &&\n        transform.zAxis !== undefined);\n}\nexports.isTransformLike = isTransformLike;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/math/TransformLike.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/math/Vector3Like.js":
/*!******************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/math/Vector3Like.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isVector3Like(v) {\n    return v && typeof v.x === \"number\" && typeof v.y === \"number\" && typeof v.z === \"number\";\n}\nexports.isVector3Like = isVector3Like;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/math/Vector3Like.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/projection/EarthConstants.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/projection/EarthConstants.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass EarthConstants {\n}\nexports.EarthConstants = EarthConstants;\n/** The equatorial circumference in meters. */\nEarthConstants.EQUATORIAL_CIRCUMFERENCE = 40075016.6855784861531768177614;\n/** The equatorial radius in meters. */\nEarthConstants.EQUATORIAL_RADIUS = 6378137.0;\n/** The lowest point on earth (Dead Sea) in meters. */\nEarthConstants.MIN_ELEVATION = -433.0;\n/** The highest point on earth (Mt. Everest) in meters. */\nEarthConstants.MAX_ELEVATION = 8848.0;\n/** The highest artificial structure (building) on earth, Burj Khalifa tower in Dubai */\nEarthConstants.MAX_BUILDING_HEIGHT = 828;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/projection/EarthConstants.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/projection/EquirectangularProjection.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/projection/EquirectangularProjection.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GeoBox_1 = __webpack_require__(/*! ../coordinates/GeoBox */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoBox.js\");\nconst GeoCoordinates_1 = __webpack_require__(/*! ../coordinates/GeoCoordinates */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js\");\nconst Box3Like_1 = __webpack_require__(/*! ../math/Box3Like */ \"./node_modules/@here/harp-geoutils/lib/math/Box3Like.js\");\nconst MathUtils_1 = __webpack_require__(/*! ../math/MathUtils */ \"./node_modules/@here/harp-geoutils/lib/math/MathUtils.js\");\nconst OrientedBox3Like_1 = __webpack_require__(/*! ../math/OrientedBox3Like */ \"./node_modules/@here/harp-geoutils/lib/math/OrientedBox3Like.js\");\nconst EarthConstants_1 = __webpack_require__(/*! ./EarthConstants */ \"./node_modules/@here/harp-geoutils/lib/projection/EarthConstants.js\");\nconst Projection_1 = __webpack_require__(/*! ./Projection */ \"./node_modules/@here/harp-geoutils/lib/projection/Projection.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\nclass EquirectangularProjection extends Projection_1.Projection {\n    constructor() {\n        super(...arguments);\n        /** @override */\n        this.type = Projection_1.ProjectionType.Planar;\n    }\n    /** @override */\n    getScaleFactor(_worldPoint) {\n        return 1;\n    }\n    /** @override */\n    worldExtent(minAltitude, maxAltitude, result) {\n        if (!result) {\n            result = MathUtils_1.MathUtils.newEmptyBox3();\n        }\n        result.min.x = 0.0;\n        result.min.y = 0.0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale / 2;\n        result.max.z = maxAltitude;\n        return result;\n    }\n    /** @override */\n    projectPoint(geoPoint, result) {\n        if (result === undefined) {\n            /*\n             * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n             * might be a concrete class which is not available at runtime.\n             * Consider the following example:\n             *\n             *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n             *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n             *\n             * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n             */\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 };\n        }\n        result.x =\n            (THREE.Math.degToRad(geoPoint.longitude) + Math.PI) *\n                EquirectangularProjection.geoToWorldScale *\n                this.unitScale;\n        result.y =\n            (THREE.Math.degToRad(geoPoint.latitude) + Math.PI * 0.5) *\n                EquirectangularProjection.geoToWorldScale *\n                this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n    /** @override */\n    unprojectPoint(worldPoint) {\n        const geoPoint = GeoCoordinates_1.GeoCoordinates.fromRadians((worldPoint.y * EquirectangularProjection.worldToGeoScale) / this.unitScale -\n            Math.PI * 0.5, (worldPoint.x * EquirectangularProjection.worldToGeoScale) / this.unitScale - Math.PI, worldPoint.z);\n        return geoPoint;\n    }\n    /** @override */\n    unprojectAltitude(worldPoint) {\n        return worldPoint.z;\n    }\n    /** @override */\n    projectBox(geoBox, result) {\n        const worldCenter = this.projectPoint(new GeoCoordinates_1.GeoCoordinates(geoBox.center.latitude, geoBox.center.longitude, 0));\n        const { latitudeSpanInRadians, longitudeSpanInRadians, altitudeSpan } = geoBox;\n        const sizeX = longitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        const sizeY = latitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        if (!result) {\n            result = MathUtils_1.MathUtils.newEmptyBox3();\n        }\n        if (Box3Like_1.isBox3Like(result)) {\n            result.min.x = worldCenter.x - sizeX * 0.5 * this.unitScale;\n            result.min.y = worldCenter.y - sizeY * 0.5 * this.unitScale;\n            result.max.x = worldCenter.x + sizeX * 0.5 * this.unitScale;\n            result.max.y = worldCenter.y + sizeY * 0.5 * this.unitScale;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            }\n            else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        }\n        else if (OrientedBox3Like_1.isOrientedBox3Like(result)) {\n            MathUtils_1.MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils_1.MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils_1.MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = sizeX * 0.5 * this.unitScale;\n            result.extents.y = sizeY * 0.5 * this.unitScale;\n            result.extents.z = Math.max(Number.EPSILON, (altitudeSpan || 0) * 0.5);\n        }\n        return result;\n    }\n    /** @override */\n    unprojectBox(worldBox) {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox_1.GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n    /** @override */\n    groundDistance(worldPoint) {\n        return worldPoint.z;\n    }\n    /** @override */\n    scalePointToSurface(worldPoint) {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n    /** @override */\n    surfaceNormal(_worldPoint, normal) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        }\n        else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\nEquirectangularProjection.geoToWorldScale = 1.0 / (2.0 * Math.PI);\nEquirectangularProjection.worldToGeoScale = (2.0 * Math.PI) / 1.0;\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to unit coordinates and vice\n * versa.\n */\nexports.normalizedEquirectangularProjection = new EquirectangularProjection(1);\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to world coordinates and vice\n * versa.\n */\nexports.equirectangularProjection = new EquirectangularProjection(EarthConstants_1.EarthConstants.EQUATORIAL_CIRCUMFERENCE);\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/projection/EquirectangularProjection.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/projection/IdentityProjection.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/projection/IdentityProjection.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GeoBox_1 = __webpack_require__(/*! ../coordinates/GeoBox */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoBox.js\");\nconst GeoCoordinates_1 = __webpack_require__(/*! ../coordinates/GeoCoordinates */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js\");\nconst Box3Like_1 = __webpack_require__(/*! ../math/Box3Like */ \"./node_modules/@here/harp-geoutils/lib/math/Box3Like.js\");\nconst MathUtils_1 = __webpack_require__(/*! ../math/MathUtils */ \"./node_modules/@here/harp-geoutils/lib/math/MathUtils.js\");\nconst OrientedBox3Like_1 = __webpack_require__(/*! ../math/OrientedBox3Like */ \"./node_modules/@here/harp-geoutils/lib/math/OrientedBox3Like.js\");\nconst Projection_1 = __webpack_require__(/*! ./Projection */ \"./node_modules/@here/harp-geoutils/lib/projection/Projection.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\nclass IdentityProjection extends Projection_1.Projection {\n    constructor() {\n        super(...arguments);\n        /** @override */\n        this.type = Projection_1.ProjectionType.Planar;\n    }\n    /** @override */\n    getScaleFactor(_worldPoint) {\n        return 1;\n    }\n    /** @override */\n    worldExtent(minAltitude, maxAltitude, result) {\n        if (!result) {\n            result = MathUtils_1.MathUtils.newEmptyBox3();\n        }\n        result.min.x = -Math.PI;\n        result.min.y = -Math.PI * 0.5;\n        result.min.z = minAltitude;\n        result.max.x = Math.PI;\n        result.max.y = Math.PI * 0.5;\n        result.max.z = maxAltitude;\n        return result;\n    }\n    /** @override */\n    projectPoint(geoPoint, result) {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 };\n        }\n        result.x = THREE.Math.degToRad(geoPoint.longitude);\n        result.y = THREE.Math.degToRad(geoPoint.latitude);\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n    /** @override */\n    unprojectPoint(worldPoint) {\n        const geoPoint = GeoCoordinates_1.GeoCoordinates.fromRadians(worldPoint.y, worldPoint.x, worldPoint.z);\n        return geoPoint;\n    }\n    /** @override */\n    unprojectAltitude(worldPoint) {\n        return worldPoint.z;\n    }\n    /** @override */\n    projectBox(geoBox, result) {\n        if (!result) {\n            result = MathUtils_1.MathUtils.newEmptyBox3();\n        }\n        const min = this.projectPoint(new GeoCoordinates_1.GeoCoordinates(geoBox.south, geoBox.west, geoBox.minAltitude));\n        const max = this.projectPoint(new GeoCoordinates_1.GeoCoordinates(geoBox.north, geoBox.east, geoBox.maxAltitude));\n        if (Box3Like_1.isBox3Like(result)) {\n            result.min.x = min.x;\n            result.min.y = min.y;\n            result.min.z = min.z;\n            result.max.x = max.x;\n            result.max.y = max.y;\n            result.max.z = max.z;\n        }\n        else if (OrientedBox3Like_1.isOrientedBox3Like(result)) {\n            MathUtils_1.MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils_1.MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils_1.MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (min.x + max.x) * 0.5;\n            result.position.y = (min.y + max.y) * 0.5;\n            result.position.z = (min.z + max.z) * 0.5;\n            result.extents.x = (max.x - min.x) * 0.5;\n            result.extents.y = (max.y - min.y) * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (max.z - min.z) * 0.5);\n        }\n        return result;\n    }\n    /** @override */\n    unprojectBox(worldBox) {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox_1.GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n    /** @override */\n    groundDistance(worldPoint) {\n        return worldPoint.z;\n    }\n    /** @override */\n    scalePointToSurface(worldPoint) {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n    /** @override */\n    surfaceNormal(_worldPoint, normal) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        }\n        else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n/**\n * Identity [[Projection]] used to convert geo coordinates to unit coordinates and vice versa.\n */\nexports.identityProjection = new IdentityProjection(1);\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/projection/IdentityProjection.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/projection/MercatorProjection.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/projection/MercatorProjection.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GeoBox_1 = __webpack_require__(/*! ../coordinates/GeoBox */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoBox.js\");\nconst GeoCoordinates_1 = __webpack_require__(/*! ../coordinates/GeoCoordinates */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js\");\nconst Box3Like_1 = __webpack_require__(/*! ../math/Box3Like */ \"./node_modules/@here/harp-geoutils/lib/math/Box3Like.js\");\nconst MathUtils_1 = __webpack_require__(/*! ../math/MathUtils */ \"./node_modules/@here/harp-geoutils/lib/math/MathUtils.js\");\nconst OrientedBox3Like_1 = __webpack_require__(/*! ../math/OrientedBox3Like */ \"./node_modules/@here/harp-geoutils/lib/math/OrientedBox3Like.js\");\nconst EarthConstants_1 = __webpack_require__(/*! ./EarthConstants */ \"./node_modules/@here/harp-geoutils/lib/projection/EarthConstants.js\");\nconst Projection_1 = __webpack_require__(/*! ./Projection */ \"./node_modules/@here/harp-geoutils/lib/projection/Projection.js\");\nclass MercatorProjection extends Projection_1.Projection {\n    constructor() {\n        super(...arguments);\n        /** @override */\n        this.type = Projection_1.ProjectionType.Planar;\n    }\n    static clamp(val, min, max) {\n        return Math.min(Math.max(min, val), max);\n    }\n    static latitudeClamp(latitude) {\n        return MercatorProjection.clamp(latitude, -MercatorConstants.MAXIMUM_LATITUDE, MercatorConstants.MAXIMUM_LATITUDE);\n    }\n    static latitudeProject(latitude) {\n        return Math.log(Math.tan(Math.PI * 0.25 + latitude * 0.5)) / Math.PI;\n    }\n    static latitudeClampProject(latitude) {\n        return MercatorProjection.latitudeProject(MercatorProjection.latitudeClamp(latitude));\n    }\n    static unprojectLatitude(y) {\n        return 2.0 * Math.atan(Math.exp(Math.PI * y)) - Math.PI * 0.5;\n    }\n    /** @override */\n    getScaleFactor(worldPoint) {\n        return Math.cosh(2 * Math.PI * (worldPoint.y / this.unitScale - 0.5));\n    }\n    /** @override */\n    worldExtent(minAltitude, maxAltitude, result) {\n        if (!result) {\n            result = MathUtils_1.MathUtils.newEmptyBox3();\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n    /** @override */\n    projectPoint(geoPointLike, result) {\n        let geoPoint;\n        if (geoPointLike instanceof GeoCoordinates_1.GeoCoordinates) {\n            geoPoint = geoPointLike;\n        }\n        else {\n            geoPoint = new GeoCoordinates_1.GeoCoordinates(geoPointLike.latitude, geoPointLike.longitude, geoPointLike.altitude);\n        }\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 };\n        }\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        result.y =\n            (MercatorProjection.latitudeClampProject(geoPoint.latitudeInRadians) * 0.5 + 0.5) *\n                this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n    /** @override */\n    unprojectPoint(worldPoint) {\n        const geoPoint = GeoCoordinates_1.GeoCoordinates.fromRadians(MercatorProjection.unprojectLatitude((worldPoint.y / this.unitScale - 0.5) * 2.0), (worldPoint.x / this.unitScale) * 2 * Math.PI - Math.PI, worldPoint.z);\n        return geoPoint;\n    }\n    /** @override */\n    unprojectAltitude(worldPoint) {\n        return worldPoint.z;\n    }\n    /** @override */\n    projectBox(geoBox, result) {\n        const worldCenter = this.projectPoint(geoBox.center);\n        const worldNorth = (MercatorProjection.latitudeClampProject(geoBox.northEast.latitudeInRadians) * 0.5 +\n            0.5) *\n            this.unitScale;\n        const worldSouth = (MercatorProjection.latitudeClampProject(geoBox.southWest.latitudeInRadians) * 0.5 +\n            0.5) *\n            this.unitScale;\n        const worldYCenter = (worldNorth + worldSouth) * 0.5;\n        worldCenter.y = worldYCenter;\n        const latitudeSpan = worldNorth - worldSouth;\n        const longitudeSpan = (geoBox.longitudeSpan / 360) * this.unitScale;\n        if (!result) {\n            result = MathUtils_1.MathUtils.newEmptyBox3();\n        }\n        if (Box3Like_1.isBox3Like(result)) {\n            result.min.x = worldCenter.x - longitudeSpan * 0.5;\n            result.min.y = worldCenter.y - latitudeSpan * 0.5;\n            result.max.x = worldCenter.x + longitudeSpan * 0.5;\n            result.max.y = worldCenter.y + latitudeSpan * 0.5;\n            const altitudeSpan = geoBox.altitudeSpan;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            }\n            else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        }\n        else if (OrientedBox3Like_1.isOrientedBox3Like(result)) {\n            MathUtils_1.MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils_1.MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils_1.MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = longitudeSpan * 0.5;\n            result.extents.y = latitudeSpan * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (geoBox.altitudeSpan || 0) * 0.5);\n        }\n        else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n    /** @override */\n    unprojectBox(worldBox) {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = GeoBox_1.GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n    /** @override */\n    groundDistance(worldPoint) {\n        return worldPoint.z;\n    }\n    /** @override */\n    scalePointToSurface(worldPoint) {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n    /** @override */\n    surfaceNormal(_worldPoint, normal) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        }\n        else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n    /** @override */\n    reprojectPoint(sourceProjection, worldPos, result) {\n        // this implementation of [[reprojectPoint]] supports both\n        // [[WebMercatorProjection]] and [[MercatorProjection]]. The only\n        // difference betweeen these two variants of WEB Mercator\n        // is in the orientation of the Y axis, so we just flip Y coordinates\n        // when reprojecting between them.\n        if (sourceProjection !== this &&\n            (sourceProjection === exports.webMercatorProjection || sourceProjection === exports.mercatorProjection)) {\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {};\n            }\n            result.x = worldPos.x;\n            result.y = this.unitScale - worldPos.y;\n            result.z = worldPos.z;\n            return result;\n        }\n        return super.reprojectPoint(sourceProjection, worldPos, result);\n    }\n}\nclass WebMercatorProjection extends MercatorProjection {\n    /** @override */\n    projectPoint(geoPointLike, result) {\n        let geoPoint;\n        if (geoPointLike instanceof GeoCoordinates_1.GeoCoordinates) {\n            geoPoint = geoPointLike;\n        }\n        else {\n            geoPoint = new GeoCoordinates_1.GeoCoordinates(geoPointLike.latitude, geoPointLike.longitude, geoPointLike.altitude);\n        }\n        /*\n         * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n         * might be a concrete class which is not available at runtime.\n         * Consider the following example:\n         *\n         *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n         *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n         *\n         * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n         */\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 };\n        }\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        const sy = Math.sin(MercatorProjection.latitudeClamp(geoPoint.latitudeInRadians));\n        result.y = (0.5 - Math.log((1 + sy) / (1 - sy)) / (4 * Math.PI)) * this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n    /** @override */\n    unprojectPoint(worldPoint) {\n        const x = worldPoint.x / this.unitScale - 0.5;\n        const y = 0.5 - worldPoint.y / this.unitScale;\n        const longitude = 360 * x;\n        const latitude = 90 - (360 * Math.atan(Math.exp(-y * 2 * Math.PI))) / Math.PI;\n        return new GeoCoordinates_1.GeoCoordinates(latitude, longitude, worldPoint.z);\n    }\n    /** @override */\n    projectBox(geoBox, result) {\n        const r = super.projectBox(geoBox, result);\n        if (Box3Like_1.isBox3Like(r)) {\n            // Invert the y axis for web mercator, this means that max => min & min => max\n            const maxY = r.max.y;\n            r.max.y = this.unitScale - r.min.y;\n            r.min.y = this.unitScale - maxY;\n        }\n        else if (OrientedBox3Like_1.isOrientedBox3Like(r)) {\n            MathUtils_1.MathUtils.newVector3(1, 0, 0, r.xAxis);\n            MathUtils_1.MathUtils.newVector3(0, -1, 0, r.yAxis);\n            MathUtils_1.MathUtils.newVector3(0, 0, -1, r.zAxis);\n            r.position.y = this.unitScale - r.position.y;\n        }\n        return r;\n    }\n    /** @override */\n    unprojectBox(worldBox) {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = new GeoBox_1.GeoBox(new GeoCoordinates_1.GeoCoordinates(maxGeo.latitude, minGeo.longitude, minGeo.altitude), new GeoCoordinates_1.GeoCoordinates(minGeo.latitude, maxGeo.longitude, maxGeo.altitude));\n        return geoBox;\n    }\n    /** @override */\n    surfaceNormal(_worldPoint, normal) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        }\n        else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n    /** @override */\n    localTangentSpace(geoPoint, result) {\n        this.projectPoint(geoPoint, result.position);\n        MathUtils_1.MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils_1.MathUtils.newVector3(0, -1, 0, result.yAxis);\n        MathUtils_1.MathUtils.newVector3(0, 0, -1, result.zAxis);\n        return result;\n    }\n}\nclass MercatorConstants {\n}\nexports.MercatorConstants = MercatorConstants;\n// Math.atan(Math.sinh(Math.PI))\nMercatorConstants.MAXIMUM_LATITUDE = 1.4844222297453323;\n/**\n * Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexports.mercatorProjection = new MercatorProjection(EarthConstants_1.EarthConstants.EQUATORIAL_CIRCUMFERENCE);\n/**\n * Web Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexports.webMercatorProjection = new WebMercatorProjection(EarthConstants_1.EarthConstants.EQUATORIAL_CIRCUMFERENCE);\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/projection/MercatorProjection.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/projection/Projection.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/projection/Projection.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MathUtils_1 = __webpack_require__(/*! ../math/MathUtils */ \"./node_modules/@here/harp-geoutils/lib/math/MathUtils.js\");\n/**\n * The type of projection.\n */\nvar ProjectionType;\n(function (ProjectionType) {\n    /**\n     * A type of [Projection] with zero curvature.\n     */\n    ProjectionType[ProjectionType[\"Planar\"] = 0] = \"Planar\";\n    /**\n     * A spherical [Projection].\n     */\n    ProjectionType[ProjectionType[\"Spherical\"] = 1] = \"Spherical\";\n})(ProjectionType = exports.ProjectionType || (exports.ProjectionType = {}));\n/**\n * `Projection` is used to convert positions from geo coordinates to world coordinates and vice\n * versa.\n */\nclass Projection {\n    /**\n     * Constructs the Projection\n     *\n     * @param unitScale How to transform the projected coordinates to world units.\n     */\n    constructor(unitScale) {\n        this.unitScale = unitScale;\n        //Prevent empty constructor error.\n    }\n    /**\n     * Gets the [[TransformLike]] of the local tangent space at the given geo coordinates.\n     *\n     * @param geoPoint The geo coordinates.\n     * @param result The [[TransformLike]].\n     */\n    localTangentSpace(geoPoint, result) {\n        this.projectPoint(geoPoint, result.position);\n        MathUtils_1.MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils_1.MathUtils.newVector3(0, 1, 0, result.yAxis);\n        MathUtils_1.MathUtils.newVector3(0, 0, 1, result.zAxis);\n        return result;\n    }\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     * Implementations should be aware of worldPos and result may be one object\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     * @hidden\n     */\n    reprojectPoint(sourceProjection, worldPos, result) {\n        if (sourceProjection === this) {\n            if (result === undefined) {\n                return { x: worldPos.x, y: worldPos.y, z: worldPos.z };\n            }\n            result.x = worldPos.x;\n            result.y = worldPos.y;\n            result.z = worldPos.z;\n            return result;\n        }\n        return this.projectPoint(sourceProjection.unprojectPoint(worldPos), result);\n    }\n}\nexports.Projection = Projection;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/projection/Projection.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/projection/SphereProjection.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/projection/SphereProjection.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GeoCoordinates_1 = __webpack_require__(/*! ../coordinates/GeoCoordinates */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js\");\nconst Box3Like_1 = __webpack_require__(/*! ../math/Box3Like */ \"./node_modules/@here/harp-geoutils/lib/math/Box3Like.js\");\nconst MathUtils_1 = __webpack_require__(/*! ../math/MathUtils */ \"./node_modules/@here/harp-geoutils/lib/math/MathUtils.js\");\nconst OrientedBox3Like_1 = __webpack_require__(/*! ../math/OrientedBox3Like */ \"./node_modules/@here/harp-geoutils/lib/math/OrientedBox3Like.js\");\nconst EarthConstants_1 = __webpack_require__(/*! ./EarthConstants */ \"./node_modules/@here/harp-geoutils/lib/projection/EarthConstants.js\");\nconst MercatorProjection_1 = __webpack_require__(/*! ./MercatorProjection */ \"./node_modules/@here/harp-geoutils/lib/projection/MercatorProjection.js\");\nconst Projection_1 = __webpack_require__(/*! ./Projection */ \"./node_modules/@here/harp-geoutils/lib/projection/Projection.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\n/**\n * Transforms the given vector using the provided basis.\n */\nfunction apply(xAxis, yAxis, zAxis, v) {\n    const x = xAxis.x * v.x + yAxis.x * v.y + zAxis.x * v.z;\n    const y = xAxis.y * v.x + yAxis.y * v.y + zAxis.y * v.z;\n    const z = xAxis.z * v.x + yAxis.z * v.y + zAxis.z * v.z;\n    v.x = x;\n    v.y = y;\n    v.z = z;\n    return v;\n}\n/**\n * Returns the quadrants for the given longitude. The quadrant is defined as:\n *  - quadrant(+Math.PI * -1.0) = 0\n *  - quadrant(+Math.PI * -0.5) = 1\n *  - quadrant(+Math.PI *  0.0) = 2\n *  - quadrant(+Math.PI *  0.5) = 3\n *  - quadrant(+Math.PI *  1.0) = 4\n *\n * @param longitude The longitude in radians.\n */\nfunction getLongitudeQuadrant(longitude) {\n    const oneOverPI = 1 / Math.PI;\n    const quadrantIndex = Math.floor(2 * (longitude * oneOverPI + 1));\n    return THREE.Math.clamp(quadrantIndex, 0, 4);\n}\nfunction lengthOfVector3(worldPoint) {\n    const d = Math.sqrt(worldPoint.x * worldPoint.x + worldPoint.y * worldPoint.y + worldPoint.z * worldPoint.z);\n    return d;\n}\n/**\n * Creates a Box3 enclosing the geobox.\n *\n * @param geoBox Ghe given geobox\n * @param worldBox The resulting axis aligned bounding box.\n */\nfunction makeBox3(geoBox, worldBox, unitScale) {\n    const halfEquatorialRadius = (unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n    const minLongitude = THREE.Math.degToRad(geoBox.west);\n    const maxLongitude = THREE.Math.degToRad(geoBox.east);\n    const minLongitudeQuadrant = getLongitudeQuadrant(minLongitude);\n    const maxLongitudeQuadrant = getLongitudeQuadrant(maxLongitude);\n    let xMin = Math.cos(minLongitude);\n    let xMax = xMin;\n    let yMin = Math.sin(minLongitude);\n    let yMax = yMin;\n    for (let quadrantIndex = minLongitudeQuadrant + 1; quadrantIndex <= maxLongitudeQuadrant; quadrantIndex++) {\n        // tslint:disable-next-line: no-bitwise\n        const x = ((quadrantIndex + 1) & 1) * ((quadrantIndex & 2) - 1);\n        xMin = Math.min(x, xMin);\n        xMax = Math.max(x, xMax);\n        // tslint:disable-next-line: no-bitwise\n        const y = (quadrantIndex & 1) * ((quadrantIndex & 2) - 1);\n        yMin = Math.min(y, yMin);\n        yMax = Math.max(y, yMax);\n    }\n    const cosMaxLongitude = Math.cos(maxLongitude);\n    xMin = Math.min(cosMaxLongitude, xMin);\n    xMax = Math.max(cosMaxLongitude, xMax);\n    const sinMaxLongitude = Math.sin(maxLongitude);\n    yMin = Math.min(sinMaxLongitude, yMin);\n    yMax = Math.max(sinMaxLongitude, yMax);\n    const xCenter = (xMax + xMin) * halfEquatorialRadius;\n    const xExtent = (xMax - xMin) * halfEquatorialRadius;\n    const yCenter = (yMax + yMin) * halfEquatorialRadius;\n    const yExtent = (yMax - yMin) * halfEquatorialRadius;\n    // Calculate Z boundaries.\n    const minLatitude = THREE.Math.degToRad(geoBox.south);\n    const maxLatutide = THREE.Math.degToRad(geoBox.north);\n    const zMax = Math.sin(maxLatutide);\n    const zMin = Math.sin(minLatitude);\n    const zCenter = (zMax + zMin) * halfEquatorialRadius;\n    const zExtent = (zMax - zMin) * halfEquatorialRadius;\n    worldBox.min.x = xCenter - xExtent;\n    worldBox.min.y = yCenter - yExtent;\n    worldBox.min.z = zCenter - zExtent;\n    worldBox.max.x = xCenter + xExtent;\n    worldBox.max.y = yCenter + yExtent;\n    worldBox.max.z = zCenter + zExtent;\n    return worldBox;\n}\n/**\n * Computes the spherical projection of the given geo coordinates.\n *\n * @param geoPoint The geo coordinates.\n * @param worldpoint The resulting world coordinates.\n */\nfunction project(geoPoint, worldpoint, unitScale) {\n    const radius = unitScale + (geoPoint.altitude || 0);\n    const latitude = THREE.Math.degToRad(geoPoint.latitude);\n    const longitude = THREE.Math.degToRad(geoPoint.longitude);\n    const cosLatitude = Math.cos(latitude);\n    worldpoint.x = radius * cosLatitude * Math.cos(longitude);\n    worldpoint.y = radius * cosLatitude * Math.sin(longitude);\n    worldpoint.z = radius * Math.sin(latitude);\n    return worldpoint;\n}\nclass SphereProjection extends Projection_1.Projection {\n    constructor() {\n        super(...arguments);\n        /** @override */\n        this.type = Projection_1.ProjectionType.Spherical;\n    }\n    /** @override */\n    worldExtent(_minElevation, maxElevation, result = MathUtils_1.MathUtils.newEmptyBox3()) {\n        const radius = this.unitScale + maxElevation;\n        result.min.x = -radius;\n        result.min.y = -radius;\n        result.min.z = -radius;\n        result.max.x = radius;\n        result.max.y = radius;\n        result.max.z = radius;\n        return result;\n    }\n    /** @override */\n    projectPoint(geoPoint, result = MathUtils_1.MathUtils.newVector3(0, 0, 0)) {\n        return project(geoPoint, result, this.unitScale);\n    }\n    /** @override */\n    unprojectPoint(point) {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y;\n        const parallelRadius = Math.sqrt(parallelRadiusSq);\n        const v = point.z / parallelRadius;\n        if (isNaN(v)) {\n            return GeoCoordinates_1.GeoCoordinates.fromRadians(0, 0, -this.unitScale);\n        }\n        const radius = Math.sqrt(parallelRadiusSq + point.z * point.z);\n        return GeoCoordinates_1.GeoCoordinates.fromRadians(Math.atan(v), Math.atan2(point.y, point.x), radius - this.unitScale);\n    }\n    /** @override */\n    unprojectAltitude(point) {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y + point.z * point.z;\n        return Math.sqrt(parallelRadiusSq) - EarthConstants_1.EarthConstants.EQUATORIAL_RADIUS;\n    }\n    /** @override */\n    projectBox(geoBox, result = MathUtils_1.MathUtils.newEmptyBox3()) {\n        if (Box3Like_1.isBox3Like(result)) {\n            return makeBox3(geoBox, result, this.unitScale);\n        }\n        else if (OrientedBox3Like_1.isOrientedBox3Like(result)) {\n            if (geoBox.longitudeSpan >= 90) {\n                const bounds = makeBox3(geoBox, MathUtils_1.MathUtils.newEmptyBox3(), this.unitScale);\n                MathUtils_1.MathUtils.newVector3(1, 0, 0, result.xAxis);\n                MathUtils_1.MathUtils.newVector3(0, 1, 0, result.yAxis);\n                MathUtils_1.MathUtils.newVector3(0, 0, 1, result.zAxis);\n                result.position.x = (bounds.max.x + bounds.min.x) * 0.5;\n                result.position.y = (bounds.max.y + bounds.min.y) * 0.5;\n                result.position.z = (bounds.max.z + bounds.min.z) * 0.5;\n                result.extents.x = (bounds.max.x - bounds.min.x) * 0.5;\n                result.extents.y = (bounds.max.y - bounds.min.y) * 0.5;\n                result.extents.z = (bounds.max.z - bounds.min.z) * 0.5;\n                return result;\n            }\n            const { south, west, north, east, center: mid } = geoBox;\n            const midX = mid.longitude;\n            const midY = mid.latitude;\n            const cosSouth = Math.cos(THREE.Math.degToRad(south));\n            const sinSouth = Math.sin(THREE.Math.degToRad(south));\n            const cosWest = Math.cos(THREE.Math.degToRad(west));\n            const sinWest = Math.sin(THREE.Math.degToRad(west));\n            const cosNorth = Math.cos(THREE.Math.degToRad(north));\n            const sinNorth = Math.sin(THREE.Math.degToRad(north));\n            const cosEast = Math.cos(THREE.Math.degToRad(east));\n            const sinEast = Math.sin(THREE.Math.degToRad(east));\n            const cosMidX = Math.cos(THREE.Math.degToRad(midX));\n            const sinMidX = Math.sin(THREE.Math.degToRad(midX));\n            const cosMidY = Math.cos(THREE.Math.degToRad(midY));\n            const sinMidY = Math.sin(THREE.Math.degToRad(midY));\n            // Build the orientation of the OBB using the normal vector and its partial derivates.\n            // the sperical coordinates of the mid point of the geobox.\n            MathUtils_1.MathUtils.newVector3(cosMidX * cosMidY, sinMidX * cosMidY, sinMidY, result.zAxis);\n            // the partial derivates of the normal vector.\n            MathUtils_1.MathUtils.newVector3(-sinMidX, cosMidX, 0, result.xAxis);\n            MathUtils_1.MathUtils.newVector3(-cosMidX * sinMidY, -sinMidX * sinMidY, cosMidY, result.yAxis);\n            let width;\n            let minY;\n            let maxY;\n            if (south >= 0) {\n                // abs(dot(southWest - southEast, xAxis))\n                width = Math.abs(cosSouth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest)));\n                // dot(south, yAxis)\n                minY = cosMidY * sinSouth - sinMidY * cosSouth;\n                // dot(northEast, zAxis)\n                maxY =\n                    cosMidY * sinNorth -\n                        sinMidY * cosNorth * (cosMidX * cosEast + sinMidX * sinEast);\n            }\n            else {\n                if (north <= 0) {\n                    // abs(dot(northWest - northEast, xAxis))\n                    width = Math.abs(cosNorth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest)));\n                    // dot(north, yAxis)\n                    maxY = cosMidY * sinNorth - sinMidY * cosNorth;\n                }\n                else {\n                    // abs(dot(west - east, xAxis))\n                    width = Math.abs(cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest));\n                    // dot(northEast, yAxis)\n                    maxY =\n                        cosMidY * sinNorth -\n                            sinMidY * cosNorth * (sinMidX * sinEast + cosMidX * cosEast);\n                }\n                // dot(southEast, yAxis)\n                minY =\n                    cosMidY * sinSouth -\n                        sinMidY * cosSouth * (cosMidX * cosEast + sinMidX * sinEast);\n            }\n            const rMax = (this.unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n            const rMin = (this.unitScale + (geoBox.minAltitude || 0)) * 0.5;\n            // min(dot(southEast, zAxis), dot(northEast, zAxis))\n            const d = cosMidY * (cosMidX * cosEast + sinMidX * sinEast);\n            const minZ = Math.min(cosNorth * d + sinNorth * sinMidY, cosSouth * d + sinSouth * sinMidY);\n            MathUtils_1.MathUtils.newVector3(width * rMax, (maxY - minY) * rMax, rMax - minZ * rMin, result.extents);\n            MathUtils_1.MathUtils.newVector3(0, (minY + maxY) * rMax, rMax + rMax, result.position);\n            apply(result.xAxis, result.yAxis, result.zAxis, result.position);\n            result.position.x = result.position.x - result.zAxis.x * result.extents.z;\n            result.position.y = result.position.y - result.zAxis.y * result.extents.z;\n            result.position.z = result.position.z - result.zAxis.z * result.extents.z;\n            return result;\n        }\n        throw new Error(\"Invalid bounding box\");\n    }\n    /** @override */\n    unprojectBox(_worldBox) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @override */\n    getScaleFactor(_worldPoint) {\n        return 1;\n    }\n    /** @override */\n    groundDistance(worldPoint) {\n        return lengthOfVector3(worldPoint) - this.unitScale;\n    }\n    /** @override */\n    scalePointToSurface(worldPoint) {\n        const scale = this.unitScale / (lengthOfVector3(worldPoint) || 1);\n        worldPoint.x *= scale;\n        worldPoint.y *= scale;\n        worldPoint.z *= scale;\n        return worldPoint;\n    }\n    /** @override */\n    surfaceNormal(worldPoint, normal) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 0 };\n        }\n        const scale = 1 / (lengthOfVector3(worldPoint) || 1);\n        normal.x = worldPoint.x * scale;\n        normal.y = worldPoint.y * scale;\n        normal.z = worldPoint.z * scale;\n        return normal;\n    }\n    /** @override */\n    reprojectPoint(sourceProjection, worldPos, result) {\n        if (sourceProjection === MercatorProjection_1.mercatorProjection || sourceProjection === MercatorProjection_1.webMercatorProjection) {\n            const { x, y, z } = worldPos;\n            const r = this.unitScale;\n            const mx = x / r - Math.PI;\n            const my = y / r - Math.PI;\n            const w = Math.exp(my);\n            const d = w * w;\n            const gx = (2 * w) / (d + 1);\n            const gy = (d - 1) / (d + 1);\n            const scale = r + z;\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {};\n            }\n            result.x = Math.cos(mx) * gx * scale;\n            result.y = Math.sin(mx) * gx * scale;\n            result.z = gy * scale;\n            if (sourceProjection === MercatorProjection_1.webMercatorProjection) {\n                result.z = -result.z;\n            }\n            return result;\n        }\n        return super.reprojectPoint(sourceProjection, worldPos, result);\n    }\n    /** @override */\n    localTangentSpace(geoPoint, result) {\n        const latitude = THREE.Math.degToRad(geoPoint.latitude);\n        const longitude = THREE.Math.degToRad(geoPoint.longitude);\n        const cosLongitude = Math.cos(longitude);\n        const sinLongitude = Math.sin(longitude);\n        const cosLatitude = Math.cos(latitude);\n        const sinLatitude = Math.sin(latitude);\n        MathUtils_1.MathUtils.newVector3(cosLongitude * cosLatitude, sinLongitude * cosLatitude, sinLatitude, result.zAxis);\n        MathUtils_1.MathUtils.newVector3(-sinLongitude, cosLongitude, 0, result.xAxis);\n        MathUtils_1.MathUtils.newVector3(-cosLongitude * sinLatitude, -sinLongitude * sinLatitude, cosLatitude, result.yAxis);\n        this.projectPoint(geoPoint, result.position);\n        return result;\n    }\n}\nexports.sphereProjection = new SphereProjection(EarthConstants_1.EarthConstants.EQUATORIAL_RADIUS);\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/projection/SphereProjection.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/projection/TransverseMercatorProjection.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/projection/TransverseMercatorProjection.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GeoBox_1 = __webpack_require__(/*! ../coordinates/GeoBox */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoBox.js\");\nconst GeoCoordinates_1 = __webpack_require__(/*! ../coordinates/GeoCoordinates */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js\");\nconst Box3Like_1 = __webpack_require__(/*! ../math/Box3Like */ \"./node_modules/@here/harp-geoutils/lib/math/Box3Like.js\");\nconst MathUtils_1 = __webpack_require__(/*! ../math/MathUtils */ \"./node_modules/@here/harp-geoutils/lib/math/MathUtils.js\");\nconst OrientedBox3Like_1 = __webpack_require__(/*! ../math/OrientedBox3Like */ \"./node_modules/@here/harp-geoutils/lib/math/OrientedBox3Like.js\");\nconst EarthConstants_1 = __webpack_require__(/*! ./EarthConstants */ \"./node_modules/@here/harp-geoutils/lib/projection/EarthConstants.js\");\nconst Projection_1 = __webpack_require__(/*! ./Projection */ \"./node_modules/@here/harp-geoutils/lib/projection/Projection.js\");\n/**\n *\n * https://en.wikipedia.org/wiki/Transverse_Mercator_projection\n * http://mathworld.wolfram.com/MercatorProjection.html\n *\n */\nclass TransverseMercatorProjection extends Projection_1.Projection {\n    constructor(unitScale) {\n        super(unitScale);\n        this.unitScale = unitScale;\n        /** @override */\n        this.type = Projection_1.ProjectionType.Planar;\n        this.m_phi0 = 0;\n        this.m_lambda0 = 0;\n    }\n    /**\n     * Like in regular Mercator projection, there are two points on sphere\n     * with radius about 5 degrees, that is out of projected space.\n     *\n     *\n     * in regular Mercator these points are:\n     *     (90, any), (-90, any)\n     *\n     * and in transverse Mercator:\n     *     (0, 90), (0, -90)\n     *\n     * So, in transverse we need to compute distnce to poles, and clamp if\n     * radius is exceeded\n     */\n    static clampGeoPoint(geoPoint, unitScale) {\n        const lat = geoPoint.latitude;\n        const lon = geoPoint.longitude;\n        const r = TransverseMercatorUtils.POLE_RADIUS;\n        const rsq = TransverseMercatorUtils.POLE_RADIUS_SQ;\n        const nearestQuarter = Math.round(lon / 90);\n        const deltaLon = nearestQuarter * 90 - lon;\n        if (nearestQuarter % 2 === 0 || Math.abs(deltaLon) > r) {\n            return geoPoint;\n        }\n        const deltaLat = lat - 0;\n        const distanceToPoleSq = deltaLon * deltaLon + deltaLat * deltaLat;\n        if (distanceToPoleSq < rsq) {\n            const distanceToPole = Math.sqrt(distanceToPoleSq);\n            const scale = (r - distanceToPole) / distanceToPole;\n            // const quarter = ((nearestQuarter % 4) + 4) % 4;\n            // const dir = quarter === 1 ? -1 : quarter === 3 ? 1 : 0;\n            const dir = 1;\n            const offsetLon = deltaLon === 0 && deltaLat === 0 ? r * dir : deltaLon;\n            return new GeoCoordinates_1.GeoCoordinates(lat + deltaLat * scale, lon + offsetLon * scale);\n        }\n        return geoPoint;\n    }\n    /** @override */\n    getScaleFactor(worldPoint) {\n        return Math.cosh((worldPoint.x / this.unitScale - 0.5) * 2 * Math.PI);\n    }\n    /** @override */\n    worldExtent(minAltitude, maxAltitude, result) {\n        if (!result) {\n            result = MathUtils_1.MathUtils.newEmptyBox3();\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n    /** @override */\n    projectPoint(geoPoint, result) {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 };\n        }\n        const clamped = TransverseMercatorProjection.clampGeoPoint(geoPoint, this.unitScale);\n        const normalLon = clamped.longitude / 360 + 0.5;\n        const offset = normalLon === 1 ? 0 : Math.floor(normalLon);\n        const phi = MathUtils_1.MathUtils.degToRad(clamped.latitude);\n        const lambda = MathUtils_1.MathUtils.degToRad(clamped.longitude - offset * 360) - this.m_lambda0;\n        const B = Math.cos(phi) * Math.sin(lambda);\n        // result.x = 1/2 * Math.log((1 + B) / (1 - B));\n        result.x = Math.atanh(B);\n        result.y = Math.atan2(Math.tan(phi), Math.cos(lambda)) - this.m_phi0;\n        const outScale = 0.5 / Math.PI;\n        result.x = this.unitScale * (MathUtils_1.MathUtils.clamp(result.x * outScale + 0.5, 0, 1) + offset);\n        result.y = this.unitScale * MathUtils_1.MathUtils.clamp(result.y * outScale + 0.5, 0, 1);\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n    /** @override */\n    unprojectPoint(worldPoint) {\n        const tau = Math.PI * 2;\n        const nx = worldPoint.x / this.unitScale;\n        const ny = worldPoint.y / this.unitScale;\n        const offset = nx === 1 ? 0 : Math.floor(nx);\n        const x = tau * (nx - 0.5 - offset);\n        const y = tau * (ny - 0.5);\n        const z = worldPoint.z || 0;\n        const D = y + this.m_phi0;\n        const phi = Math.asin(Math.sin(D) / Math.cosh(x));\n        const lambda = this.m_lambda0 + Math.atan2(Math.sinh(x), Math.cos(D)) + offset * tau;\n        const geoPoint = GeoCoordinates_1.GeoCoordinates.fromRadians(phi, lambda, z);\n        return geoPoint;\n    }\n    /** @override */\n    projectBox(geoBox, result) {\n        const { north, south, east, west } = geoBox;\n        const pointsToCheck = [\n            geoBox.center,\n            geoBox.northEast,\n            geoBox.southWest,\n            new GeoCoordinates_1.GeoCoordinates(south, east),\n            new GeoCoordinates_1.GeoCoordinates(north, west)\n        ];\n        const E = TransverseMercatorUtils.POLE_EDGE_DEG;\n        const containsWestCut = west < -90 && east > -90;\n        const containsEastCut = west < 90 && east > 90;\n        const containsCenterX = west < 0 && east > 0;\n        const containsCenterY = west < E && east > -E && north > 0 && south < 0;\n        if (containsWestCut) {\n            pointsToCheck.push(new GeoCoordinates_1.GeoCoordinates(north, -90));\n            pointsToCheck.push(new GeoCoordinates_1.GeoCoordinates(south, -90));\n        }\n        if (containsEastCut) {\n            pointsToCheck.push(new GeoCoordinates_1.GeoCoordinates(north, 90));\n            pointsToCheck.push(new GeoCoordinates_1.GeoCoordinates(south, 90));\n        }\n        if (containsCenterX) {\n            pointsToCheck.push(new GeoCoordinates_1.GeoCoordinates(north, 0));\n            pointsToCheck.push(new GeoCoordinates_1.GeoCoordinates(south, 0));\n        }\n        if (containsCenterY) {\n            pointsToCheck.push(new GeoCoordinates_1.GeoCoordinates(0, west));\n            pointsToCheck.push(new GeoCoordinates_1.GeoCoordinates(0, east));\n        }\n        TransverseMercatorUtils.alignLatitude(pointsToCheck, pointsToCheck[0]);\n        const projected = pointsToCheck.map(p => this.projectPoint(p));\n        const vx = projected.map(p => p.x);\n        const vy = projected.map(p => p.y);\n        const vz = projected.map(p => p.z);\n        const minX = Math.min(...vx);\n        const minY = Math.min(...vy);\n        const minZ = Math.min(...vz);\n        const maxX = Math.max(...vx);\n        const maxY = Math.max(...vy);\n        const maxZ = Math.max(...vz);\n        if (!result) {\n            result = MathUtils_1.MathUtils.newEmptyBox3();\n        }\n        if (Box3Like_1.isBox3Like(result)) {\n            result.min.x = minX;\n            result.min.y = minY;\n            result.min.z = minZ;\n            result.max.x = maxX;\n            result.max.y = maxY;\n            result.max.z = maxZ;\n        }\n        else if (OrientedBox3Like_1.isOrientedBox3Like(result)) {\n            MathUtils_1.MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils_1.MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils_1.MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (minX + maxX) / 2;\n            result.position.y = (minY + maxY) / 2;\n            result.position.z = (minZ + maxZ) / 2;\n            result.extents.x = (maxX - minX) / 2;\n            result.extents.y = (maxY - minY) / 2;\n            result.extents.z = (maxZ - minZ) / 2;\n        }\n        else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n    /**\n     * There are 8 sub-regions on entire projection space\n     * where both longitude and latitude preserve direction.\n     * If bounding box hits more than one region, it should be splitted\n     * into sub-boxes by regions, (un)projected and then united again.\n     *\n     *\n     * directions in form [latitude / longitude]:\n     *    1 ┌─────────|─────────┐\n     *      │ dr / dl | dl / ul │\n     * 0.75 ----------|----------\n     *      │ ur / dr | ul / ur │\n     * 0.5  ----------|----------\n     *      │ ul / ur | ur / dr │\n     * 0.25 ----------|----------\n     *      │ dl / ul | dr / dl │\n     *      └─────────|─────────┘\n     *     0         0.5        1\n     *     @override\n     */\n    unprojectBox(worldBox) {\n        const s = this.unitScale;\n        const min = worldBox.min;\n        const max = worldBox.max;\n        const pointsToCheck = [\n            { x: (min.x + max.x) / 2, y: (min.y + max.y) / 2, z: 0 },\n            min,\n            max,\n            { x: min.x, y: max.y, z: 0 },\n            { x: max.x, y: min.y, z: 0 }\n        ];\n        const center = 0.5 * s;\n        const lowerQ = 0.25 * s;\n        const upperQ = 0.75 * s;\n        const containsCenterX = min.x < center && max.x > center;\n        const containsCenterY = min.y < center && max.y > center;\n        const containsLowerQY = min.y < lowerQ && max.y > lowerQ;\n        const containsUpperQY = min.y < upperQ && max.y > upperQ;\n        if (containsCenterY) {\n            pointsToCheck.push({ x: min.x, y: center, z: 0 });\n            pointsToCheck.push({ x: max.x, y: center, z: 0 });\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: center, z: 0 });\n            }\n        }\n        if (containsLowerQY) {\n            pointsToCheck.push({ x: min.x, y: lowerQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: lowerQ, z: 0 });\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: lowerQ, z: 0 });\n            }\n        }\n        if (containsUpperQY) {\n            pointsToCheck.push({ x: min.x, y: upperQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: upperQ, z: 0 });\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: upperQ, z: 0 });\n            }\n        }\n        const geoPoints = pointsToCheck.map(p => this.unprojectPoint(p));\n        TransverseMercatorUtils.alignLongitude(geoPoints, geoPoints[0]);\n        const latitudes = geoPoints.map(g => g.latitude);\n        const longitudes = geoPoints.filter(g => Math.abs(g.latitude) < 90).map(g => g.longitude);\n        const altitudes = geoPoints.map(g => g.altitude || 0);\n        const minGeo = new GeoCoordinates_1.GeoCoordinates(Math.min(...latitudes), Math.min(...longitudes), Math.min(...altitudes));\n        const maxGeo = new GeoCoordinates_1.GeoCoordinates(Math.max(...latitudes), Math.max(...longitudes), Math.max(...altitudes));\n        const geoBox = GeoBox_1.GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n    /** @override */\n    unprojectAltitude(worldPoint) {\n        return worldPoint.z;\n    }\n    /** @override */\n    groundDistance(worldPoint) {\n        return worldPoint.z;\n    }\n    /** @override */\n    scalePointToSurface(worldPoint) {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n    /** @override */\n    surfaceNormal(_worldPoint, normal) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        }\n        else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n}\nclass TransverseMercatorUtils {\n    /**\n     * There are two regions on projected space that have same geo coordinates,\n     * it's the entire lines   { x: [0..1], y: 0 } and { x: [0..1], y: 1 }\n     * they both have geo coordinates of   (0, [-90..+90])\n     * and should be aligned somehow to fall into first or second region\n     * to make proper bounding boxes, tile bounds, etc.\n     */\n    static alignLatitude(points, referencePoint) {\n        const EPSILON = 1e-9;\n        for (const point of points) {\n            if (point.latitude === 0) {\n                point.latitude = referencePoint.latitude * EPSILON;\n            }\n        }\n    }\n    /**\n     * There are two regions on projected plane,\n     * { x: 0.5, y: [0..0.25] }    and    { x: 0.5, y: [0.75..1] }\n     * that represent longitude edge where -180 and +180 met.\n     * Points falling in this regions should be aligned to get proper boxes etc.\n     */\n    static alignLongitude(points, referencePoint) {\n        const bad = referencePoint.longitude < 0 ? 180 : -180;\n        const good = referencePoint.longitude < 0 ? -180 : 180;\n        for (const point of points) {\n            if (point.longitude === bad) {\n                point.longitude = good;\n            }\n        }\n    }\n}\nexports.TransverseMercatorUtils = TransverseMercatorUtils;\nTransverseMercatorUtils.POLE_EDGE = 1.4844222297453323;\nTransverseMercatorUtils.POLE_EDGE_DEG = MathUtils_1.MathUtils.radToDeg(TransverseMercatorUtils.POLE_EDGE);\nTransverseMercatorUtils.POLE_RADIUS = 90 - TransverseMercatorUtils.POLE_EDGE_DEG;\nTransverseMercatorUtils.POLE_RADIUS_SQ = Math.pow(TransverseMercatorUtils.POLE_RADIUS, 2);\n/**\n * Transverse Mercator [[Projection]] used to convert geo coordinates to world coordinates\n * and vice versa.\n */\nexports.transverseMercatorProjection = new TransverseMercatorProjection(EarthConstants_1.EarthConstants.EQUATORIAL_CIRCUMFERENCE);\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/projection/TransverseMercatorProjection.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/FlatTileBoundingBoxGenerator.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/FlatTileBoundingBoxGenerator.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MathUtils_1 = __webpack_require__(/*! ../math/MathUtils */ \"./node_modules/@here/harp-geoutils/lib/math/MathUtils.js\");\n/**\n * `FlatTileBoundingBoxGenerator` generates bounding boxes in world and geo coordinates for a given\n * TilingScheme.\n */\nclass FlatTileBoundingBoxGenerator {\n    /**\n     * Creates a new `FlatTileBoundingBoxGenerator` that can generate bounding boxes for the given\n     * TilingScheme.\n     *\n     * @param tilingScheme The [[TilingScheme]] used to compute bounding boxes.\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     */\n    constructor(tilingScheme, minElevation = 0, maxElevation = 0) {\n        this.tilingScheme = tilingScheme;\n        this.minElevation = minElevation;\n        this.maxElevation = maxElevation;\n        this.m_tilingScheme = tilingScheme;\n        this.m_worldBox = tilingScheme.projection.worldExtent(minElevation, maxElevation);\n        const { min, max } = this.m_worldBox;\n        this.m_worldDimensions = { x: max.x - min.x, y: max.y - min.y, z: max.z - min.z };\n    }\n    /**\n     * Returns the [[Projection]] of the [[TilingScheme]].\n     */\n    get projection() {\n        return this.m_tilingScheme.projection;\n    }\n    /**\n     * Returns the [[SubdivisionScheme]] of the [[TilingScheme]].\n     */\n    get subdivisionScheme() {\n        return this.m_tilingScheme.subdivisionScheme;\n    }\n    /**\n     * Returns the bounding box in world coordinates of the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const worldBounds = new THREE.Box3();\n     * generator.getWorldBox(geoBox, worldBounds);\n     * console.log(worldBounds.getCenter());\n     * ```\n     *\n     * @param tileKey The TileKey.\n     * @param result The optional object used to store the resulting bounding box in world\n     * coordinates.\n     */\n    getWorldBox(tileKey, result) {\n        const level = tileKey.level;\n        const levelDimensionX = this.subdivisionScheme.getLevelDimensionX(level);\n        const levelDimensionY = this.subdivisionScheme.getLevelDimensionY(level);\n        const sizeX = this.m_worldDimensions.x / levelDimensionX;\n        const sizeY = this.m_worldDimensions.y / levelDimensionY;\n        const originX = this.m_worldBox.min.x + sizeX * tileKey.column;\n        const originY = this.m_worldBox.min.y + sizeY * tileKey.row;\n        if (!result) {\n            result = MathUtils_1.MathUtils.newEmptyBox3();\n        }\n        result.min.x = originX;\n        result.min.y = originY;\n        result.min.z = this.m_worldBox.min.z;\n        result.max.x = originX + sizeX;\n        result.max.y = originY + sizeY;\n        result.max.z = this.m_worldBox.max.z;\n        return result;\n    }\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const geoBox = generator.getGeoBox(worldBounds);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tileKey The [[TileKey]].\n     */\n    getGeoBox(tileKey) {\n        const worldBox = this.getWorldBox(tileKey);\n        return this.projection.unprojectBox(worldBox);\n    }\n}\nexports.FlatTileBoundingBoxGenerator = FlatTileBoundingBoxGenerator;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/FlatTileBoundingBoxGenerator.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/HalfQuadTreeSubdivisionScheme.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/HalfQuadTreeSubdivisionScheme.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass HalfQuadTreeSubdivisionScheme {\n    getSubdivisionX() {\n        return 2;\n    }\n    getSubdivisionY(level) {\n        return level === 0 ? 1 : 2;\n    }\n    getLevelDimensionX(level) {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level) {\n        // tslint:disable-next-line:no-bitwise\n        return level !== 0 ? 1 << (level - 1) : 1;\n    }\n}\n/**\n * A [[SubdivisionScheme]] used to represent half quadtrees. This particular subdivision scheme is\n * used by the HERE tiling scheme.\n */\nexports.halfQuadTreeSubdivisionScheme = new HalfQuadTreeSubdivisionScheme();\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/HalfQuadTreeSubdivisionScheme.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/HereTilingScheme.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/HereTilingScheme.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst EquirectangularProjection_1 = __webpack_require__(/*! ../projection/EquirectangularProjection */ \"./node_modules/@here/harp-geoutils/lib/projection/EquirectangularProjection.js\");\nconst HalfQuadTreeSubdivisionScheme_1 = __webpack_require__(/*! ./HalfQuadTreeSubdivisionScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/HalfQuadTreeSubdivisionScheme.js\");\nconst TilingScheme_1 = __webpack_require__(/*! ./TilingScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/TilingScheme.js\");\n/**\n * [[TilingScheme]] used by most of the data published by HERE.\n *\n * The `hereTilingScheme` features a half quadtree subdivision scheme and an equirectangular\n * projection.\n */\nexports.hereTilingScheme = new TilingScheme_1.TilingScheme(HalfQuadTreeSubdivisionScheme_1.halfQuadTreeSubdivisionScheme, EquirectangularProjection_1.normalizedEquirectangularProjection);\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/HereTilingScheme.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/MercatorTilingScheme.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/MercatorTilingScheme.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MercatorProjection_1 = __webpack_require__(/*! ../projection/MercatorProjection */ \"./node_modules/@here/harp-geoutils/lib/projection/MercatorProjection.js\");\nconst QuadTreeSubdivisionScheme_1 = __webpack_require__(/*! ./QuadTreeSubdivisionScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.js\");\nconst TilingScheme_1 = __webpack_require__(/*! ./TilingScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/TilingScheme.js\");\n/**\n * The [[TilingScheme]] used by the HERE web tiles.\n *\n * The `mercatorTilingScheme` features a quadtree subdivision scheme and a Mercator projection.\n */\nexports.mercatorTilingScheme = new TilingScheme_1.TilingScheme(QuadTreeSubdivisionScheme_1.quadTreeSubdivisionScheme, MercatorProjection_1.mercatorProjection);\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/MercatorTilingScheme.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/PolarTilingScheme.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/PolarTilingScheme.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst TransverseMercatorProjection_1 = __webpack_require__(/*! ../projection/TransverseMercatorProjection */ \"./node_modules/@here/harp-geoutils/lib/projection/TransverseMercatorProjection.js\");\nconst QuadTreeSubdivisionScheme_1 = __webpack_require__(/*! ./QuadTreeSubdivisionScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.js\");\nconst TilingScheme_1 = __webpack_require__(/*! ./TilingScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/TilingScheme.js\");\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and\n * transverse Mercator projection.\n */\nexports.polarTilingScheme = new TilingScheme_1.TilingScheme(QuadTreeSubdivisionScheme_1.quadTreeSubdivisionScheme, TransverseMercatorProjection_1.transverseMercatorProjection);\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/PolarTilingScheme.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/QuadTree.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/QuadTree.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst TileKey_1 = __webpack_require__(/*! ./TileKey */ \"./node_modules/@here/harp-geoutils/lib/tiling/TileKey.js\");\n/**\n * A class used to represent a quadtree.\n */\nclass QuadTree {\n    /**\n     * Constructs a new `QuadTree` for the given [[TilingScheme]].\n     *\n     * Example:\n     * ```typescript\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * const geoBox = quadTree.getGeoBox(tileKey);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tilingScheme The TilingScheme used by this `QuadTree`.\n     */\n    constructor(tilingScheme) {\n        this.tilingScheme = tilingScheme;\n    }\n    /**\n     * Visits this `QuadTree` and invoke the given accept method with the current [[TileKey]] and\n     * its bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = new GeoCoordinates(latitude, longitude);\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * quadTree.visit((tileKey, geoBox) => {\n     *     if (geoBox.contains(geoPos)) {\n     *         console.log(\"tile\", tileKey, \"contains\", geoPos);\n     *         return tileKey.level < 14; // stop visiting the quadtree if the level is >= 14.\n     *     }\n     *     return false; // stop visiting the quadtree,\n     *                   // the tile's geoBox doesn't contain the given coordinates.\n     * });\n     * ```\n     *\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visit(accept) {\n        this.visitTileKey(TileKey_1.TileKey.fromRowColumnLevel(0, 0, 0), accept);\n    }\n    /**\n     * Visits the subtree starting from the given tile.\n     *\n     * @param tileKey The root of the subtree that should be visited.\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visitTileKey(tileKey, accept) {\n        const geoBox = this.tilingScheme.getGeoBox(tileKey);\n        if (!accept(tileKey, geoBox)) {\n            return;\n        }\n        for (const subTileKey of this.tilingScheme.getSubTileKeys(tileKey)) {\n            this.visitTileKey(subTileKey, accept);\n        }\n    }\n}\nexports.QuadTree = QuadTree;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/QuadTree.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass QuadTreeSubdivisionScheme {\n    getSubdivisionX() {\n        return 2;\n    }\n    getSubdivisionY() {\n        return 2;\n    }\n    getLevelDimensionX(level) {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level) {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n}\n/**\n * [[SubdivisionScheme]] representing a quadtree.\n */\nexports.quadTreeSubdivisionScheme = new QuadTreeSubdivisionScheme();\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/SubTiles.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/SubTiles.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst TileKey_1 = __webpack_require__(/*! ./TileKey */ \"./node_modules/@here/harp-geoutils/lib/tiling/TileKey.js\");\nclass SubTiles {\n    constructor(tileKey, sizeX, sizeY) {\n        this.tileKey = tileKey;\n        this.sizeX = sizeX;\n        this.sizeY = sizeY;\n    }\n    [Symbol.iterator]() {\n        return this.sizeX === 2 && this.sizeY === 2\n            ? SubTiles.ZCurveIterator(this.tileKey)\n            : SubTiles.RowColumnIterator(this.tileKey, this.sizeX, this.sizeY);\n    }\n}\nexports.SubTiles = SubTiles;\n(function (SubTiles) {\n    function* RowColumnIterator(parentKey, sizeX, sizeY) {\n        for (let y = 0; y < sizeY; y++) {\n            for (let x = 0; x < sizeX; x++) {\n                yield TileKey_1.TileKey.fromRowColumnLevel(parentKey.row * sizeY + y, parentKey.column * sizeX + x, parentKey.level + 1);\n            }\n        }\n    }\n    SubTiles.RowColumnIterator = RowColumnIterator;\n    function* ZCurveIterator(parentKey) {\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < 4; i++) {\n            yield TileKey_1.TileKey.fromRowColumnLevel((parentKey.row << 1) | (i >> 1), (parentKey.column << 1) | (i & 1), parentKey.level + 1);\n        }\n        // tslint:enableno-bitwise\n    }\n    SubTiles.ZCurveIterator = ZCurveIterator;\n})(SubTiles = exports.SubTiles || (exports.SubTiles = {}));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/SubTiles.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/TileKey.js":
/*!****************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/TileKey.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000 // Math.pow(2, 52), highest bit that can be set correctly.\n];\n/**\n * The `TileKey` instances are used to address a tile in a quadtree.\n *\n * A tile key is defined by a row, a column, and a level. The tree has a root at level 0, with one\n * single tile. On every level, each tile is divided into four children (therefore the name\n * quadtree).\n *\n * Within each [[level]], any particular tile is addressed with [[row]] and [[column]]. The number\n * of rows and columns in each level is 2 to the power of the level. This means: On level 0, only\n * one tile exists, [[columnsAtLevel]]() and [[rowsAtLevel]]() are both 1. On level 1, 4 tiles\n * exist, in 2 rows and 2 columns. On level 2 we have 16 tiles, in 4 rows and 4 columns. And so on.\n *\n * A tile key is usually created using [[fromRowColumnLevel]]() method.\n *\n * `TileKey` instances are immutable, all members return new instances of `TileKey` and do not\n * modify the original object.\n *\n * Utility functions like [[parent]](), [[changedLevelBy]](), and [[changedLevelTo]]() allow for\n * easy vertical navigation of the tree. The number of available rows and columns in the tile's\n * level is given with [[rowCount]]() and [[columnCount]]().\n *\n * Tile keys can be created from and converted into various alternative formats:\n *\n *  - [[toQuadKey]]() / [[fromQuadKey]]() - string representation 4-based\n *  - [[toHereTile]]() / [[fromHereTile]]() - string representation 10-based\n *  - [[mortonCode]]() / [[fromMortonCode]]() - number representation\n *\n * Note - as JavaScript's number type can hold 53 bits in its mantissa, only levels up to 26 can be\n * represented in the number representation returned by [[mortonCode]]().\n */\nclass TileKey {\n    /**\n     * Constructs a new immutable instance of a `TileKey`.\n     *\n     * For the better readability, [[TileKey.fromRowColumnLevel]] should be preferred.\n     *\n     * Note - row and column must not be greater than the maximum rows/columns for the given level.\n     *\n     * @param row Represents the row in the quadtree.\n     * @param column Represents the column in the quadtree.\n     * @param level Represents the level in the quadtree.\n     */\n    constructor(row, column, level) {\n        this.row = row;\n        this.column = column;\n        this.level = level;\n    }\n    /**\n     * Creates a tile key.\n     *\n     * @param row The requested row. Must be less than 2 to the power of level.\n     * @param column The requested column. Must be less than 2 to the power of level.\n     * @param level The requested level.\n     */\n    static fromRowColumnLevel(row, column, level) {\n        return new TileKey(row, column, level);\n    }\n    /**\n     * Creates a tile key from a quad string.\n     *\n     * The quad string can be created with [[toQuadKey]].\n     *\n     * @param quadkey The quadkey to convert.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromQuadKey(quadkey) {\n        const level = quadkey.length;\n        let row = 0;\n        let column = 0;\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < quadkey.length; ++i) {\n            const mask = 1 << i;\n            const d = parseInt(quadkey.charAt(level - i - 1), 10);\n            if (d & 0x1) {\n                column |= mask;\n            }\n            if (d & 0x2) {\n                row |= mask;\n            }\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n    /**\n     * Creates a tile key from a numeric Morton code representation.\n     *\n     * You can convert a tile key into a numeric Morton code with [[mortonCode]].\n     *\n     * @param quadKey64 The Morton code to be converted.\n     * @returns A new instance of [[TileKey]].\n     */\n    static fromMortonCode(quadKey64) {\n        let level = 0;\n        let row = 0;\n        let column = 0;\n        let quadKey = quadKey64;\n        // tslint:disable:no-bitwise\n        while (quadKey > 1) {\n            const mask = 1 << level;\n            if (quadKey & 0x1) {\n                column |= mask;\n            }\n            if (quadKey & 0x2) {\n                row |= mask;\n            }\n            level++;\n            quadKey = (quadKey - (quadKey & 0x3)) / 4;\n        }\n        // tslint:enable:no-bitwise\n        const result = TileKey.fromRowColumnLevel(row, column, level);\n        result.m_mortonCode = quadKey64;\n        return result;\n    }\n    /**\n     * Creates a tile key from a heretile code string.\n     *\n     * The string can be created with [[toHereTile]].\n     *\n     * @param quadkey64 The string representation of the HERE tile key.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromHereTile(quadkey64) {\n        const result = TileKey.fromMortonCode(parseInt(quadkey64, 10));\n        result.m_hereTile = quadkey64;\n        return result;\n    }\n    /**\n     * Returns the number of available columns at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of columns.\n     * @returns The available columns at the given level.\n     */\n    static columnsAtLevel(level) {\n        return Math.pow(2, level);\n    }\n    /**\n     * Returns the number of available rows at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of rows.\n     * @returns The available rows at the given level.\n     */\n    static rowsAtLevel(level) {\n        return Math.pow(2, level);\n    }\n    /**\n     * Returns the closest matching `TileKey` in a cartesian coordinate system.\n     *\n     * @param level The level for the tile key.\n     * @param coordX The X coordinate.\n     * @param coordY The Y coordinate.\n     * @param totalWidth The maximum X coordinate.\n     * @param totalHeight The maximum Y coordinate.\n     * @returns A new tile key at the given level that includes the given coordinates.\n     */\n    static atCoords(level, coordX, coordY, totalWidth, totalHeight) {\n        return TileKey.fromRowColumnLevel(Math.floor(coordY / (totalHeight / TileKey.rowsAtLevel(level))), Math.floor(coordX / (totalWidth / TileKey.columnsAtLevel(level))), level);\n    }\n    /**\n     * Computes the Morton code of the parent tile key of the given Morton code.\n     *\n     * Note: The parent key of the root key is the root key itself.\n     *\n     * @param mortonCode A Morton code, for example, obtained from [[mortonCode]].\n     * @returns The Morton code of the parent tile.\n     */\n    static parentMortonCode(mortonCode) {\n        return Math.floor(mortonCode / 4);\n    }\n    /**\n     * Returns a tile key representing the parent of the tile addressed by this tile key.\n     *\n     * Throws an exception is this tile is already the root.\n     */\n    parent() {\n        if (this.level === 0) {\n            throw new Error(\"Cannot get the parent of the root tile key\");\n        }\n        // tslint:disable-next-line:no-bitwise\n        return TileKey.fromRowColumnLevel(this.row >>> 1, this.column >>> 1, this.level - 1);\n    }\n    /**\n     * Returns a new tile key at a level that differs from this tile's level by delta.\n     *\n     * Equivalent to `changedLevelTo(level() + delta)`.\n     *\n     * Note - root key is returned if `delta` is smaller than the level of this tile key.\n     *\n     * @param delta The numeric difference between the current level and the requested level.\n     */\n    changedLevelBy(delta) {\n        const level = Math.max(0, this.level + delta);\n        let row = this.row;\n        let column = this.column;\n        // tslint:disable:no-bitwise\n        if (delta >= 0) {\n            row <<= delta;\n            column <<= delta;\n        }\n        else {\n            row >>>= -delta;\n            column >>>= -delta;\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n    /**\n     * Returns a new tile key at the requested level.\n     *\n     * If the requested level is smaller than the tile's level, then the key of an ancestor of this\n     * tile is returned. If the requested level is larger than the tile's level, then the key of\n     * first child or grandchild of this tile is returned, for example, the child with the lowest\n     * row and column number. If the requested level equals this tile's level, then the tile key\n     * itself is returned. If the requested level is negative, the root tile key is returned.\n     *\n     * @param level The requested level.\n     */\n    changedLevelTo(level) {\n        return this.changedLevelBy(level - this.level);\n    }\n    /**\n     * Converts the tile key to a numeric code representation.\n     *\n     * You can create a tile key from a numeric Morton code with [[fromMortonCode]].\n     *\n     * Note - only levels <= 26 are supported.\n     */\n    mortonCode() {\n        if (this.m_mortonCode === undefined) {\n            let column = this.column;\n            let row = this.row;\n            // tslint:disable:no-bitwise\n            let result = powerOfTwo[this.level << 1];\n            for (let i = 0; i < this.level; ++i) {\n                if (column & 0x1) {\n                    result += powerOfTwo[2 * i];\n                }\n                if (row & 0x1) {\n                    result += powerOfTwo[2 * i + 1];\n                }\n                column >>>= 1;\n                row >>>= 1;\n            }\n            // tslint:enable:no-bitwise\n            this.m_mortonCode = result;\n        }\n        return this.m_mortonCode;\n    }\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * The string is a quadkey Morton code representation as a string.\n     *\n     * You can convert back from a quadkey string with [[fromHereTile]].\n     */\n    toHereTile() {\n        if (this.m_hereTile === undefined) {\n            this.m_hereTile = this.mortonCode().toString();\n        }\n        return this.m_hereTile;\n    }\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * If the tile is the root tile, the quadkey is '-'. Otherwise the string is a number to the\n     * base of 4, but without the leading 1, with the following properties:\n     *  1. the number of digits equals the level.\n     *  2. removing the last digit gives the parent tile's quadkey string, i.e. appending 0,1,2,3\n     *     to a quadkey string gives the tiles's children.\n     *\n     * You can convert back from a quadkey string with [[fromQuadKey]].\n     */\n    toQuadKey() {\n        let result = \"\";\n        // tslint:disable:no-bitwise\n        for (let i = this.level; i > 0; --i) {\n            const mask = 1 << (i - 1);\n            const col = (this.column & mask) !== 0;\n            const row = (this.row & mask) !== 0;\n            if (col && row) {\n                result += \"3\";\n            }\n            else if (row) {\n                result += \"2\";\n            }\n            else if (col) {\n                result += \"1\";\n            }\n            else {\n                result += \"0\";\n            }\n        }\n        // tslint:enable:no-bitwise\n        return result;\n    }\n    /**\n     * Equality operator.\n     *\n     * @param qnr The tile key to compare to.\n     * @returns `true` if this tile key has identical row, column and level, `false` otherwise.\n     */\n    equals(qnr) {\n        return this.row === qnr.row && this.column === qnr.column && this.level === qnr.level;\n    }\n    /**\n     * Returns the absolute quadkey that is constructed from its sub quadkey.\n     *\n     * @param sub The sub key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubKey(sub) {\n        const subQuad = TileKey.fromQuadKey(sub.length === 0 ? \"-\" : sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(child.row + subQuad.row, child.column + subQuad.column, child.level);\n    }\n    /**\n     * Returns the absolute quadkey that is constructed from its sub HERE tile key.\n     *\n     * @param sub The sub HERE key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubHereTile(sub) {\n        const subQuad = TileKey.fromHereTile(sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(child.row + subQuad.row, child.column + subQuad.column, child.level);\n    }\n    /**\n     * Returns a sub quadkey that is relative to its parent.\n     *\n     * This function can be used to generate sub keys that are relative to a parent that is delta\n     * levels up in the quadtree.\n     *\n     * This function can be used to create shortened keys for quads on lower levels if the parent is\n     * known.\n     *\n     * Note - the sub quadkeys fit in a 16-bit unsigned integer if the `delta` is smaller than 8. If\n     * `delta` is smaller than 16, the sub quadkey fits into an unsigned 32-bit integer.\n     *\n     * Deltas larger than 16 are not supported.\n     *\n     * @param delta The number of levels relative to its parent quadkey. Must be greater or equal to\n     * 0 and smaller than 16.\n     * @returns The quadkey relative to its parent that is `delta` levels up the tree.\n     */\n    getSubHereTile(delta) {\n        const key = this.mortonCode();\n        // tslint:disable-next-line:no-bitwise\n        const msb = 1 << (delta * 2);\n        const mask = msb - 1;\n        // tslint:disable-next-line:no-bitwise\n        const result = (key & mask) | msb;\n        return result.toString();\n    }\n    /**\n     * Returns the number of available rows in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    rowCount() {\n        return TileKey.rowsAtLevel(this.level);\n    }\n    /**\n     * Returns the number of available columns in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    columnCount() {\n        return TileKey.columnsAtLevel(this.level);\n    }\n}\nexports.TileKey = TileKey;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/TileKey.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/TileKeyUtils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/TileKeyUtils.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GeoCoordinates_1 = __webpack_require__(/*! ../coordinates/GeoCoordinates */ \"./node_modules/@here/harp-geoutils/lib/coordinates/GeoCoordinates.js\");\nconst TileKey_1 = __webpack_require__(/*! ./TileKey */ \"./node_modules/@here/harp-geoutils/lib/tiling/TileKey.js\");\nclass TileKeyUtils {\n    static geoCoordinatesToTileKey(tilingScheme, geoPoint, level) {\n        const projection = tilingScheme.projection;\n        const worldPoint = projection.projectPoint(geoPoint);\n        return this.worldCoordinatesToTileKey(tilingScheme, worldPoint, level);\n    }\n    static worldCoordinatesToTileKey(tilingScheme, worldPoint, level) {\n        const projection = tilingScheme.projection;\n        const subdivisionScheme = tilingScheme.subdivisionScheme;\n        const cx = subdivisionScheme.getLevelDimensionX(level);\n        const cy = subdivisionScheme.getLevelDimensionY(level);\n        const { min, max } = projection.worldExtent(0, 0);\n        const worldSizeX = max.x - min.x;\n        const worldSizeY = max.y - min.y;\n        if (worldPoint.x < min.x || worldPoint.x > max.x) {\n            return null;\n        }\n        if (worldPoint.y < min.y || worldPoint.y > max.y) {\n            return null;\n        }\n        const column = Math.min(cx - 1, Math.floor((cx * (worldPoint.x - min.x)) / worldSizeX));\n        const row = Math.min(cy - 1, Math.floor((cy * (worldPoint.y - min.y)) / worldSizeY));\n        return TileKey_1.TileKey.fromRowColumnLevel(row, column, level);\n    }\n    static geoRectangleToTileKeys(tilingScheme, geoBox, level) {\n        const wrap = (value, lower, upper) => {\n            if (value < lower) {\n                return upper - ((lower - value) % (upper - lower));\n            }\n            return lower + ((value - lower) % (upper - lower));\n        };\n        const clamp = (x, minVal, maxVal) => {\n            return Math.min(Math.max(x, minVal), maxVal);\n        };\n        // Clamp at the poles and wrap around the international date line.\n        const southWestLongitude = wrap(geoBox.southWest.longitudeInRadians, -Math.PI, Math.PI);\n        const southWestLatitude = clamp(geoBox.southWest.latitudeInRadians, -(Math.PI * 0.5), Math.PI * 0.5);\n        const northEastLongitude = wrap(geoBox.northEast.longitudeInRadians, -Math.PI, Math.PI);\n        const northEastLatitude = clamp(geoBox.northEast.latitudeInRadians, -(Math.PI * 0.5), Math.PI * 0.5);\n        const minTileKey = TileKeyUtils.geoCoordinatesToTileKey(tilingScheme, GeoCoordinates_1.GeoCoordinates.fromRadians(southWestLatitude, southWestLongitude), level);\n        const maxTileKey = TileKeyUtils.geoCoordinatesToTileKey(tilingScheme, GeoCoordinates_1.GeoCoordinates.fromRadians(northEastLatitude, northEastLongitude), level);\n        const columnCount = tilingScheme.subdivisionScheme.getLevelDimensionX(level);\n        if (!minTileKey || !maxTileKey) {\n            throw new Error(\"Invalid coordinates\");\n        }\n        const minColumn = minTileKey.column;\n        let maxColumn = maxTileKey.column;\n        // wrap around case\n        if (southWestLongitude > northEastLongitude) {\n            if (maxColumn !== minColumn) {\n                maxColumn += columnCount;\n            }\n            else {\n                // do not duplicate\n                maxColumn += columnCount - 1;\n            }\n        }\n        const minRow = Math.min(minTileKey.row, maxTileKey.row);\n        const maxRow = Math.max(minTileKey.row, maxTileKey.row);\n        const keys = new Array();\n        for (let row = minRow; row <= maxRow; ++row) {\n            for (let column = minColumn; column <= maxColumn; ++column) {\n                keys.push(TileKey_1.TileKey.fromRowColumnLevel(row, column % columnCount, level));\n            }\n        }\n        return keys;\n    }\n}\nexports.TileKeyUtils = TileKeyUtils;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/TileKeyUtils.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/TileTreeTraverse.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/TileTreeTraverse.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SubTiles_1 = __webpack_require__(/*! ./SubTiles */ \"./node_modules/@here/harp-geoutils/lib/tiling/SubTiles.js\");\nclass TileTreeTraverse {\n    constructor(subdivisionScheme) {\n        this.m_subdivisionScheme = subdivisionScheme;\n    }\n    subTiles(tileKey) {\n        const divX = this.m_subdivisionScheme.getSubdivisionX(tileKey.level);\n        const divY = this.m_subdivisionScheme.getSubdivisionY(tileKey.level);\n        return new SubTiles_1.SubTiles(tileKey, divX, divY);\n    }\n}\nexports.TileTreeTraverse = TileTreeTraverse;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/TileTreeTraverse.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/TilingScheme.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/TilingScheme.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst FlatTileBoundingBoxGenerator_1 = __webpack_require__(/*! ./FlatTileBoundingBoxGenerator */ \"./node_modules/@here/harp-geoutils/lib/tiling/FlatTileBoundingBoxGenerator.js\");\nconst TileKeyUtils_1 = __webpack_require__(/*! ./TileKeyUtils */ \"./node_modules/@here/harp-geoutils/lib/tiling/TileKeyUtils.js\");\nconst TileTreeTraverse_1 = __webpack_require__(/*! ./TileTreeTraverse */ \"./node_modules/@here/harp-geoutils/lib/tiling/TileTreeTraverse.js\");\n/**\n * The `TilingScheme` represents how the data is tiled.\n */\nclass TilingScheme {\n    /**\n     * Constructs a new `TilingScheme` with the given subdivision scheme and projection.\n     *\n     * @param subdivisionScheme The subdivision scheme used by this `TilingScheme`.\n     * @param projection The projection used by this `TilingScheme`.\n     */\n    constructor(subdivisionScheme, projection) {\n        this.subdivisionScheme = subdivisionScheme;\n        this.projection = projection;\n        this.boundingBoxGenerator = new FlatTileBoundingBoxGenerator_1.FlatTileBoundingBoxGenerator(this);\n        this.tileTreeTraverse = new TileTreeTraverse_1.TileTreeTraverse(subdivisionScheme);\n    }\n    /**\n     * Returns the sub tile keys of the given tile.\n     *\n     * @param tileKey The [[TileKey]].\n     * @returns The list of the sub tile keys.\n     */\n    getSubTileKeys(tileKey) {\n        return this.tileTreeTraverse.subTiles(tileKey);\n    }\n    /**\n     * Gets the [[TileKey]] from the given geo position and level.\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKey(geoPoint, level) {\n        return TileKeyUtils_1.TileKeyUtils.geoCoordinatesToTileKey(this, geoPoint, level);\n    }\n    /**\n     * Gets the list of [[TileKey]]s contained in the given [[GeoBox]].\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKeys(geoBox, level) {\n        return TileKeyUtils_1.TileKeyUtils.geoRectangleToTileKeys(this, geoBox, level);\n    }\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * @param tileKey The `TileKey`.\n     */\n    getGeoBox(tileKey) {\n        return this.boundingBoxGenerator.getGeoBox(tileKey);\n    }\n    /**\n     * Returns the bounding box in world coordinates.\n     *\n     * @param tileKey The `TileKey`.\n     * @param result The optional object that will contain the resulting bounding box.\n     */\n    getWorldBox(tileKey, result) {\n        return this.boundingBoxGenerator.getWorldBox(tileKey, result);\n    }\n}\nexports.TilingScheme = TilingScheme;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/TilingScheme.js?");

/***/ }),

/***/ "./node_modules/@here/harp-geoutils/lib/tiling/WebMercatorTilingScheme.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@here/harp-geoutils/lib/tiling/WebMercatorTilingScheme.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MercatorProjection_1 = __webpack_require__(/*! ../projection/MercatorProjection */ \"./node_modules/@here/harp-geoutils/lib/projection/MercatorProjection.js\");\nconst QuadTreeSubdivisionScheme_1 = __webpack_require__(/*! ./QuadTreeSubdivisionScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.js\");\nconst TilingScheme_1 = __webpack_require__(/*! ./TilingScheme */ \"./node_modules/@here/harp-geoutils/lib/tiling/TilingScheme.js\");\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and web Mercator projection.\n */\nexports.webMercatorTilingScheme = new TilingScheme_1.TilingScheme(QuadTreeSubdivisionScheme_1.quadTreeSubdivisionScheme, MercatorProjection_1.webMercatorProjection);\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-geoutils/lib/tiling/WebMercatorTilingScheme.js?");

/***/ }),

/***/ "./node_modules/@here/harp-lines/lib/Lines.js":
/*!****************************************************!*\
  !*** ./node_modules/@here/harp-lines/lib/Lines.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\n// Preallocate temp variables used during line generation.\nconst tmpV = new THREE.Vector3();\nconst tmpNormal = new THREE.Vector3();\nconst tmpTangent0 = new THREE.Vector3();\nconst tmpTangent1 = new THREE.Vector3();\nconst tmpBitangent = new THREE.Vector3();\nconst SEGMENT_OFFSET = 0.1;\n/**\n * Declares all the vertex attributes used for rendering a line using the [[SolidLineMaterial]].\n */\n/** Base line vertex attributes. */\nconst LINE_VERTEX_ATTRIBUTES = {\n    attributes: [\n        // The \"extrusionCoord\" is a vec4 which represents:\n        // xy: Extrusion coordinates\n        // sign(xy): Extrusion direction\n        // z: Line length\n        { name: \"extrusionCoord\", itemSize: 3, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 3 },\n        { name: \"tangent\", itemSize: 3, offset: 6 },\n        { name: \"bitangent\", itemSize: 4, offset: 9 }\n    ],\n    stride: 13\n};\n/** Optional normal and uv coordinates. */\nconst NORMAL_UV_VERTEX_ATTRIBUTES = {\n    attributes: [\n        { name: \"uv\", itemSize: 2, offset: LINE_VERTEX_ATTRIBUTES.stride },\n        { name: \"normal\", itemSize: 3, offset: LINE_VERTEX_ATTRIBUTES.stride + 2 }\n    ],\n    stride: 5\n};\n/** Base line vertex attributes plus normals and uv coordinates. */\nconst LINE_VERTEX_ATTRIBUTES_NUV = {\n    attributes: [...LINE_VERTEX_ATTRIBUTES.attributes, ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes],\n    stride: LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n/**\n * Declares all the vertex attributes used for rendering a line using the\n * [[HighPrecisionLineMaterial]].\n */\nconst HP_LINE_VERTEX_ATTRIBUTES = {\n    attributes: [\n        { name: \"extrusionCoord\", itemSize: 2, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 2 },\n        { name: \"positionLow\", itemSize: 3, offset: 5 },\n        { name: \"tangent\", itemSize: 3, offset: 8 },\n        { name: \"bitangent\", itemSize: 4, offset: 11 }\n    ],\n    stride: 15\n};\n/** High precision line vertex attributes plus normals and uv coordinates. */\nconst HP_LINE_VERTEX_ATTRIBUTES_NUV = {\n    attributes: [\n        ...HP_LINE_VERTEX_ATTRIBUTES.attributes,\n        ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes\n    ],\n    stride: HP_LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n/**\n * Class that holds the vertex and index attributes for a [[Lines]] object.\n */\nclass LineGeometry {\n    constructor() {\n        this.vertices = [];\n        this.vertexColors = [];\n        this.indices = [];\n    }\n}\nexports.LineGeometry = LineGeometry;\nfunction getVertexDescriptor(hasNormalsAndUvs, highPrecision) {\n    if (highPrecision) {\n        return hasNormalsAndUvs ? HP_LINE_VERTEX_ATTRIBUTES_NUV : HP_LINE_VERTEX_ATTRIBUTES;\n    }\n    else {\n        return hasNormalsAndUvs ? LINE_VERTEX_ATTRIBUTES_NUV : LINE_VERTEX_ATTRIBUTES;\n    }\n}\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param center Center of the polyline.\n * @param polyline Array of `numbers` describing a polyline.\n * @param offsets Array of `numbers` representing line segment offsets.\n * @param uvs Array of `numbers` representing texture coordinates.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n * @param highPrecision If `true` will create high-precision vertex information.\n */\nfunction createLineGeometry(center, polyline, offsets, uvs, colors, geometry = new LineGeometry(), highPrecision = false) {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n    const stride = getVertexDescriptor(uvs !== undefined, highPrecision).stride;\n    const pointCount = polyline.length / 3;\n    const segments = new Array(pointCount);\n    const tangents = new Array(polyline.length - 3);\n    const baseVertex = geometry.vertices.length / stride;\n    const hasSegmentOffsets = offsets !== undefined && offsets.length > 0;\n    const hasTexCoords = uvs !== undefined && uvs.length > 0;\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n    harp_utils_1.assert(!hasSegmentOffsets || offsets.length === pointCount);\n    harp_utils_1.assert(!hasTexCoords || uvs.length / 2 === pointCount);\n    harp_utils_1.assert(!vertexColors || colors.length === polyline.length);\n    // Compute segments and tangents.\n    let sum = SEGMENT_OFFSET;\n    segments[0] = sum;\n    let isFlat = true;\n    for (let i = 0; i < pointCount - 1; ++i) {\n        let sqrLength = 0;\n        for (let j = 0; j < 3; ++j) {\n            const d = polyline[(i + 1) * 3 + j] - polyline[i * 3 + j];\n            tangents[i * 3 + j] = d;\n            sqrLength += d * d;\n            isFlat = j === 2 ? isFlat && polyline[(i + 1) * 3 + j] === 0.0 : isFlat;\n        }\n        const len = Math.sqrt(sqrLength);\n        sum = sum + len;\n        segments[i + 1] = sum;\n    }\n    const lineCoverage = hasSegmentOffsets\n        ? Math.abs(offsets[offsets.length - 1] - offsets[0])\n        : 1.0;\n    const lineLength = segments[segments.length - 1] / lineCoverage;\n    // Override the segments if offsets are explicitly provided.\n    if (hasSegmentOffsets) {\n        for (let i = 0; i < pointCount; ++i) {\n            segments[i] = offsets[i] * lineLength + SEGMENT_OFFSET;\n        }\n    }\n    // Check if we're working with a closed line.\n    let isClosed = true;\n    for (let j = 0; j < 3; ++j) {\n        isClosed = isClosed && polyline[j] === polyline[polyline.length - 3 + j];\n    }\n    const tmpVertices = [];\n    const addVertexPair = (i, T1, T2, segment, extrusionCoord) => {\n        tmpVertices.length = 0;\n        // Store the segment and extrusionCoord attributes.\n        geometry.vertices.push(segment, extrusionCoord * -1, lineLength);\n        tmpVertices.push(segment, extrusionCoord * 1, lineLength);\n        // Store the position attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            if (!highPrecision) {\n                geometry.vertices.push(polyline[i * 3 + j]);\n                tmpVertices.push(polyline[i * 3 + j]);\n            }\n            else {\n                const highComp = Math.fround(polyline[i * 3 + j]);\n                const lowComp = polyline[i * 3 + j] - highComp;\n                geometry.vertices.push(highComp, lowComp);\n                tmpVertices.push(highComp, lowComp);\n            }\n            tmpNormal.setComponent(j, polyline[i * 3 + j]);\n        }\n        // Store the bitangent attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            tmpTangent0.setComponent(j, tangents[T1 + j]);\n            tmpTangent1.setComponent(j, tangents[T2 + j]);\n        }\n        tmpTangent0.normalize();\n        geometry.vertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        tmpVertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        const angle = computeBitangent(isFlat ? tmpNormal.set(0, 0, 1) : tmpNormal.add(center).normalize(), tmpTangent0, tmpTangent1.normalize(), tmpBitangent);\n        geometry.vertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n        tmpVertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n        if (hasTexCoords) {\n            // uvs\n            geometry.vertices.push(uvs[i * 2], uvs[i * 2 + 1]);\n            tmpVertices.push(uvs[i * 2], uvs[i * 2 + 1]);\n            // normals\n            geometry.vertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n            tmpVertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n        }\n        geometry.vertices.push(...tmpVertices);\n        // Add vertex colors (if supplied).\n        if (vertexColors) {\n            geometry.vertexColors.push(colors[i * 3], colors[i * 3 + 1], colors[i * 3 + 2]);\n            geometry.vertexColors.push(colors[i * 3], colors[i * 3 + 1], colors[i * 3 + 2]);\n        }\n    };\n    for (let i = 0; i < pointCount; ++i) {\n        // Retrieve the per-point tangents.\n        const T1 = isClosed && i === 0 ? tangents.length - 3 : Math.max(0, i - 1) * 3;\n        const T2 = isClosed && i === pointCount - 1 ? 0 : Math.min(i * 3, tangents.length - 3);\n        // Process v0 and v1.\n        if (i > 0) {\n            addVertexPair(i, T1, T2, segments[i - 1], segments[i]);\n        }\n        // Process v2 and v3.\n        if (i + 1 < pointCount) {\n            addVertexPair(i, T1, T2, segments[Math.min(i, segments.length - 1)] * -1, segments[Math.min(i + 1, segments.length - 1)]);\n        }\n    }\n    // Store the triangle indices in the final index buffer.\n    for (let i = 0; i < pointCount - 1; ++i) {\n        const base = baseVertex + i * 4;\n        geometry.indices.push(base, base + 1, base + 2, base + 2, base + 1, base + 3);\n    }\n    return geometry;\n}\nexports.createLineGeometry = createLineGeometry;\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param polyline Array of `numbers` describing a polyline.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n */\nfunction createSimpleLineGeometry(polyline, colors, geometry = new LineGeometry()) {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n    const pointCount = polyline.length / 3;\n    let index = geometry.vertices.length / 3;\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n    for (let i = 0; i < pointCount; ++i, index++) {\n        if (i > 0) {\n            geometry.indices.push(index);\n        }\n        if (i < pointCount - 1) {\n            geometry.indices.push(index);\n        }\n        for (let j = 0; j < 3; ++j) {\n            geometry.vertices.push(polyline[i * 3 + j]);\n            if (vertexColors) {\n                geometry.vertexColors.push(colors[i * 3 + j]);\n            }\n        }\n    }\n    return geometry;\n}\nexports.createSimpleLineGeometry = createSimpleLineGeometry;\n/**\n * Class used to render groups (or batches) of width-variable lines (in the same tile).\n */\nclass LineGroup {\n    constructor(hasNormalsAndUvs = false, highPrecision = false, isSimple = false) {\n        this.hasNormalsAndUvs = hasNormalsAndUvs;\n        this.highPrecision = highPrecision;\n        this.isSimple = isSimple;\n        this.m_geometry = new LineGeometry();\n    }\n    /**\n     * Adds all the attribute data needed to a [[BufferGeometry]] object for rendering `Lines`.\n     *\n     * @param vertices Array of vertex attributes.\n     * @param colors Array of vertex colors.\n     * @param indices Array of vertex indices.\n     * @param geometry [[BufferGeometry]] object which will store all the `Lines` attribute data.\n     * @param hasNormalsAnUvs Whether vertices have normal and uv coordinates as attributes.\n     * @param highPrecision If `true` will create high-precision vertex information.\n     * @param isSimple `true` to create simple (nonsolid, nonextruded) lines. Defaults to `false`.\n     */\n    static createGeometry(vertices, colors, indices, geometry, hasNormalsAndUvs = false, highPrecision = false, isSimple = false) {\n        if (isSimple) {\n            geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(vertices), 3));\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\"color\", new THREE.BufferAttribute(new Float32Array(colors), 3));\n            }\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n            return geometry;\n        }\n        else {\n            const vertexDescriptor = getVertexDescriptor(hasNormalsAndUvs, highPrecision);\n            const buffer = new THREE.InterleavedBuffer(new Float32Array(vertices), vertexDescriptor.stride);\n            vertexDescriptor.attributes.forEach(descr => {\n                const attribute = new THREE.InterleavedBufferAttribute(buffer, descr.itemSize, descr.offset, false);\n                geometry.setAttribute(descr.name, attribute);\n            });\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\"color\", new THREE.BufferAttribute(new Float32Array(colors), 3));\n            }\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n            return geometry;\n        }\n    }\n    /**\n     * Clears the list of line strips.\n     */\n    clear() {\n        this.m_geometry.vertices = [];\n        this.m_geometry.vertexColors = [];\n        this.m_geometry.indices = [];\n    }\n    /**\n     * Add the given points to this line group.\n     *\n     * @param center World center of the provided points.\n     * @param points Sequence of (x,y,z) coordinates.\n     * @param offsets Sequence of line segment offsets.\n     * @param uvs Sequence of (u,v) texture coordinates.\n     * @param colors Sequence of (r,g,b) color components.\n     */\n    add(center, points, offsets, uvs, colors) {\n        if (!this.isSimple) {\n            harp_utils_1.assert(!this.hasNormalsAndUvs || uvs !== undefined);\n            createLineGeometry(center, points, offsets, uvs, colors, this.m_geometry, this.highPrecision);\n        }\n        else {\n            createSimpleLineGeometry(points, colors, this.m_geometry);\n        }\n        return this;\n    }\n    /**\n     * Returns the list of vertices.\n     */\n    get vertices() {\n        return this.m_geometry.vertices;\n    }\n    /**\n     * Returns the list of vertex colors.\n     */\n    get vertexColors() {\n        return this.m_geometry.vertexColors;\n    }\n    /**\n     * Returns the list of indices.\n     */\n    get indices() {\n        return this.m_geometry.indices;\n    }\n    /**\n     * Returns the list of [[VertexAttributeDescriptor]]s.\n     */\n    get vertexAttributes() {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).attributes;\n    }\n    /**\n     * Returns the vertex attribute stride.\n     */\n    get stride() {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).stride;\n    }\n    /**\n     * Creates a three.js geometry.\n     */\n    createGeometry(geometry) {\n        if (geometry === undefined) {\n            geometry = new THREE.BufferGeometry();\n        }\n        return LineGroup.createGeometry(this.m_geometry.vertices, this.m_geometry.vertexColors, this.m_geometry.indices, geometry, this.hasNormalsAndUvs, this.highPrecision);\n    }\n}\nexports.LineGroup = LineGroup;\nfunction computeBitangent(n, t0, t1, bt) {\n    let angle = 0;\n    if (!t0.equals(t1)) {\n        angle = Math.acos(t0.dot(t1)) * Math.sign(n.dot(tmpV.copy(t0).cross(t1)));\n        if (Number.isNaN(angle)) {\n            angle = 0;\n        }\n    }\n    bt.copy(t0)\n        .add(t1)\n        .normalize()\n        .cross(n)\n        .normalize();\n    return angle;\n}\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-lines/lib/Lines.js?");

/***/ }),

/***/ "./node_modules/@here/harp-lines/lib/TriangulateLines.js":
/*!***************************************************************!*\
  !*** ./node_modules/@here/harp-lines/lib/TriangulateLines.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst UNIT_Z = new THREE.Vector3(0, 0, 1);\nconst POINTS = [0, 1, 2, 1, 3, 2];\nconst BEVEL_POINTS = [0, 1, 3, 3, 1, 2, 0, 3, 4, 5, 4, 3];\nconst SECTORS_IN_CIRCLE = 8;\nconst STEP = Math.PI / SECTORS_IN_CIRCLE;\n/**\n * Adds a half-circle geometry to original line\n *\n * @param x The line end X (used as circle center X)\n * @param y The line end Y (used as circle center Y)\n * @param lineAngle The cap incline angle\n * @param radius The cap (circle) radius\n * @param vertices The input vertex buffer (cap vertices are added there)\n * @param indices The input index buffer (cap indices are is added there)\n */\nfunction addCircle(x, y, lineAngle, radius, vertices, indices) {\n    const baseVertex = vertices.length / 3;\n    // Add cap center to vertices directly (it doesn't need rotation)\n    vertices.push(x, y, 0);\n    for (let i = 0; i < SECTORS_IN_CIRCLE + 1; ++i) {\n        const angle = STEP * i + Math.PI / 2 + lineAngle; // Start angle is -90deg\n        vertices.push(x + radius * Math.cos(angle), y + radius * Math.sin(angle), 0);\n        indices.push(baseVertex, baseVertex + i + 1, baseVertex + ((i + 1) % (SECTORS_IN_CIRCLE + 1)) + 1);\n    }\n}\n/**\n * Returns the number of points in circle used for caps.\n *\n * @param lineWidth Width of line.\n */\n// tslint:disable-next-line:no-unused-variable\nfunction numCirclePoints(lineWidth) {\n    return SECTORS_IN_CIRCLE + 1;\n}\nexports.numCirclePoints = numCirclePoints;\n/**\n * Create a triangle mesh from the given polyline.\n *\n * @param points Sequence of (x,y,z) coordinates.\n * @param width The width of the extruded line.\n * @param vertices The output vertex buffer.\n * @param indices The output index buffer.\n * @param startWithCircle `true` if the line should start will a circle.\n * @param endWithCircle `true` if the line should end with a circle.\n */\nfunction triangulateLine(points, width, vertices, indices, startWithCircle = true, endWithCircle = startWithCircle) {\n    if (points.length < 3) {\n        return;\n    }\n    // This vector is used for computing cap angle\n    const angleVec = new THREE.Vector2();\n    if (startWithCircle) {\n        // Define lineAngle as (direction - origin) vector angle to X axis\n        const lineAngle = points.length !== 3\n            ? angleVec.set(points[3] - points[0], points[4] - points[1]).angle()\n            : 0;\n        addCircle(points[0], points[1], lineAngle, width, vertices, indices);\n    }\n    const baseVertex = vertices.length / 3;\n    // bt = Bitangent (i.e. extrusion vector)\n    const prevBt = new THREE.Vector3();\n    const p = new THREE.Vector3(); // current point\n    const n = new THREE.Vector3(); // next point\n    const bt = new THREE.Vector3();\n    const averageBt = new THREE.Vector3();\n    const p0 = new THREE.Vector3();\n    const p1 = new THREE.Vector3();\n    const p2 = new THREE.Vector3();\n    const p3 = new THREE.Vector3();\n    const N = points.length / 3;\n    let vertexOffset = 0;\n    for (let i = 0; i < N; ++i) {\n        let useBevel = false;\n        p.set(points[i * 3], points[i * 3 + 1], points[i * 3 + 2]);\n        if (i + 1 < N) {\n            n.set(points[(i + 1) * 3], points[(i + 1) * 3 + 1], points[(i + 1) * 3 + 2]);\n            bt.copy(n)\n                .sub(p)\n                .normalize()\n                .cross(UNIT_Z);\n            averageBt.copy(bt);\n            if (i > 0) {\n                averageBt.add(prevBt).multiplyScalar(1.0 - 0.5 * bt.dot(prevBt));\n                useBevel = prevBt.angleTo(bt) > Math.PI / 2;\n                if (useBevel) {\n                    const inclineWidth = width / Math.cos(bt.angleTo(prevBt) / 2);\n                    p0.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(-inclineWidth)\n                        .add(p);\n                    p1.copy(prevBt)\n                        .multiplyScalar(width)\n                        .add(p);\n                    // p2 is used for \"miter\" connections\n                    p2.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(inclineWidth)\n                        .add(p);\n                    p3.copy(bt)\n                        .multiplyScalar(width)\n                        .add(p);\n                }\n            }\n            if (useBevel) {\n                vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z, p2.x, p2.y, p2.z, p3.x, p3.y, p3.z);\n            }\n            else {\n                p0.copy(averageBt)\n                    .multiplyScalar(-width)\n                    .add(p);\n                p1.copy(averageBt)\n                    .multiplyScalar(width)\n                    .add(p);\n                vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n            }\n            prevBt.copy(bt);\n        }\n        else {\n            p0.copy(prevBt)\n                .multiplyScalar(-width)\n                .add(p);\n            p1.copy(prevBt)\n                .multiplyScalar(width)\n                .add(p);\n            vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n        }\n        if (i !== N - 1) {\n            (useBevel ? BEVEL_POINTS : POINTS).forEach(o => indices.push(baseVertex + vertexOffset + o));\n            vertexOffset += useBevel ? 4 : 2;\n        }\n    }\n    if (endWithCircle) {\n        const lineAngle = points.length !== 2\n            ? angleVec\n                .set(points[(N - 3) * 3] - points[(N - 2) * 3], points[(N - 3) * 3 + 1] - points[(N - 2) * 3 + 1])\n                .angle()\n            : Math.PI;\n        addCircle(points[(N - 2) * 3], points[(N - 2) * 3 + 1], lineAngle, width, vertices, indices);\n    }\n}\nexports.triangulateLine = triangulateLine;\n/**\n * Reconstruct the original points of a line from the vertices of the triangulated line.\n *\n * @param inBuffer Buffer with vertices.\n * @param startOffset Start index, will differ from `0` if the line has caps.\n * @returns Buffer containing the original points of the triangulated line.\n */\nfunction reconstructLine(inBuffer, startOffset) {\n    const outBuffer = new Float32Array(inBuffer.length / 2);\n    for (let i = startOffset * 3, i2 = i * 2; i < outBuffer.length; i += 3, i2 += 6) {\n        outBuffer[i] = inBuffer[i2] + (inBuffer[i2 + 3] - inBuffer[i2]) * 0.5;\n        outBuffer[i + 1] = inBuffer[i2 + 1] + (inBuffer[i2 + 3 + 1] - inBuffer[i2 + 1]) * 0.5;\n        outBuffer[i + 2] = inBuffer[i2 + 2] + (inBuffer[i2 + 3 + 2] - inBuffer[i2 + 2]) * 0.5;\n    }\n    return outBuffer;\n}\nexports.reconstructLine = reconstructLine;\n/**\n * Extract the line width from a triangulated line.\n *\n * @param inBuffer Array of vertex elements of a triangulated line.\n * @param startIndex Start index, will differ from `0` if the line has caps.\n */\nfunction reconstructLineWidth(inBuffer, startIndex) {\n    const xd = inBuffer[startIndex * 2 + 3] - inBuffer[startIndex * 2];\n    const yd = inBuffer[startIndex * 2 + 3 + 1] - inBuffer[startIndex * 2 + 1];\n    const zd = inBuffer[startIndex * 2 + 3 + 2] - inBuffer[startIndex * 2 + 2];\n    return Math.sqrt(xd * xd + yd * yd + zd * zd) * 0.5;\n}\nexports.reconstructLineWidth = reconstructLineWidth;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-lines/lib/TriangulateLines.js?");

/***/ }),

/***/ "./node_modules/@here/harp-mapview-decoder/index-worker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@here/harp-mapview-decoder/index-worker.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./lib/ThemedTileDecoder */ \"./node_modules/@here/harp-mapview-decoder/lib/ThemedTileDecoder.js\"));\n__export(__webpack_require__(/*! ./lib/TileDecoderService */ \"./node_modules/@here/harp-mapview-decoder/lib/TileDecoderService.js\"));\n__export(__webpack_require__(/*! ./lib/TilerService */ \"./node_modules/@here/harp-mapview-decoder/lib/TilerService.js\"));\n__export(__webpack_require__(/*! ./lib/WorkerService */ \"./node_modules/@here/harp-mapview-decoder/lib/WorkerService.js\"));\n__export(__webpack_require__(/*! ./lib/WorkerServiceManager */ \"./node_modules/@here/harp-mapview-decoder/lib/WorkerServiceManager.js\"));\n__export(__webpack_require__(/*! ./lib/GeoJsonTiler */ \"./node_modules/@here/harp-mapview-decoder/lib/GeoJsonTiler.js\"));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-mapview-decoder/index-worker.js?");

/***/ }),

/***/ "./node_modules/@here/harp-mapview-decoder/lib/GeoJsonTiler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@here/harp-mapview-decoder/lib/GeoJsonTiler.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// tslint:disable-next-line:no-var-requires\nconst geojsonvtExport = __webpack_require__(/*! geojson-vt */ \"./node_modules/geojson-vt/src/index.js\");\n// to be able to run tests on nodejs\nconst geojsonvt = geojsonvtExport.default || geojsonvtExport;\nclass GeoJsonTiler {\n    constructor() {\n        this.indexes = new Map();\n    }\n    dispose() {\n        /* */\n    }\n    async connect() {\n        return Promise.resolve();\n    }\n    async registerIndex(indexId, input) {\n        if (this.indexes.has(indexId)) {\n            return;\n        }\n        return this.updateIndex(indexId, input);\n    }\n    async updateIndex(indexId, input) {\n        if (input instanceof URL) {\n            const response = await fetch(input.href);\n            if (!response.ok) {\n                throw new Error(`GeoJsonTiler: Unable to fetch ${input.href}: ${response.statusText}`);\n            }\n            input = await response.json();\n        }\n        else {\n            input = input;\n        }\n        const index = geojsonvt(input, {\n            maxZoom: 20,\n            indexMaxZoom: 5,\n            indexMaxPoints: 100000,\n            tolerance: 3,\n            extent: 4096,\n            buffer: 0,\n            lineMetrics: false,\n            promoteId: null,\n            generateId: true,\n            debug: 0 // logging level (0, 1 or 2)\n        });\n        index.geojson = input;\n        this.indexes.set(indexId, index);\n    }\n    async getTile(indexId, tileKey) {\n        const index = this.indexes.get(indexId);\n        if (index === undefined) {\n            throw new Error(\"Tile not found\");\n        }\n        const tile = index.getTile(tileKey.level, tileKey.column, tileKey.row);\n        if (tile !== null) {\n            tile.layer = indexId;\n            for (const feature of tile.features) {\n                feature.originalGeometry = this.getOriginalGeometry(feature, index.geojson);\n            }\n        }\n        return tile || {};\n    }\n    getOriginalGeometry(feature, geojson) {\n        switch (geojson.type) {\n            case \"Point\":\n            case \"MultiPoint\":\n            case \"LineString\":\n            case \"MultiLineString\":\n            case \"Polygon\":\n            case \"MultiPolygon\":\n            case \"GeometryCollection\":\n                return geojson;\n            case \"Feature\":\n                return geojson.geometry;\n            case \"FeatureCollection\":\n                return geojson.features[feature.id].geometry;\n        }\n    }\n}\nexports.GeoJsonTiler = GeoJsonTiler;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-mapview-decoder/lib/GeoJsonTiler.js?");

/***/ }),

/***/ "./node_modules/@here/harp-mapview-decoder/lib/ThemedTileDecoder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@here/harp-mapview-decoder/lib/ThemedTileDecoder.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_decoder_1 = __webpack_require__(/*! @here/harp-datasource-protocol/index-decoder */ \"./node_modules/@here/harp-datasource-protocol/index-decoder.js\");\n/**\n * `ThemedTileDecoder` implements an [[ITileDecoder]] which uses a [[Theme]] to apply styles to the\n * objects displayed in the map.\n *\n * By default, decoders are executed in web workers (using [[TileDecoderService]]) for performance\n * reasons.\n */\nclass ThemedTileDecoder {\n    constructor() {\n        this.m_storageLevelOffset = 0;\n    }\n    dispose() {\n        // implemented in subclasses\n    }\n    decodeTile(data, tileKey, projection) {\n        if (this.m_styleSetEvaluator === undefined) {\n            return Promise.reject(new Error(\"No style is defined\"));\n        }\n        return this.decodeThemedTile(data, tileKey, this.m_styleSetEvaluator, projection);\n    }\n    // tslint:disable:no-unused-variable\n    getTileInfo(data, tileKey, projection) {\n        return Promise.resolve(undefined);\n    }\n    // tslint:disable:no-unused-variable\n    configure(styleSet, definitions, languages, options) {\n        if (styleSet !== undefined) {\n            this.m_styleSetEvaluator = new index_decoder_1.StyleSetEvaluator(styleSet, definitions);\n        }\n        if (languages !== undefined) {\n            this.languages = languages;\n        }\n        if (options !== undefined && options.storageLevelOffset !== undefined) {\n            this.m_storageLevelOffset = options.storageLevelOffset;\n        }\n    }\n}\nexports.ThemedTileDecoder = ThemedTileDecoder;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-mapview-decoder/lib/ThemedTileDecoder.js?");

/***/ }),

/***/ "./node_modules/@here/harp-mapview-decoder/lib/TileDecoderService.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@here/harp-mapview-decoder/lib/TileDecoderService.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst WorkerService_1 = __webpack_require__(/*! ./WorkerService */ \"./node_modules/@here/harp-mapview-decoder/lib/WorkerService.js\");\nconst logger = harp_utils_1.LoggerManager.instance.create(\"TileDecoderService\");\n/**\n * An extension to [[WorkerService]], the `TileDecoderService` implements an asynchronous\n * (message based) service to decode tile content in web workers. The `TileDecoderService` itself\n * lives in the web worker, and communicates with messages by means of a [[ConcurrentWorkerSet]]\n * with the application.\n *\n * The `TileDecoderService` handles a [[DecodeTileRequest]], which contains a tile and its freshly\n * loaded binary data, decodes the content with the [[ITileDecoder]] that the service is configured\n * to use, and sends the data back in form of a [[WorkerServiceResponse]].\n */\nclass TileDecoderService extends WorkerService_1.WorkerService {\n    /**\n     * Set up the `TileDecoderService`. The name of the service must be unique\n     *\n     * @param serviceId Service id. Must be unique.\n     * @param m_decoder Decoder to handle the decoding and info requests.\n     */\n    constructor(serviceId, m_decoder) {\n        super(serviceId);\n        this.serviceId = serviceId;\n        this.m_decoder = m_decoder;\n        this.m_decoder.connect();\n    }\n    /**\n     * Start a [[TileDecoderService]] with a given decoder.\n     *\n     * @param serviceId Service id. Must be unique.\n     * @param decoder   [[TileDecoder]] instance.\n     */\n    static start(serviceId, decoder) {\n        return new TileDecoderService(serviceId, decoder);\n    }\n    /**\n     * Handle incoming request messages. Identifies message type and processes the request.\n     *\n     * @param request Message that is either a DecodeTileRequest or a TileInfoRequest.\n     * @returns A promise which resolves to a [[WorkerServiceResponse]].\n     * @override\n     */\n    handleRequest(request) {\n        if (harp_datasource_protocol_1.WorkerDecoderProtocol.isDecodeTileRequest(request)) {\n            return this.handleDecodeTileRequest(request);\n        }\n        else if (harp_datasource_protocol_1.WorkerDecoderProtocol.isTileInfoRequest(request)) {\n            return this.handleTileInfoRequest(request);\n        }\n        else {\n            return super.handleRequest(request);\n        }\n    }\n    /**\n     * Handle incoming configuration message. Configuration message is passed on to decoder.\n     *\n     * @param request Message of type [[ConfigurationMessage]].\n     * @override\n     */\n    handleMessage(message) {\n        if (harp_datasource_protocol_1.WorkerDecoderProtocol.isConfigurationMessage(message)) {\n            this.handleConfigurationMessage(message);\n        }\n        else {\n            logger.error(`[${this.serviceId}]: invalid message ${message.type}`);\n        }\n    }\n    handleDecodeTileRequest(request) {\n        const tileKey = harp_geoutils_1.TileKey.fromMortonCode(request.tileKey);\n        const projection = harp_datasource_protocol_1.getProjection(request.projection);\n        return this.m_decoder.decodeTile(request.data, tileKey, projection).then(decodedTile => {\n            const transferList = [];\n            decodedTile.geometries.forEach(geom => {\n                geom.vertexAttributes.forEach(attr => {\n                    if (attr.buffer instanceof ArrayBuffer) {\n                        transferList.push(attr.buffer);\n                    }\n                });\n                if (geom.index && geom.index.buffer instanceof ArrayBuffer) {\n                    transferList.push(geom.index.buffer);\n                }\n                if (geom.objInfos !== undefined &&\n                    geom.objInfos.length === 1 &&\n                    typeof geom.objInfos[0] === \"object\" &&\n                    \"displacementMap\" in geom.objInfos[0]) {\n                    transferList.push(geom.objInfos[0].displacementMap.buffer);\n                }\n            });\n            decodedTile.techniques.forEach(technique => {\n                harp_datasource_protocol_1.addBuffersToTransferList(technique, transferList);\n            });\n            return {\n                response: decodedTile,\n                transferList\n            };\n        });\n    }\n    handleTileInfoRequest(request) {\n        const tileKey = harp_geoutils_1.TileKey.fromMortonCode(request.tileKey);\n        const projection = harp_datasource_protocol_1.getProjection(request.projection);\n        return this.m_decoder.getTileInfo(request.data, tileKey, projection).then(tileInfo => {\n            const transferList = tileInfo !== undefined && tileInfo.transferList !== undefined\n                ? tileInfo.transferList\n                : [];\n            return {\n                response: tileInfo,\n                transferList\n            };\n        });\n    }\n    handleConfigurationMessage(message) {\n        this.m_decoder.configure(message.styleSet, message.definitions, message.languages, message.options);\n    }\n}\nexports.TileDecoderService = TileDecoderService;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-mapview-decoder/lib/TileDecoderService.js?");

/***/ }),

/***/ "./node_modules/@here/harp-mapview-decoder/lib/TilerService.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@here/harp-mapview-decoder/lib/TilerService.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\nconst GeoJsonTiler_1 = __webpack_require__(/*! ./GeoJsonTiler */ \"./node_modules/@here/harp-mapview-decoder/lib/GeoJsonTiler.js\");\nconst WorkerService_1 = __webpack_require__(/*! ./WorkerService */ \"./node_modules/@here/harp-mapview-decoder/lib/WorkerService.js\");\n/**\n * An extension to [[WorkerService]], the `TilerService` implements an asynchronous (message based)\n * service to tile untiled payloads in web workers. The `TilerService` itself lives in the web\n * worker, and communicates with messages by means of a [[ConcurrentWorkerSet]] with the\n * application.\n *\n * The `TilerService` registers tile indices (parent tile to be subdivided) by handling a\n * [[RegisterIndexRequest]], and can later retrieve tiled payloads from through the [[TileRequest]].\n * The data is sent back in form of a [[WorkerServiceResponse]].\n */\nclass TilerService extends WorkerService_1.WorkerService {\n    /**\n     * Set up the `TilerService`. The name of the service must be unique\n     *\n     * @param serviceId Service id. Must be unique.\n     */\n    constructor(serviceId) {\n        super(serviceId);\n        this.serviceId = serviceId;\n        this.tiler = new GeoJsonTiler_1.GeoJsonTiler();\n    }\n    /**\n     * Start a [[TilerService]].\n     *\n     * @param serviceId Service id. Must be unique.\n     */\n    static start(serviceId) {\n        return new TilerService(serviceId);\n    }\n    /**\n     * Handle incoming request messages. Identifies message type and processes the request.\n     *\n     * @param request [[WorkerTilerProtocol]] request.\n     * @returns A promise which resolves to a [[WorkerServiceResponse]].\n     * @override\n     */\n    handleRequest(request) {\n        if (harp_datasource_protocol_1.WorkerTilerProtocol.isRegisterIndexRequest(request)) {\n            return this.handleRegisterIndexRequest(request);\n        }\n        else if (harp_datasource_protocol_1.WorkerTilerProtocol.isUpdateIndexRequest(request)) {\n            return this.handleUpdateIndexRequest(request);\n        }\n        else if (harp_datasource_protocol_1.WorkerTilerProtocol.isTileRequest(request)) {\n            return this.handleTileRequest(request);\n        }\n        else {\n            return super.handleRequest(request);\n        }\n    }\n    async handleTileRequest(request) {\n        const tileKey = harp_geoutils_1.TileKey.fromMortonCode(request.tileKey);\n        const tile = await this.tiler.getTile(request.index, tileKey);\n        return { response: tile || {} };\n    }\n    async handleRegisterIndexRequest(message) {\n        const input = typeof message.input === \"string\" ? new URL(message.input) : message.input;\n        await this.tiler.registerIndex(message.id, input);\n        return { response: {} };\n    }\n    async handleUpdateIndexRequest(message) {\n        const input = typeof message.input === \"string\" ? new URL(message.input) : message.input;\n        this.tiler.updateIndex(message.id, input);\n        return { response: {} };\n    }\n}\nexports.TilerService = TilerService;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-mapview-decoder/lib/TilerService.js?");

/***/ }),

/***/ "./node_modules/@here/harp-mapview-decoder/lib/WorkerService.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@here/harp-mapview-decoder/lib/WorkerService.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst logger = harp_utils_1.LoggerManager.instance.create(\"WorkerService\", { enabled: false });\n/**\n * Worker Service communication helper.\n *\n * Listens to Web Worker messages from [[ConcurrentWorkerSet]] and implements:\n *  - worker service initialization\n *  - request/response scheme\n *  - error handling.\n *\n * This class should be subclassed to provide concrete like [[TileDecoderService]].\n *\n * Communication peer for [[ConcurrentWorkerSet]].\n */\nclass WorkerService {\n    /**\n     * Sets up the `WorkerService` with the specified name, and starts processing messages.\n     *\n     * @param serviceId The service id.\n     */\n    constructor(serviceId) {\n        this.serviceId = serviceId;\n        this.m_pendingRequests = new Map();\n        /**\n         * Central message handler for this service.\n         *\n         * Responsible for filtering message target and managing request/response sequence.\n         *\n         * @param message Message to be dispatched.\n         */\n        this.onMessage = (message) => {\n            if (typeof message.data.service !== \"string\" || message.data.service !== this.serviceId) {\n                return;\n            }\n            try {\n                if (harp_datasource_protocol_1.WorkerServiceProtocol.isRequestMessage(message.data)) {\n                    const request = message.data;\n                    const requestEntry = {\n                        service: request.service,\n                        messageId: request.messageId,\n                        responseSent: false\n                    };\n                    this.m_pendingRequests.set(request.messageId, requestEntry);\n                    this.tryHandleRequest(request.request)\n                        .then(response => {\n                        this.doSendResponse(requestEntry, {\n                            service: this.serviceId,\n                            type: harp_datasource_protocol_1.WorkerServiceProtocol.ServiceMessageName.Response,\n                            messageId: request.messageId,\n                            response: response.response\n                        }, response.transferList);\n                    })\n                        .catch(error => {\n                        this.doSendResponse(requestEntry, {\n                            service: this.serviceId,\n                            type: harp_datasource_protocol_1.WorkerServiceProtocol.ServiceMessageName.Response,\n                            messageId: request.messageId,\n                            errorMessage: error.toString(),\n                            errorStack: error.stack\n                        });\n                    });\n                }\n                else {\n                    this.tryHandleMessage(message.data);\n                }\n            }\n            catch (err) {\n                logger.error(`[${this.serviceId}]: Unhandled exception when handling ${message.type}`);\n            }\n        };\n        self.addEventListener(\"message\", this.onMessage);\n        const isInitializedMessage = {\n            service: serviceId,\n            type: harp_datasource_protocol_1.WorkerServiceProtocol.ServiceMessageName.Initialized\n        };\n        self.postMessage(isInitializedMessage);\n    }\n    /**\n     * Destroy the `WorkerService`. Cancels all pending requests ad removes itself from the message\n     * queue.\n     */\n    destroy() {\n        this.cancelAllPendingRequests();\n        self.removeEventListener(\"message\", this.onMessage);\n    }\n    /**\n     * Message handler to be overridden by implementation.\n     *\n     * @param message `MessageEvent.data` as received by `WorkerService`.\n     */\n    handleMessage(message) {\n        logger.error(`[${this.serviceId}]: Invalid message ${message.type}`);\n    }\n    /**\n     * Call request handler to be overridden by implementation.\n     *\n     * @param request [[RequestMessage.request]] as received by `WorkerService`.\n     */\n    handleRequest(request) {\n        throw new Error(`ServiceAdapter[${this.serviceId}]: Invalid request '${request.type}'`);\n    }\n    /**\n     * Safety belt over [[handleMessage]] for correct exception handling & logging.\n     */\n    tryHandleMessage(message) {\n        try {\n            this.handleMessage(message);\n        }\n        catch (error) {\n            logger.error(`[${this.serviceId}]: Failed, handling message ${message.type}`);\n        }\n    }\n    /**\n     * Safety belt over [[handleRequest]] for correct exception handling in promise chain.\n     */\n    tryHandleRequest(request) {\n        try {\n            return this.handleRequest(request);\n        }\n        catch (error) {\n            // we don't log exceptions here as they are propagated to client as responses\n            logger.error(`[${this.serviceId}]: Failure`, error);\n            return Promise.reject(error);\n        }\n    }\n    doSendResponse(requestEntry, response, transferList) {\n        if (requestEntry.responseSent) {\n            return;\n        }\n        if (transferList !== undefined) {\n            self.postMessage(response, transferList);\n        }\n        else {\n            self.postMessage(response);\n        }\n        requestEntry.responseSent = true;\n        this.m_pendingRequests.delete(requestEntry.messageId);\n    }\n    cancelAllPendingRequests() {\n        this.m_pendingRequests.forEach(requestEntry => {\n            this.doSendResponse(requestEntry, {\n                service: this.serviceId,\n                type: harp_datasource_protocol_1.WorkerServiceProtocol.ServiceMessageName.Response,\n                messageId: requestEntry.messageId,\n                errorMessage: \"cancelled\"\n            });\n        });\n    }\n}\nexports.WorkerService = WorkerService;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-mapview-decoder/lib/WorkerService.js?");

/***/ }),

/***/ "./node_modules/@here/harp-mapview-decoder/lib/WorkerServiceManager.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@here/harp-mapview-decoder/lib/WorkerServiceManager.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst WorkerService_1 = __webpack_require__(/*! ./WorkerService */ \"./node_modules/@here/harp-mapview-decoder/lib/WorkerService.js\");\n/**\n * Manages dynamic worker services in Web Worker context.\n *\n * Handles `CreateService` and `DestroyService` messages sent to Web Worker. Singleton (in scope of\n * one worker runtime!), starts automatically with first [[getInstance]] call.\n */\nclass WorkerServiceManager extends WorkerService_1.WorkerService {\n    constructor(serviceId = harp_datasource_protocol_1.WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID) {\n        super(serviceId);\n        /**\n         * Contains all registered service factories indexed by `serviceType`.\n         */\n        this.m_factories = new Map();\n        /**\n         * Contains all managed worker services indexed by their `serviceId`.\n         */\n        this.m_services = new Map();\n    }\n    /**\n     * Gets the default instance of `WorkerServiceManager`. Starts the service when first called.\n     */\n    static getInstance() {\n        if (this.m_service === undefined) {\n            this.m_service = new WorkerServiceManager(harp_datasource_protocol_1.WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        }\n        return this.m_service;\n    }\n    /**\n     * Register [[WorkerService]] class to this manager.\n     *\n     * @param workerServiceDescriptor service type and factory\n     */\n    register(workerServiceDescriptor) {\n        this.m_factories.set(workerServiceDescriptor.serviceType, workerServiceDescriptor.factory);\n    }\n    /** @override */\n    handleRequest(request) {\n        if (request.type === harp_datasource_protocol_1.WorkerServiceProtocol.Requests.CreateService) {\n            const existingService = this.m_services.get(request.targetServiceId);\n            if (existingService !== undefined) {\n                throw Error(\n                // tslint:disable-next-line: max-line-length\n                `error - service with targetServiceId='${request.targetServiceId}' already running, ignoring CreateService request`);\n            }\n            const factory = this.m_factories.get(request.targetServiceType);\n            if (factory === undefined) {\n                throw Error(`unknown targetServiceType requested: '${request.targetServiceType}'`);\n            }\n            const service = factory(request.targetServiceId);\n            this.m_services.set(request.targetServiceId, service);\n        }\n        if (request.type === harp_datasource_protocol_1.WorkerServiceProtocol.Requests.DestroyService) {\n            const service = this.m_services.get(request.targetServiceId);\n            if (service === undefined) {\n                throw Error(`unknown targetServiceId '${request.targetServiceId}'`);\n            }\n            service.destroy();\n            this.m_services.delete(request.targetServiceId);\n        }\n        return Promise.resolve({\n            response: {}\n        });\n    }\n}\nexports.WorkerServiceManager = WorkerServiceManager;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-mapview-decoder/lib/WorkerServiceManager.js?");

/***/ }),

/***/ "./node_modules/@here/harp-materials/lib/MapMeshMaterialsDefs.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@here/harp-materials/lib/MapMeshMaterialsDefs.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ExtrusionFeatureDefs;\n(function (ExtrusionFeatureDefs) {\n    /**\n     * Minimum ratio value for extrusion effect\n     */\n    ExtrusionFeatureDefs.DEFAULT_RATIO_MIN = 0.0;\n    /**\n     * Maximum ratio value for extrusion effect\n     */\n    ExtrusionFeatureDefs.DEFAULT_RATIO_MAX = 1;\n    /**\n     * Buildings height used whenever no height-data is present or height is very small.\n     *\n     * Used to avoid z-fighting between ground plane and building.\n     */\n    ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT = 0.01;\n})(ExtrusionFeatureDefs = exports.ExtrusionFeatureDefs || (exports.ExtrusionFeatureDefs = {}));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-materials/lib/MapMeshMaterialsDefs.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/index-worker.js":
/*!****************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/index-worker.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./lib/OmvDecoder */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDecoder.js\"));\n__export(__webpack_require__(/*! ./lib/OmvTiler */ \"./node_modules/@here/harp-omv-datasource/lib/OmvTiler.js\"));\n__export(__webpack_require__(/*! ./lib/OmvDecoderDefs */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDecoderDefs.js\"));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/index-worker.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/OmvData.js":
/*!***************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/OmvData.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_decoder_1 = __webpack_require__(/*! @here/harp-datasource-protocol/index-decoder */ \"./node_modules/@here/harp-datasource-protocol/index-decoder.js\");\nconst Long = __webpack_require__(/*! long */ \"./node_modules/long/src/long.js\");\nconst three_1 = __webpack_require__(/*! three */ \"three\");\nconst OmvDecoderDefs_1 = __webpack_require__(/*! ./OmvDecoderDefs */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDecoderDefs.js\");\nconst OmvUtils_1 = __webpack_require__(/*! ./OmvUtils */ \"./node_modules/@here/harp-omv-datasource/lib/OmvUtils.js\");\nconst vector_tile_1 = __webpack_require__(/*! ./proto/vector_tile */ \"./node_modules/@here/harp-omv-datasource/lib/proto/vector_tile.js\");\n/**\n * @hidden\n */\nvar CommandKind;\n(function (CommandKind) {\n    CommandKind[CommandKind[\"MoveTo\"] = 1] = \"MoveTo\";\n    CommandKind[CommandKind[\"LineTo\"] = 2] = \"LineTo\";\n    CommandKind[CommandKind[\"ClosePath\"] = 7] = \"ClosePath\";\n})(CommandKind = exports.CommandKind || (exports.CommandKind = {}));\n/**\n * @hidden\n */\nfunction isMoveToCommand(command) {\n    return command.kind === CommandKind.MoveTo;\n}\nexports.isMoveToCommand = isMoveToCommand;\n/**\n * @hidden\n */\nfunction isLineToCommand(command) {\n    return command.kind === CommandKind.LineTo;\n}\nexports.isLineToCommand = isLineToCommand;\n/**\n * @hidden\n */\nfunction isClosePathCommand(command) {\n    return command.kind === CommandKind.ClosePath;\n}\nexports.isClosePathCommand = isClosePathCommand;\n/**\n * @hidden\n */\nfunction visitOmv(vectorTile, visitor) {\n    if (!vectorTile.layers) {\n        return;\n    }\n    for (const layer of vectorTile.layers) {\n        if (!visitor.visitLayer || visitor.visitLayer(layer)) {\n            visitOmvLayer(layer, visitor);\n        }\n        if (visitor.endVisitLayer) {\n            visitor.endVisitLayer(layer);\n        }\n    }\n}\nexports.visitOmv = visitOmv;\n/**\n * @hidden\n */\nfunction visitOmvLayer(layer, visitor) {\n    if (!visitor.visitLayer || visitor.visitLayer(layer)) {\n        if (layer.features) {\n            for (const feature of layer.features) {\n                switch (feature.type) {\n                    case vector_tile_1.com.mapbox.pb.Tile.GeomType.UNKNOWN:\n                        break;\n                    case vector_tile_1.com.mapbox.pb.Tile.GeomType.POINT:\n                        if (visitor.visitPointFeature) {\n                            visitor.visitPointFeature(feature);\n                        }\n                        break;\n                    case vector_tile_1.com.mapbox.pb.Tile.GeomType.LINESTRING:\n                        if (visitor.visitLineFeature) {\n                            visitor.visitLineFeature(feature);\n                        }\n                        break;\n                    case vector_tile_1.com.mapbox.pb.Tile.GeomType.POLYGON:\n                        if (visitor.visitPolygonFeature) {\n                            visitor.visitPolygonFeature(feature);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    if (visitor.endVisitLayer) {\n        visitor.endVisitLayer(layer);\n    }\n}\nexports.visitOmvLayer = visitOmvLayer;\n/**\n * @hidden\n */\nclass FeatureAttributes {\n    accept(layer, feature, visitor) {\n        const { keys, values } = layer;\n        const tags = feature.tags;\n        if (!tags || !keys || !values) {\n            return;\n        }\n        for (let i = 0; i < tags.length; i += 2) {\n            const key = keys[tags[i]];\n            const value = values[tags[i + 1]];\n            if (!visitor.visitAttribute(key, value)) {\n                break;\n            }\n        }\n    }\n}\nexports.FeatureAttributes = FeatureAttributes;\n/**\n * @hidden\n */\nclass GeometryCommands {\n    accept(geometry, visitor) {\n        if (!geometry) {\n            return;\n        }\n        const geometryCount = geometry.length;\n        let currX = 0;\n        let currY = 0;\n        const xCoords = [];\n        const yCoords = [];\n        const commands = [];\n        for (let cmdIndex = 0; cmdIndex < geometryCount;) {\n            // tslint:disable:no-bitwise\n            const kind = (geometry[cmdIndex] & 0x7);\n            const count = geometry[cmdIndex] >> 0x3;\n            // tslint:enable:no-bitwise\n            ++cmdIndex;\n            if (kind === CommandKind.MoveTo || kind === CommandKind.LineTo) {\n                for (let n = 0; n < count; ++n) {\n                    const xx = geometry[cmdIndex++];\n                    const yy = geometry[cmdIndex++];\n                    // tslint:disable:no-bitwise\n                    currX += (xx >> 1) ^ -(xx & 1);\n                    currY += (yy >> 1) ^ -(yy & 1);\n                    if (visitor.type === \"Polygon\") {\n                        xCoords.push(currX);\n                        yCoords.push(currY);\n                    }\n                    const position = new three_1.Vector2(currX, currY);\n                    commands.push({ kind, position });\n                }\n            }\n            else {\n                for (const command of commands) {\n                    visitor.visitCommand(command);\n                }\n                visitor.visitCommand({ kind });\n                xCoords.length = 0;\n                yCoords.length = 0;\n                commands.length = 0;\n            }\n        }\n        if (commands.length > 0) {\n            for (const command of commands) {\n                visitor.visitCommand(command);\n            }\n        }\n    }\n}\nexports.GeometryCommands = GeometryCommands;\nconst propertyCategories = [\n    \"stringValue\",\n    \"floatValue\",\n    \"doubleValue\",\n    \"intValue\",\n    \"uintValue\",\n    \"sintValue\",\n    \"boolValue\"\n];\nfunction simplifiedValue(value) {\n    const hasOwnProperty = Object.prototype.hasOwnProperty;\n    for (const category of propertyCategories) {\n        if (hasOwnProperty.call(value, category)) {\n            const v = value[category];\n            if (v === undefined) {\n                throw new Error(\"unpexted undefined value\");\n            }\n            return Long.isLong(v) ? v.toNumber() : v;\n        }\n    }\n    throw new Error(\"not happening\");\n}\nfunction replaceReservedName(name) {\n    switch (name) {\n        case \"id\":\n            return \"$id\";\n        default:\n            return name;\n    } // switch\n}\nfunction decodeFeatureId(feature, logger) {\n    if (feature.id !== undefined) {\n        if (typeof feature.id === \"number\") {\n            return feature.id;\n        }\n        else if (feature.id !== null && Long.isLong(feature.id)) {\n            if (feature.id.greaterThan(Number.MAX_SAFE_INTEGER)) {\n                if (logger !== undefined) {\n                    logger.error(\"Invalid ID: Larger than largest available Number in feature: \", feature);\n                }\n            }\n            return feature.id.toNumber(); // long\n        }\n    }\n    return undefined;\n}\nfunction readAttributes(layer, feature, defaultAttributes = {}) {\n    const attrs = new FeatureAttributes();\n    const attributes = defaultAttributes || {};\n    attrs.accept(layer, feature, {\n        visitAttribute: (name, value) => {\n            attributes[replaceReservedName(name)] = simplifiedValue(value);\n            return true;\n        }\n    });\n    return attributes;\n}\nfunction createFeatureEnv(layer, feature, geometryType, storageLevel, storageLevelOffset, logger, parent) {\n    const attributes = {\n        $layer: layer.name,\n        $level: storageLevel,\n        $zoom: Math.max(0, storageLevel - (storageLevelOffset || 0)),\n        $geometryType: geometryType\n    };\n    // Some sources serve `id` directly as `IFeature` property ...\n    if (feature.id !== undefined) {\n        const featureId = decodeFeatureId(feature, logger);\n        if (featureId !== undefined) {\n            attributes.$id = featureId;\n        }\n    }\n    readAttributes(layer, feature, attributes);\n    return new index_decoder_1.MapEnv(attributes, parent);\n}\nfunction asGeometryType(feature) {\n    if (feature === undefined) {\n        return OmvDecoderDefs_1.OmvGeometryType.UNKNOWN;\n    }\n    switch (feature.type) {\n        case vector_tile_1.com.mapbox.pb.Tile.GeomType.UNKNOWN:\n            return OmvDecoderDefs_1.OmvGeometryType.UNKNOWN;\n        case vector_tile_1.com.mapbox.pb.Tile.GeomType.POINT:\n            return OmvDecoderDefs_1.OmvGeometryType.POINT;\n        case vector_tile_1.com.mapbox.pb.Tile.GeomType.LINESTRING:\n            return OmvDecoderDefs_1.OmvGeometryType.LINESTRING;\n        case vector_tile_1.com.mapbox.pb.Tile.GeomType.POLYGON:\n            return OmvDecoderDefs_1.OmvGeometryType.POLYGON;\n        default:\n            return OmvDecoderDefs_1.OmvGeometryType.UNKNOWN;\n    } // switch\n}\n/**\n * The class [[OmvProtobufDataAdapter]] converts OMV protobuf geo data\n * to geometries for the given [[IGeometryProcessor]].\n */\nclass OmvProtobufDataAdapter {\n    /**\n     * Constructs a new [[OmvProtobufDataAdapter]].\n     *\n     * @param processor The [[IGeometryProcessor]] used to process the data.\n     * @param dataFilter The [[OmvFeatureFilter]] used to filter features.\n     * @param logger The [[ILogger]] used to log diagnostic messages.\n     */\n    constructor(processor, dataFilter, logger) {\n        this.id = \"omv-protobuf\";\n        this.m_geometryCommands = new GeometryCommands();\n        this.m_processor = processor;\n        this.m_dataFilter = dataFilter;\n        this.m_logger = logger;\n    }\n    /**\n     * The [[OmvFeatureFilter]] used to filter features.\n     */\n    get dataFilter() {\n        return this.m_dataFilter;\n    }\n    /**\n     * The [[OmvFeatureFilter]] used to filter features.\n     */\n    set dataFilter(dataFilter) {\n        this.m_dataFilter = dataFilter;\n    }\n    /**\n     * Checks that the given data can be processed by this [[OmvProtobufDataAdapter]].\n     */\n    canProcess(data) {\n        return OmvUtils_1.isArrayBufferLike(data);\n    }\n    /**\n     * Processes the given data payload using this adapter's [[IGeometryProcessor]].\n     *\n     * @param data The data payload to process.\n     * @param tileKey The [[TileKey]] of the tile enclosing the data.\n     */\n    process(data, tileKey) {\n        const payload = new Uint8Array(data);\n        const proto = vector_tile_1.com.mapbox.pb.Tile.decode(payload);\n        this.m_tileKey = tileKey;\n        visitOmv(proto, this);\n    }\n    /**\n     * Visits the OMV layer.\n     *\n     * @param layer The OMV layer to process.\n     */\n    visitLayer(layer) {\n        this.m_layer = layer;\n        const storageLevel = this.m_tileKey.level;\n        const layerName = layer.name;\n        if (this.m_dataFilter !== undefined &&\n            !this.m_dataFilter.wantsLayer(layerName, storageLevel)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Visits point features.\n     *\n     * @param feature The OMV point features to process.\n     */\n    visitPointFeature(feature) {\n        if (feature.geometry === undefined) {\n            return;\n        }\n        const storageLevel = this.m_tileKey.level;\n        const layerName = this.m_layer.name;\n        const layerExtents = this.m_layer.extent || 4096;\n        if (this.m_dataFilter !== undefined &&\n            !this.m_dataFilter.wantsPointFeature(layerName, asGeometryType(feature), storageLevel)) {\n            return;\n        }\n        const geometry = [];\n        this.m_geometryCommands.accept(feature.geometry, {\n            type: \"Point\",\n            visitCommand: command => {\n                if (isMoveToCommand(command)) {\n                    geometry.push(command.position);\n                }\n            }\n        });\n        if (geometry.length === 0) {\n            return;\n        }\n        const env = createFeatureEnv(this.m_layer, feature, \"point\", storageLevel, this.m_processor.storageLevelOffset, this.m_logger);\n        this.m_processor.processPointFeature(layerName, layerExtents, geometry, env, storageLevel);\n    }\n    /**\n     * Visits the line features.\n     *\n     * @param feature The line features to process.\n     */\n    visitLineFeature(feature) {\n        if (feature.geometry === undefined) {\n            return;\n        }\n        const storageLevel = this.m_tileKey.level;\n        const layerName = this.m_layer.name;\n        const layerExtents = this.m_layer.extent || 4096;\n        if (this.m_dataFilter !== undefined &&\n            !this.m_dataFilter.wantsLineFeature(layerName, asGeometryType(feature), storageLevel)) {\n            return;\n        }\n        const geometry = [];\n        let positions;\n        this.m_geometryCommands.accept(feature.geometry, {\n            type: \"Line\",\n            visitCommand: command => {\n                if (isMoveToCommand(command)) {\n                    positions = [command.position];\n                    geometry.push({ positions });\n                }\n                else if (isLineToCommand(command)) {\n                    positions.push(command.position);\n                }\n            }\n        });\n        if (geometry.length === 0) {\n            return;\n        }\n        const env = createFeatureEnv(this.m_layer, feature, \"line\", storageLevel, this.m_processor.storageLevelOffset, this.m_logger);\n        this.m_processor.processLineFeature(layerName, layerExtents, geometry, env, storageLevel);\n    }\n    /**\n     * Visits the polygon features.\n     *\n     * @param feature The polygon features to process.\n     */\n    visitPolygonFeature(feature) {\n        if (feature.geometry === undefined) {\n            return;\n        }\n        const storageLevel = this.m_tileKey.level;\n        const layerName = this.m_layer.name;\n        const layerExtents = this.m_layer.extent || 4096;\n        if (this.m_dataFilter !== undefined &&\n            !this.m_dataFilter.wantsPolygonFeature(layerName, asGeometryType(feature), storageLevel)) {\n            return;\n        }\n        const geometry = [];\n        const currentPolygon = { rings: [] };\n        let currentRing;\n        this.m_geometryCommands.accept(feature.geometry, {\n            type: \"Polygon\",\n            visitCommand: command => {\n                if (isMoveToCommand(command)) {\n                    currentRing = [command.position];\n                }\n                else if (isLineToCommand(command)) {\n                    currentRing.push(command.position);\n                }\n                else if (isClosePathCommand(command)) {\n                    currentPolygon.rings.push(currentRing);\n                }\n            }\n        });\n        if (currentPolygon.rings.length > 0) {\n            geometry.push(currentPolygon);\n        }\n        if (geometry.length === 0) {\n            return;\n        }\n        const env = createFeatureEnv(this.m_layer, feature, \"polygon\", storageLevel, this.m_processor.storageLevelOffset, this.m_logger);\n        this.m_processor.processPolygonFeature(layerName, layerExtents, geometry, env, storageLevel);\n    }\n}\nexports.OmvProtobufDataAdapter = OmvProtobufDataAdapter;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/OmvData.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/OmvDataFilter.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/OmvDataFilter.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst OmvDecoderDefs_1 = __webpack_require__(/*! ./OmvDecoderDefs */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDecoderDefs.js\");\n/**\n * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as well\n * as an [[OmvFeatureModifier]].\n *\n */\nclass OmvFeatureFilterDescriptionBuilder {\n    /**\n     * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as\n     * well as an [[OmvFeatureModifier]].\n     *\n     * @param processLayersDefault If `true`, all unspecified layers will be processed. If `false`,\n     * all unspecified layers will be ignored.\n     * @param processPointsDefault If `true`, all unspecified point features will be processed. If\n     * `false`, all unspecified point features will be ignored.\n     * @param processLinesDefault If `true`, all unspecified line features will be processed. If\n     * `false`, all unspecified line features will be ignored.\n     * @param processPolygonsDefault If `true`, all unspecified polygon features will be processed.\n     * If `false`, all unspecified polygon features will be ignored.\n     */\n    constructor(options) {\n        this.m_processLayersDefault = true;\n        this.m_processPointsDefault = true;\n        this.m_processLinesDefault = true;\n        this.m_processPolygonsDefault = true;\n        this.m_layersToProcess = new Array();\n        this.m_layersToIgnore = new Array();\n        this.m_pointsToProcess = new Array();\n        this.m_ignoredPoints = new Array();\n        this.m_linesToProcess = new Array();\n        this.m_linesToIgnore = new Array();\n        this.m_polygonsToProcess = new Array();\n        this.m_polygonsToIgnore = new Array();\n        this.m_kindsToProcess = [];\n        this.m_kindsToIgnore = [];\n        if (options) {\n            this.m_processLayersDefault =\n                options.processLayersDefault !== undefined ? options.processLayersDefault : true;\n            this.m_processPointsDefault =\n                options.processPointsDefault !== undefined ? options.processPointsDefault : true;\n            this.m_processLinesDefault =\n                options.processLinesDefault !== undefined ? options.processLinesDefault : true;\n            this.m_processPolygonsDefault =\n                options.processPolygonsDefault !== undefined\n                    ? options.processPolygonsDefault\n                    : true;\n        }\n    }\n    /**\n     * Add a layer that should be processed.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    processLayer(layer, match = OmvDecoderDefs_1.OmvFilterString.StringMatch.Match, minLevel = 0, maxLevel = Infinity) {\n        this.m_layersToProcess.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n    /**\n     * Add a layer that should be ignored.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    ignoreLayer(layer, match = OmvDecoderDefs_1.OmvFilterString.StringMatch.Match, minLevel = 0, maxLevel = Infinity) {\n        this.m_layersToIgnore.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n    /**\n     * Add a valid point feature.\n     *\n     * @param options Feature options.\n     */\n    processPoint(options) {\n        this.addItem(this.m_pointsToProcess, options);\n    }\n    /**\n     * Add valid point features.\n     *\n     * @param options Multi feature options.\n     */\n    processPoints(options) {\n        this.addItems(this.m_pointsToProcess, options);\n    }\n    /**\n     * Add a point feature that should be ignored.\n     *\n     * @param options Feature options.\n     */\n    ignorePoint(options) {\n        this.addItem(this.m_ignoredPoints, options);\n    }\n    /**\n     * Add point features that should be ignored.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePoints(options) {\n        this.addItems(this.m_ignoredPoints, options);\n    }\n    /**\n     * Add a valid line feature.\n     *\n     * @param options Feature options.\n     */\n    processLine(options) {\n        this.addItem(this.m_linesToProcess, options);\n    }\n    /**\n     * Add valid line features.\n     *\n     * @param options Multi feature options.\n     */\n    processLines(options) {\n        this.addItems(this.m_linesToProcess, options);\n    }\n    /**\n     * Ignore a line feature.\n     *\n     * @param options Feature options.\n     */\n    ignoreLine(options) {\n        this.addItem(this.m_linesToIgnore, options);\n    }\n    /**\n     * Ignore line features.\n     *\n     * @param options Multi feature options.\n     */\n    ignoreLines(options) {\n        this.addItems(this.m_linesToIgnore, options);\n    }\n    /**\n     * Add a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    processPolygon(options) {\n        this.addItem(this.m_polygonsToProcess, options);\n    }\n    /**\n     * Add valid polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    processPolygons(options) {\n        this.addItems(this.m_polygonsToProcess, options);\n    }\n    /**\n     * Ignore a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    ignorePolygon(options) {\n        this.addItem(this.m_polygonsToIgnore, options);\n    }\n    /**\n     * Ignore polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePolygons(options) {\n        this.addItems(this.m_polygonsToIgnore, options);\n    }\n    /**\n     * Add all the specified strings as \"enabledKinds\".\n     *\n     * @param {string[]} enabledKinds List of kinds that should be generated.\n     */\n    processKinds(enabledKinds) {\n        this.m_kindsToProcess = this.m_kindsToProcess.concat(enabledKinds);\n    }\n    /**\n     * Add all the specified strings as \"disabledKinds\".\n     *\n     * @param {string[]} disabledKinds List of kinds that should _not_ be generated.\n     */\n    ignoreKinds(disabledKinds) {\n        this.m_kindsToIgnore = this.m_kindsToIgnore.concat(disabledKinds);\n    }\n    /**\n     * Create a filter description that can be passed as an option to the [[OmvDataSource]].\n     */\n    createDescription() {\n        return {\n            processLayersDefault: this.m_processLayersDefault,\n            processPointsDefault: this.m_processPointsDefault,\n            processLinesDefault: this.m_processLinesDefault,\n            processPolygonsDefault: this.m_processPolygonsDefault,\n            layersToProcess: this.m_layersToProcess,\n            layersToIgnore: this.m_layersToIgnore,\n            pointsToProcess: this.m_pointsToProcess,\n            pointsToIgnore: this.m_ignoredPoints,\n            linesToProcess: this.m_linesToProcess,\n            linesToIgnore: this.m_linesToIgnore,\n            polygonsToProcess: this.m_polygonsToProcess,\n            polygonsToIgnore: this.m_polygonsToIgnore,\n            kindsToProcess: this.m_kindsToProcess,\n            kindsToIgnore: this.m_kindsToIgnore\n        };\n    }\n    addItem(items, options) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n        const item = {\n            layerName: {\n                value: options.layer,\n                match: options.matchLayer === undefined\n                    ? OmvDecoderDefs_1.OmvFilterString.StringMatch.Match\n                    : options.matchLayer\n            },\n            geometryTypes: options.geomType !== undefined\n                ? Array.isArray(options.geomType)\n                    ? options.geomType\n                    : [options.geomType]\n                : undefined,\n            classes: [\n                {\n                    value: options.featureClass,\n                    match: options.matchClass === undefined\n                        ? OmvDecoderDefs_1.OmvFilterString.StringMatch.Match\n                        : options.matchClass\n                }\n            ],\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n        items.push(item);\n    }\n    addItems(items, options) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n        const item = {\n            layerName: {\n                value: options.layer,\n                match: options.matchLayer === undefined\n                    ? OmvDecoderDefs_1.OmvFilterString.StringMatch.Match\n                    : options.matchLayer\n            },\n            geometryTypes: options.geomTypes !== undefined\n                ? Array.isArray(options.geomTypes)\n                    ? options.geomTypes\n                    : [options.geomTypes]\n                : undefined,\n            classes: options.featureClasses,\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n        items.push(item);\n    }\n}\nexports.OmvFeatureFilterDescriptionBuilder = OmvFeatureFilterDescriptionBuilder;\n/**\n * `OmvFeatureFilter` implementation that uses a `OmvFeatureFilterDescription` to filter `TileData`\n * features before they are completely decoded.\n *\n * @hidden\n */\nclass OmvGenericFeatureFilter {\n    constructor(description) {\n        this.description = description;\n        if (this.description.kindsToProcess.length > 0) {\n            this.enabledKinds = new harp_datasource_protocol_1.GeometryKindSet(this.description.kindsToProcess);\n        }\n        if (this.description.kindsToIgnore.length > 0) {\n            this.disabledKinds = new harp_datasource_protocol_1.GeometryKindSet(this.description.kindsToIgnore);\n        }\n    }\n    static matchLayer(layer, layerItems, level) {\n        for (const layerItem of layerItems) {\n            if (level < layerItem.minLevel || level > layerItem.maxLevel) {\n                continue;\n            }\n            if (OmvDecoderDefs_1.OmvFilterString.matchString(layer, layerItem.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    wantsLayer(layer, level) {\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToProcess, level)) {\n            return true;\n        }\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToIgnore, level)) {\n            return false;\n        }\n        return this.description.processLayersDefault;\n    }\n    wantsPointFeature(layer, geometryType, level) {\n        return this.wantsFeature(this.description.pointsToProcess, this.description.pointsToIgnore, layer, geometryType, level, this.description.processPointsDefault);\n    }\n    wantsLineFeature(layer, geometryType, level) {\n        return this.wantsFeature(this.description.linesToProcess, this.description.linesToIgnore, layer, geometryType, level, this.description.processLinesDefault);\n    }\n    wantsPolygonFeature(layer, geometryType, level) {\n        return this.wantsFeature(this.description.polygonsToProcess, this.description.polygonsToIgnore, layer, geometryType, level, this.description.processPolygonsDefault);\n    }\n    wantsKind(kind) {\n        // undefined -> no way to filter\n        if (kind === undefined) {\n            return true;\n        }\n        return (!(this.disabledKinds !== undefined &&\n            this.disabledKinds.hasOrIntersects(kind)) ||\n            (this.enabledKinds !== undefined &&\n                this.enabledKinds.hasOrIntersects(kind)));\n    }\n    get hasKindFilter() {\n        return this.enabledKinds !== undefined || this.disabledKinds !== undefined;\n    }\n    wantsFeature(itemsToProcess, itemsToIgnore, layer, geometryType, level, defaultResult) {\n        for (const item of itemsToProcess) {\n            if (level < item.minLevel || level > item.maxLevel) {\n                continue;\n            }\n            if (!OmvDecoderDefs_1.OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return true;\n            }\n        }\n        for (const item of itemsToIgnore) {\n            if (!OmvDecoderDefs_1.OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return false;\n            }\n        }\n        return defaultResult;\n    }\n}\nexports.OmvGenericFeatureFilter = OmvGenericFeatureFilter;\n/**\n * An [[OmvFeatureFilter]] implementation that delegates all filter decision\n * returning `true` for any predicate if all delegates return `true`.\n */\nclass ComposedDataFilter {\n    constructor(filters) {\n        this.filters = filters;\n    }\n    get hasKindFilter() {\n        return this.filters.reduce((result, filter) => result && filter.hasKindFilter, true);\n    }\n    wantsLayer(layer, level) {\n        return this.filters.reduce((result, filter) => result && filter.wantsLayer(layer, level), true);\n    }\n    wantsPointFeature(layer, geometryType, level) {\n        return this.filters.reduce((result, filter) => result && filter.wantsPointFeature(layer, geometryType, level), true);\n    }\n    wantsLineFeature(layer, geometryType, level) {\n        return this.filters.reduce((result, filter) => result && filter.wantsLineFeature(layer, geometryType, level), true);\n    }\n    wantsPolygonFeature(layer, geometryType, level) {\n        return this.filters.reduce((result, filter) => result && filter.wantsPolygonFeature(layer, geometryType, level), true);\n    }\n    wantsKind(kind) {\n        return this.filters.reduce((result, filter) => result && filter.wantsKind(kind), true);\n    }\n}\nexports.ComposedDataFilter = ComposedDataFilter;\n/**\n * `OmvFeatureModifier` implementation that uses a `OmvFeatureFilterDescription` to filter\n * `TileData` features before they are completely decoded.\n *\n * @hidden\n */\nclass OmvGenericFeatureModifier {\n    constructor(description) {\n        this.description = description;\n    }\n    static matchItems(layerName, featureClass, items) {\n        for (const item of items) {\n            if (item.classes !== undefined) {\n                if (!OmvDecoderDefs_1.OmvFilterString.matchString(layerName, item.layerName)) {\n                    continue;\n                }\n                for (const matchClass of item.classes) {\n                    if (OmvDecoderDefs_1.OmvFilterString.matchString(featureClass, matchClass)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    static matchAttribute(layerName, env, items) {\n        for (const item of items) {\n            if (item.featureAttribute !== undefined) {\n                if (OmvDecoderDefs_1.OmvFilterString.matchString(layerName, item.layerName) &&\n                    env.lookup(item.featureAttribute.key) === item.featureAttribute.value) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    doProcessPointFeature(layer, env) {\n        return this.doProcessFeature(this.description.pointsToProcess, this.description.pointsToIgnore, layer, env, this.description.processPointsDefault);\n    }\n    doProcessLineFeature(layer, env) {\n        return this.doProcessFeature(this.description.linesToProcess, this.description.linesToIgnore, layer, env, this.description.processLinesDefault);\n    }\n    doProcessPolygonFeature(layer, env) {\n        return this.doProcessFeature(this.description.polygonsToProcess, this.description.polygonsToIgnore, layer, env, this.description.processPolygonsDefault);\n    }\n    doProcessFeature(itemsToProcess, itemsToIgnore, layer, env, defaultResult) {\n        if (layer === undefined || (itemsToProcess.length === 0 && itemsToIgnore.length === 0)) {\n            return defaultResult;\n        }\n        let featureClass;\n        const featureClassThing = env.lookup(\"class\");\n        if (featureClassThing !== undefined && featureClassThing !== null) {\n            featureClass = featureClassThing.toString();\n        }\n        if (featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToProcess)) {\n            return true;\n        }\n        if (featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToIgnore)) {\n            return false;\n        }\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToProcess)) {\n            return true;\n        }\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToIgnore)) {\n            return false;\n        }\n        return defaultResult;\n    }\n}\nexports.OmvGenericFeatureModifier = OmvGenericFeatureModifier;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/OmvDataFilter.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/OmvDecodedTileEmitter.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/OmvDecodedTileEmitter.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst Lines_1 = __webpack_require__(/*! @here/harp-lines/lib/Lines */ \"./node_modules/@here/harp-lines/lib/Lines.js\");\nconst TriangulateLines_1 = __webpack_require__(/*! @here/harp-lines/lib/TriangulateLines */ \"./node_modules/@here/harp-lines/lib/TriangulateLines.js\");\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst earcut_1 = __webpack_require__(/*! earcut */ \"./node_modules/earcut/src/earcut.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\nconst OmvDecoder_1 = __webpack_require__(/*! ./OmvDecoder */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDecoder.js\");\nconst OmvUtils_1 = __webpack_require__(/*! ./OmvUtils */ \"./node_modules/@here/harp-omv-datasource/lib/OmvUtils.js\");\nconst TechniqueAttr_1 = __webpack_require__(/*! @here/harp-datasource-protocol/lib/TechniqueAttr */ \"./node_modules/@here/harp-datasource-protocol/lib/TechniqueAttr.js\");\n// tslint:disable-next-line:max-line-length\nconst SphericalGeometrySubdivisionModifier_1 = __webpack_require__(/*! @here/harp-geometry/lib/SphericalGeometrySubdivisionModifier */ \"./node_modules/@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier.js\");\nconst MapMeshMaterialsDefs_1 = __webpack_require__(/*! @here/harp-materials/lib/MapMeshMaterialsDefs */ \"./node_modules/@here/harp-materials/lib/MapMeshMaterialsDefs.js\");\nconst clipPolygon_1 = __webpack_require__(/*! ./clipPolygon */ \"./node_modules/@here/harp-omv-datasource/lib/clipPolygon.js\");\nconst logger = harp_utils_1.LoggerManager.instance.create(\"OmvDecodedTileEmitter\");\nconst tempTileOrigin = new THREE.Vector3();\nconst tempVertOrigin = new THREE.Vector3();\nconst tempVertNormal = new THREE.Vector3();\nconst tempFootDisp = new THREE.Vector3();\nconst tempRoofDisp = new THREE.Vector3();\nconst tmpV2 = new THREE.Vector2();\nconst tmpV2r = new THREE.Vector2();\nconst tmpV3 = new THREE.Vector3();\nconst tmpV3r = new THREE.Vector3();\nconst tempP0 = new THREE.Vector2();\nconst tempP1 = new THREE.Vector2();\nconst tempPreviousTangent = new THREE.Vector2();\nconst tmpPointA = new THREE.Vector3();\nconst tmpPointB = new THREE.Vector3();\nconst tmpPointC = new THREE.Vector3();\nconst tmpPointD = new THREE.Vector3();\nconst tmpPointE = new THREE.Vector3();\nconst tmpLine = new THREE.Line3();\n/**\n * Minimum number of pixels per character. Used during estimation if there is enough screen space\n * available to render a text. Based on the estimated screen size of a tile.\n */\nconst MIN_AVERAGE_CHAR_WIDTH = 5;\n/**\n * Estimation \"fudge factor\", tweaking the size estimation to\n *\n * a) allow room for zooming in to the tile, and\n *\n * b) allow for some tilting, where the edge of a tile closer to the camera has more space.\n *\n * Useful values are between 0 (allow all labels), 0.5 (allow labels at twice the default display\n * size of the tile) and 1.0 (skip labels that would normally not be displayed at default tile\n * size).\n */\nconst SIZE_ESTIMATION_FACTOR = 0.5;\n/**\n * Maximum allowed corner angle inside a label path.\n */\nconst MAX_CORNER_ANGLE = Math.PI / 8;\n/**\n * Used to identify an invalid (or better: unused) array index.\n */\nconst INVALID_ARRAY_INDEX = -1;\n// for tilezen by default extrude all buildings even those without height data\nclass MeshBuffers {\n    constructor(type) {\n        this.type = type;\n        this.positions = [];\n        this.normals = [];\n        this.textureCoordinates = [];\n        this.colors = [];\n        this.extrusionAxis = [];\n        this.indices = [];\n        this.edgeIndices = [];\n        this.groups = [];\n        this.texts = [];\n        this.pathLengths = [];\n        this.stringCatalog = [];\n        this.imageTextures = [];\n        /**\n         * Optional list of feature start indices. The indices point into the index attribute.\n         */\n        this.featureStarts = [];\n        /**\n         * An optional list of additional data that can be used as additional data for the object\n         * picking.\n         */\n        this.objInfos = [];\n    }\n    addText(text) {\n        let index = this.stringCatalog.indexOf(text);\n        if (index < 0) {\n            index = this.stringCatalog.length;\n            this.stringCatalog.push(text);\n        }\n        return index;\n    }\n}\nvar LineType;\n(function (LineType) {\n    LineType[LineType[\"Simple\"] = 0] = \"Simple\";\n    LineType[LineType[\"Complex\"] = 1] = \"Complex\";\n})(LineType = exports.LineType || (exports.LineType = {}));\nconst tmpColor = new THREE.Color();\nclass OmvDecodedTileEmitter {\n    constructor(m_decodeInfo, m_styleSetEvaluator, m_gatherFeatureAttributes, m_skipShortLabels, m_enableElevationOverlay, m_languages) {\n        this.m_decodeInfo = m_decodeInfo;\n        this.m_styleSetEvaluator = m_styleSetEvaluator;\n        this.m_gatherFeatureAttributes = m_gatherFeatureAttributes;\n        this.m_skipShortLabels = m_skipShortLabels;\n        this.m_enableElevationOverlay = m_enableElevationOverlay;\n        this.m_languages = m_languages;\n        // mapping from style index to mesh buffers\n        this.m_meshBuffers = new Map();\n        this.m_geometries = [];\n        this.m_textGeometries = [];\n        this.m_textPathGeometries = [];\n        this.m_pathGeometries = [];\n        this.m_poiGeometries = [];\n        this.m_simpleLines = [];\n        this.m_solidLines = [];\n        this.m_sources = [];\n        this.m_maxGeometryHeight = 0;\n    }\n    get projection() {\n        return this.m_decodeInfo.targetProjection;\n    }\n    get center() {\n        return this.m_decodeInfo.center;\n    }\n    /**\n     * Creates the Point of Interest geometries for the given feature.\n     *\n     * @param layer Tile's layer to be processed.\n     * @param extents Tile's layer extents.\n     * @param geometry The current feature containing the main geometry.\n     * @param env The [[MapEnv]] containing the environment information for the map.\n     * @param techniques The array of [[Technique]] that will be applied to the geometry.\n     * @param featureId The id of the feature.\n     */\n    processPointFeature(layer, extents, geometry, context, techniques, featureId) {\n        const env = context.env;\n        this.processFeatureCommon(env);\n        for (const technique of techniques) {\n            if (technique === undefined) {\n                continue;\n            }\n            const techniqueIndex = technique._index;\n            const meshBuffers = this.findOrCreateMeshBuffers(techniqueIndex, harp_datasource_protocol_1.GeometryType.Point);\n            if (meshBuffers === undefined) {\n                continue;\n            }\n            const { positions, texts, imageTextures, objInfos } = meshBuffers;\n            const shouldCreateTextGeometries = harp_datasource_protocol_1.isTextTechnique(technique) || harp_datasource_protocol_1.isPoiTechnique(technique);\n            let imageTexture;\n            const wantsPoi = harp_datasource_protocol_1.isPoiTechnique(technique);\n            if (wantsPoi) {\n                const poiTechnique = technique;\n                imageTexture = TechniqueAttr_1.evaluateTechniqueAttr(context, poiTechnique.imageTexture);\n                // TODO: Move to decoder independent parts of code.\n                if (poiTechnique.poiName !== undefined) {\n                    imageTexture = TechniqueAttr_1.evaluateTechniqueAttr(context, poiTechnique.poiName);\n                }\n                else if (typeof poiTechnique.poiNameField === \"string\") {\n                    const poiNameFieldValue = env.lookup(poiTechnique.poiNameField);\n                    imageTexture = poiNameFieldValue;\n                }\n                else if (typeof poiTechnique.imageTextureField === \"string\") {\n                    const imageTextureValue = env.lookup(poiTechnique.imageTextureField);\n                    imageTexture = harp_datasource_protocol_1.composeTechniqueTextureName(imageTextureValue, poiTechnique);\n                }\n            }\n            for (const pos of geometry) {\n                if (shouldCreateTextGeometries) {\n                    const textTechnique = technique;\n                    const text = harp_datasource_protocol_1.ExtendedTileInfo.getFeatureText(context, textTechnique, this.m_languages);\n                    if (text !== undefined && text.length > 0) {\n                        texts.push(meshBuffers.addText(text));\n                    }\n                    else {\n                        texts.push(INVALID_ARRAY_INDEX);\n                    }\n                }\n                // Always store the position, otherwise the following POIs will be\n                // misplaced.\n                if (shouldCreateTextGeometries) {\n                    OmvUtils_1.webMercatorTile2TargetWorld(extents, this.m_decodeInfo, pos, tmpV3);\n                }\n                else {\n                    OmvUtils_1.webMercatorTile2TargetTile(extents, this.m_decodeInfo, pos, tmpV3);\n                }\n                positions.push(tmpV3.x, tmpV3.y, tmpV3.z);\n                objInfos.push(this.m_gatherFeatureAttributes ? env.entries : harp_datasource_protocol_1.getFeatureId(env.entries));\n                if (wantsPoi) {\n                    if (imageTexture === undefined) {\n                        imageTextures.push(INVALID_ARRAY_INDEX);\n                    }\n                    else {\n                        imageTextures.push(meshBuffers.addText(imageTexture));\n                    }\n                }\n            }\n        }\n    }\n    /**\n     *\n     * Creates the line geometries for the given feature.\n     *\n     * @param layer Tile's layer to be processed.\n     * @param extents Tile's layer extents.\n     * @param geometry The current feature containing the main geometry.\n     * @param env The [[MapEnv]] containing the environment information for the map.\n     * @param techniques The array of [[Technique]] that will be applied to the geometry.\n     * @param featureId The id of the feature.\n     */\n    processLineFeature(layer, extents, geometry, context, techniques, featureId) {\n        const env = context.env;\n        this.processFeatureCommon(env);\n        const localLines = []; // lines in target tile space.\n        const worldLines = []; // lines in world space.\n        const uvs = [];\n        const offsets = [];\n        const { projectedTileBounds } = this.m_decodeInfo;\n        const tileWidth = projectedTileBounds.max.x - projectedTileBounds.min.x;\n        const tileHeight = projectedTileBounds.max.y - projectedTileBounds.min.y;\n        const tileSizeInMeters = Math.max(tileWidth, tileHeight);\n        let computeTexCoords;\n        let texCoordinateType;\n        const hasUntiledLines = geometry[0].untiledPositions !== undefined;\n        // Check if any of the techniques needs texture coordinates\n        for (const technique of techniques) {\n            if (technique === undefined) {\n                continue;\n            }\n            if (!computeTexCoords) {\n                computeTexCoords = this.getComputeTexCoordsFunc(technique);\n                texCoordinateType = this.getTextureCoordinateType(technique);\n            }\n            else {\n                // Support generation of only one type of texture coordinates.\n                const otherTexCoordType = this.getTextureCoordinateType(technique);\n                harp_utils_1.assert(otherTexCoordType === undefined || texCoordinateType === otherTexCoordType);\n            }\n        }\n        for (const polyline of geometry) {\n            // Compute the world position of the untiled line and its distance to the origin of the\n            // line to properly join lines.\n            const untiledLine = [];\n            let lineDist = 0;\n            if (hasUntiledLines) {\n                this.m_decodeInfo.targetProjection.projectPoint(polyline.untiledPositions[0], tmpV3r);\n                polyline.untiledPositions.forEach(pos => {\n                    // Calculate the distance to the next unnormalized point.\n                    this.m_decodeInfo.targetProjection.projectPoint(pos, tmpV3);\n                    lineDist += tmpV3.distanceTo(tmpV3r);\n                    tmpV3r.copy(tmpV3);\n                    // Pushed the normalized point for line matching.\n                    this.m_decodeInfo.targetProjection.projectPoint(pos.normalized(), tmpV3);\n                    untiledLine.push(tmpV3.x, tmpV3.y, tmpV3.z, lineDist);\n                });\n            }\n            const localLine = [];\n            const worldLine = [];\n            const lineUvs = [];\n            const lineOffsets = [];\n            polyline.positions.forEach(pos => {\n                OmvUtils_1.webMercatorTile2TargetWorld(extents, this.m_decodeInfo, pos, tmpV3);\n                worldLine.push(tmpV3.x, tmpV3.y, tmpV3.z);\n                if (computeTexCoords) {\n                    const { u, v } = computeTexCoords(pos, extents);\n                    lineUvs.push(u, v);\n                }\n                if (hasUntiledLines) {\n                    // Find where in the [0...1] range relative to the line our current vertex lies.\n                    const offset = this.findRelativePositionInLine(tmpV3, untiledLine) / lineDist;\n                    lineOffsets.push(offset);\n                }\n                tmpV3.sub(this.m_decodeInfo.center);\n                localLine.push(tmpV3.x, tmpV3.y, tmpV3.z);\n            });\n            localLines.push(localLine);\n            worldLines.push(worldLine);\n            uvs.push(lineUvs);\n            offsets.push(lineOffsets);\n        }\n        const wantCircle = this.m_decodeInfo.tileKey.level >= 11;\n        for (const technique of techniques) {\n            if (technique === undefined) {\n                continue;\n            }\n            const techniqueIndex = technique._index;\n            const techniqueName = technique.name;\n            if (harp_datasource_protocol_1.isLineTechnique(technique) || harp_datasource_protocol_1.isSolidLineTechnique(technique)) {\n                const lineGeometry = harp_datasource_protocol_1.isLineTechnique(technique)\n                    ? this.m_simpleLines\n                    : this.m_solidLines;\n                const lineType = harp_datasource_protocol_1.isLineTechnique(technique) ? LineType.Simple : LineType.Complex;\n                this.applyLineTechnique(lineGeometry, technique, techniqueIndex, lineType, env.entries, localLines, context, this.getTextureCoordinateType(technique) ? uvs : undefined, hasUntiledLines ? offsets : undefined);\n            }\n            else if (harp_datasource_protocol_1.isTextTechnique(technique) ||\n                harp_datasource_protocol_1.isPoiTechnique(technique) ||\n                harp_datasource_protocol_1.isLineMarkerTechnique(technique)) {\n                const textTechnique = technique;\n                const text = harp_datasource_protocol_1.ExtendedTileInfo.getFeatureText(context, textTechnique, this.m_languages);\n                if (text === undefined || text.length === 0) {\n                    continue;\n                }\n                let validLines = [];\n                if (this.m_skipShortLabels) {\n                    // Filter the lines, keep only those that are long enough for labelling. Also,\n                    // split jagged label paths to keep processing and rendering only those that\n                    // have no sharp corners, which would not be rendered anyway.\n                    const metersPerPixel = tileSizeInMeters / this.m_decodeInfo.tileSizeOnScreen;\n                    const minEstimatedLabelLength = MIN_AVERAGE_CHAR_WIDTH *\n                        text.length *\n                        metersPerPixel *\n                        SIZE_ESTIMATION_FACTOR;\n                    const minEstimatedLabelLengthSqr = minEstimatedLabelLength * minEstimatedLabelLength;\n                    validLines = this.splitJaggyLines(worldLines, minEstimatedLabelLengthSqr, MAX_CORNER_ANGLE);\n                }\n                else {\n                    validLines = worldLines;\n                }\n                if (validLines.length === 0) {\n                    continue;\n                }\n                if (harp_datasource_protocol_1.isTextTechnique(technique)) {\n                    if (text === undefined) {\n                        continue;\n                    }\n                    for (const path of validLines) {\n                        const pathLengthSqr = harp_utils_1.Math2D.computeSquaredLineLength(path);\n                        this.m_textPathGeometries.push({\n                            technique: techniqueIndex,\n                            path,\n                            pathLengthSqr,\n                            text: String(text),\n                            objInfos: this.m_gatherFeatureAttributes\n                                ? env.entries\n                                : harp_datasource_protocol_1.getFeatureId(env.entries)\n                        });\n                    }\n                }\n                else {\n                    const lineMarkerTechnique = technique;\n                    let imageTexture = TechniqueAttr_1.evaluateTechniqueAttr(context, lineMarkerTechnique.imageTexture);\n                    // TODO: `imageTextureField` and `imageTexturePrefix` and `imageTexturePostfix`\n                    // are now deprecated\n                    // TODO: Move to decoder independent parts of code.\n                    if (typeof lineMarkerTechnique.imageTextureField === \"string\") {\n                        const imageTextureValue = env.lookup(lineMarkerTechnique.imageTextureField);\n                        imageTexture = imageTextureValue;\n                        if (typeof lineMarkerTechnique.imageTexturePrefix === \"string\") {\n                            imageTexture = lineMarkerTechnique.imageTexturePrefix + imageTexture;\n                        }\n                        if (typeof lineMarkerTechnique.imageTexturePostfix === \"string\") {\n                            imageTexture = imageTexture + lineMarkerTechnique.imageTexturePostfix;\n                        }\n                    }\n                    for (const aLine of validLines) {\n                        this.m_poiGeometries.push({\n                            technique: techniqueIndex,\n                            positions: {\n                                name: \"position\",\n                                type: \"float\",\n                                buffer: new Float32Array(aLine).buffer,\n                                itemCount: 3\n                            },\n                            texts: [0],\n                            stringCatalog: [text, imageTexture],\n                            imageTextures: [1],\n                            objInfos: this.m_gatherFeatureAttributes\n                                ? [env.entries]\n                                : [harp_datasource_protocol_1.getFeatureId(env.entries)]\n                        });\n                    }\n                }\n            }\n            else if (harp_datasource_protocol_1.isLabelRejectionLineTechnique(technique)) {\n                for (const path of worldLines) {\n                    const worldPath = [];\n                    for (let i = 0; i < path.length; i += 3) {\n                        worldPath.push(new THREE.Vector3().fromArray(path, i));\n                    }\n                    this.m_pathGeometries.push({\n                        path: worldPath\n                    });\n                }\n            }\n            else if (harp_datasource_protocol_1.isExtrudedLineTechnique(technique)) {\n                const meshBuffers = this.findOrCreateMeshBuffers(techniqueIndex, harp_datasource_protocol_1.GeometryType.ExtrudedLine);\n                if (meshBuffers === undefined) {\n                    continue;\n                }\n                const { positions, indices, groups, featureStarts, objInfos } = meshBuffers;\n                const start = indices.length;\n                const lineWidth = TechniqueAttr_1.evaluateTechniqueAttr(context, technique.lineWidth);\n                if (lineWidth === undefined) {\n                    continue;\n                }\n                const techniqueCaps = TechniqueAttr_1.evaluateTechniqueAttr(context, technique.caps, \"Circle\");\n                const addCircle = wantCircle && techniqueCaps === \"Circle\";\n                localLines.forEach(aLine => {\n                    TriangulateLines_1.triangulateLine(aLine, lineWidth, positions, indices, addCircle);\n                    featureStarts.push(start);\n                    objInfos.push(this.m_gatherFeatureAttributes ? env.entries : harp_datasource_protocol_1.getFeatureId(env.entries));\n                });\n                const count = indices.length - start;\n                groups.push({ start, count, technique: techniqueIndex, featureId });\n            }\n            else {\n                logger.warn(`OmvDecodedTileEmitter#processLineFeature: Invalid line technique\n                     ${techniqueName} for layer: ${env.entries.$layer} `);\n            }\n        }\n    }\n    /**\n     * Creates the polygons geometries for the given feature.\n     *\n     * @param layer Tile's layer to be processed.\n     * @param extents Tile's layer extents.\n     * @param geometry The current feature containing the main geometry.\n     * @param feature The [[MapEnv]] containing the environment information for the map.\n     * @param techniques The array of [[Technique]] that will be applied to the geometry.\n     * @param featureId The id of the feature.\n     */\n    processPolygonFeature(layer, extents, geometry, context, techniques, featureId) {\n        const env = context.env;\n        this.processFeatureCommon(env);\n        techniques.forEach(technique => {\n            if (technique === undefined) {\n                return;\n            }\n            const techniqueIndex = technique._index;\n            if (techniqueIndex === undefined) {\n                throw new Error(\"OmvDecodedTileEmitter#processPolygonFeature: \" +\n                    \"Internal error - No technique index\");\n            }\n            const polygons = [];\n            const isExtruded = harp_datasource_protocol_1.isExtrudedPolygonTechnique(technique);\n            const isFilled = harp_datasource_protocol_1.isFillTechnique(technique);\n            const isStandard = harp_datasource_protocol_1.isStandardTechnique(technique);\n            const isPolygon = isExtruded || isFilled || isStandard;\n            const computeTexCoords = this.getComputeTexCoordsFunc(technique);\n            const vertexStride = computeTexCoords !== undefined ? 4 : 2;\n            let clipRing;\n            for (const polygon of geometry) {\n                const rings = [];\n                for (const outline of polygon.rings) {\n                    const ringContour = [];\n                    let coords = outline;\n                    if (isFilled || isStandard) {\n                        if (!clipRing) {\n                            clipRing = [\n                                new THREE.Vector2(0, 0),\n                                new THREE.Vector2(extents, 0),\n                                new THREE.Vector2(extents, extents),\n                                new THREE.Vector2(0, extents)\n                            ];\n                        }\n                        coords = clipPolygon_1.clipPolygon(coords, clipRing);\n                    }\n                    if (coords.length === 0) {\n                        continue;\n                    }\n                    for (const coord of coords) {\n                        ringContour.push(coord.x, coord.y);\n                        if (computeTexCoords !== undefined) {\n                            const { u, v } = computeTexCoords(coord, extents);\n                            ringContour.push(u, v);\n                        }\n                    }\n                    rings.push(new OmvDecoder_1.Ring(extents, vertexStride, ringContour));\n                }\n                if (rings.length === 0) {\n                    continue;\n                }\n                polygons.push(rings);\n            }\n            const isLine = harp_datasource_protocol_1.isSolidLineTechnique(technique) || harp_datasource_protocol_1.isLineTechnique(technique);\n            if (isPolygon) {\n                this.applyPolygonTechnique(polygons, technique, techniqueIndex, featureId, context, extents);\n            }\n            else if (isLine) {\n                const lineGeometry = technique.name === \"line\" ? this.m_simpleLines : this.m_solidLines;\n                const lineType = technique.name === \"line\" ? LineType.Simple : LineType.Complex;\n                polygons.forEach(rings => {\n                    const lines = [];\n                    rings.forEach(ring => {\n                        const length = ring.contour.length / ring.vertexStride;\n                        let line = [];\n                        for (let i = 0; i < length; ++i) {\n                            const nextIdx = (i + 1) % length;\n                            const currX = ring.contour[i * ring.vertexStride];\n                            const currY = ring.contour[i * ring.vertexStride + 1];\n                            const nextX = ring.contour[nextIdx * ring.vertexStride];\n                            const nextY = ring.contour[nextIdx * ring.vertexStride + 1];\n                            const isOutline = !((currX <= 0 && nextX <= 0) ||\n                                (currX >= ring.extents && nextX >= ring.extents) ||\n                                (currY <= 0 && nextY <= 0) ||\n                                (currY >= ring.extents && nextY >= ring.extents));\n                            if (!isOutline && line.length !== 0) {\n                                lines.push(line);\n                                line = [];\n                            }\n                            else if (isOutline && line.length === 0) {\n                                OmvUtils_1.webMercatorTile2TargetTile(extents, this.m_decodeInfo, tmpV2.set(currX, currY), tmpV3);\n                                line.push(tmpV3.x, tmpV3.y, tmpV3.z);\n                            }\n                            if (isOutline) {\n                                OmvUtils_1.webMercatorTile2TargetTile(extents, this.m_decodeInfo, tmpV2.set(nextX, nextY), tmpV3);\n                                line.push(tmpV3.x, tmpV3.y, tmpV3.z);\n                            }\n                        }\n                        if (line.length) {\n                            lines.push(line);\n                        }\n                    });\n                    if (lines.length === 0) {\n                        return;\n                    }\n                    this.applyLineTechnique(lineGeometry, technique, techniqueIndex, lineType, env.entries, lines, context);\n                });\n            }\n        });\n    }\n    /**\n     * Creates the geometries that belongs to the [[Tile].\n     *\n     * @returns The [[DecodedTile]]\n     */\n    getDecodedTile() {\n        this.createGeometries();\n        this.processSimpleLines(this.m_simpleLines);\n        this.processLines(this.m_solidLines);\n        const decodedTile = {\n            techniques: this.m_styleSetEvaluator.decodedTechniques,\n            geometries: this.m_geometries,\n            decodeTime: undefined\n        };\n        if (this.m_textGeometries.length > 0) {\n            decodedTile.textGeometries = this.m_textGeometries;\n        }\n        if (this.m_poiGeometries.length > 0) {\n            decodedTile.poiGeometries = this.m_poiGeometries;\n        }\n        if (this.m_textPathGeometries.length > 0) {\n            decodedTile.textPathGeometries = this.m_textPathGeometries;\n        }\n        if (this.m_pathGeometries.length > 0) {\n            decodedTile.pathGeometries = this.m_pathGeometries;\n        }\n        if (this.m_sources.length !== 0) {\n            decodedTile.copyrightHolderIds = this.m_sources;\n        }\n        decodedTile.maxGeometryHeight = this.m_maxGeometryHeight;\n        return decodedTile;\n    }\n    /**\n     * Split the lines array into multiple parts if there are sharp corners. Reject parts that are\n     * too short to display the label text.\n     *\n     * @param {number[][]} lines Array containing the points of the paths.\n     * @param {number} minEstimatedLabelLengthSqr Minimum label size squared.\n     * @param {number} maxCornerAngle Maximum angle between consecutive path segments in radians.\n     * @returns The split and filtered lines array.\n     */\n    splitJaggyLines(lines, minEstimatedLabelLengthSqr, maxCornerAngle) {\n        const validLines = [];\n        const computeBoundingBoxSizeSqr = (aLine, startIndex, endIndex) => {\n            let minX = Number.MAX_SAFE_INTEGER;\n            let maxX = Number.MIN_SAFE_INTEGER;\n            let minY = Number.MAX_SAFE_INTEGER;\n            let maxY = Number.MIN_SAFE_INTEGER;\n            for (let i = startIndex; i < endIndex; i += 3) {\n                const x = aLine[i];\n                const y = aLine[i + 1];\n                if (x < minX) {\n                    minX = x;\n                }\n                if (x > maxX) {\n                    maxX = x;\n                }\n                if (y < minY) {\n                    minY = y;\n                }\n                if (y > maxY) {\n                    maxY = y;\n                }\n            }\n            return (maxX - minX) * (maxX - minX) + (maxY - minY) * (maxY - minY);\n        };\n        // Work on a copy of the path.\n        const pathsToCheck = lines.slice();\n        while (pathsToCheck.length > 0) {\n            const path = pathsToCheck.pop();\n            if (path === undefined || path.length < 6) {\n                continue;\n            }\n            let splitIndex = -1;\n            for (let i = 0; i < path.length - 3; i += 3) {\n                tempP0.set(path[i], path[i + 1]);\n                tempP1.set(path[i + 3], path[i + 4]);\n                const tangent = tempP1.sub(tempP0).normalize();\n                if (i > 0) {\n                    const theta = Math.atan2(tempPreviousTangent.x * tangent.y - tangent.x * tempPreviousTangent.y, tangent.dot(tempPreviousTangent));\n                    if (Math.abs(theta) > maxCornerAngle) {\n                        splitIndex = i;\n                        break;\n                    }\n                }\n                tempPreviousTangent.set(tangent.x, tangent.y);\n            }\n            if (splitIndex > 0) {\n                // Estimate if the first part of the path is long enough for the label.\n                const firstPathLengthSqr = computeBoundingBoxSizeSqr(path, 0, splitIndex + 3);\n                // Estimate if the second part of the path is long enough for the label.\n                const secondPathLengthSqr = computeBoundingBoxSizeSqr(path, splitIndex, path.length);\n                if (firstPathLengthSqr > minEstimatedLabelLengthSqr) {\n                    // Split off the valid first path points with a clone of the path.\n                    validLines.push(path.slice(0, splitIndex + 3));\n                }\n                if (secondPathLengthSqr > minEstimatedLabelLengthSqr) {\n                    // Now process the second part of the path, it may have to be split\n                    // again.\n                    pathsToCheck.push(path.slice(splitIndex));\n                }\n            }\n            else {\n                // Estimate if the path is long enough for the label, otherwise ignore\n                // it for rendering text. First, compute the bounding box in world\n                // coordinates.\n                const pathLengthSqr = computeBoundingBoxSizeSqr(path, 0, path.length);\n                if (pathLengthSqr > minEstimatedLabelLengthSqr) {\n                    validLines.push(path);\n                }\n            }\n        }\n        return validLines;\n    }\n    getTextureCoordinateType(technique) {\n        // Set TileSpace coordinate type to generate texture coordinates for the displacement map\n        // used in elevation overlay.\n        if ((harp_datasource_protocol_1.isFillTechnique(technique) ||\n            harp_datasource_protocol_1.isSolidLineTechnique(technique) ||\n            harp_datasource_protocol_1.isExtrudedPolygonTechnique(technique)) &&\n            this.m_enableElevationOverlay) {\n            return harp_datasource_protocol_1.TextureCoordinateType.TileSpace;\n        }\n        return harp_datasource_protocol_1.textureCoordinateType(technique);\n    }\n    getComputeTexCoordsFunc(technique) {\n        const texCoordType = this.getTextureCoordinateType(technique);\n        return texCoordType === harp_datasource_protocol_1.TextureCoordinateType.TileSpace\n            ? (tilePos, tileExtents) => {\n                const { x: u, y: v } = new THREE.Vector2()\n                    .copy(tilePos)\n                    .divideScalar(tileExtents);\n                return { u, v: 1 - v };\n            }\n            : texCoordType === harp_datasource_protocol_1.TextureCoordinateType.EquirectangularSpace\n                ? (tilePos, extents) => {\n                    const worldPos = OmvUtils_1.tile2world(extents, this.m_decodeInfo, tilePos, false, tmpV2r);\n                    const { x: u, y: v } = harp_geoutils_1.normalizedEquirectangularProjection.reprojectPoint(harp_geoutils_1.webMercatorProjection, new THREE.Vector3(worldPos.x, worldPos.y, 0));\n                    return { u, v };\n                }\n                : undefined;\n    }\n    applyLineTechnique(linesGeometry, technique, techniqueIndex, lineType = LineType.Complex, featureAttributes, lines, context, uvs, offsets) {\n        const renderOrderOffset = TechniqueAttr_1.evaluateTechniqueAttr(context, technique.renderOrderOffset, 0);\n        let lineGroup;\n        const lineGroupGeometries = linesGeometry.find(aLine => {\n            return (aLine.technique === techniqueIndex && aLine.renderOrderOffset === renderOrderOffset);\n        });\n        const hasNormalsAndUvs = uvs !== undefined;\n        if (lineGroupGeometries === undefined) {\n            lineGroup = new Lines_1.LineGroup(hasNormalsAndUvs, undefined, lineType === LineType.Simple);\n            const aLine = {\n                type: lineType === LineType.Complex ? harp_datasource_protocol_1.GeometryType.SolidLine : harp_datasource_protocol_1.GeometryType.Line,\n                technique: techniqueIndex,\n                renderOrderOffset: renderOrderOffset !== undefined ? Number(renderOrderOffset) : undefined,\n                lines: lineGroup\n            };\n            const techniqueTransient = TechniqueAttr_1.evaluateTechniqueAttr(context, technique.transient, false);\n            if (!techniqueTransient && this.m_gatherFeatureAttributes) {\n                // if this technique is transient, do not save the featureIds with the geometry\n                aLine.objInfos = [featureAttributes];\n                aLine.featureStarts = [0];\n            }\n            linesGeometry.push(aLine);\n        }\n        else {\n            lineGroup = lineGroupGeometries.lines;\n            if (this.m_gatherFeatureAttributes &&\n                lineGroupGeometries.objInfos &&\n                lineGroupGeometries.featureStarts) {\n                // Add ID to tag the geometry, also provide the current length of the index\n                // attribute\n                lineGroupGeometries.objInfos.push(featureAttributes);\n                lineGroupGeometries.featureStarts.push(lineGroup.indices.length);\n            }\n        }\n        let i = 0;\n        lines.forEach(aLine => {\n            lineGroup.add(this.m_decodeInfo.center, aLine, offsets ? offsets[i] : undefined, uvs ? uvs[i] : undefined);\n            i++;\n        });\n    }\n    applyPolygonTechnique(polygons, technique, techniqueIndex, featureId, context, extents) {\n        const isExtruded = harp_datasource_protocol_1.isExtrudedPolygonTechnique(technique);\n        const geometryType = isExtruded ? harp_datasource_protocol_1.GeometryType.ExtrudedPolygon : harp_datasource_protocol_1.GeometryType.Polygon;\n        const meshBuffers = this.findOrCreateMeshBuffers(techniqueIndex, geometryType);\n        if (meshBuffers === undefined) {\n            return;\n        }\n        const extrudedPolygonTechnique = technique;\n        const fillTechnique = technique;\n        const boundaryWalls = extrudedPolygonTechnique.boundaryWalls !== false;\n        const isFilled = harp_datasource_protocol_1.isFillTechnique(technique);\n        const texCoordType = this.getTextureCoordinateType(technique);\n        let height = TechniqueAttr_1.evaluateTechniqueAttr(context, extrudedPolygonTechnique.height);\n        let floorHeight = TechniqueAttr_1.evaluateTechniqueAttr(context, extrudedPolygonTechnique.floorHeight);\n        if (height === undefined) {\n            // Get the height values for the footprint and extrusion.\n            const featureHeight = context.env.lookup(\"height\");\n            const styleSetDefaultHeight = TechniqueAttr_1.evaluateTechniqueAttr(context, extrudedPolygonTechnique.defaultHeight);\n            height =\n                featureHeight !== undefined\n                    ? featureHeight\n                    : styleSetDefaultHeight !== undefined\n                        ? styleSetDefaultHeight\n                        : 0;\n        }\n        if (floorHeight === undefined) {\n            const featureMinHeight = context.env.lookup(\"min_height\");\n            floorHeight = featureMinHeight !== undefined && !isFilled ? featureMinHeight : 0;\n        }\n        // Prevent that extruded buildings are completely flat (can introduce errors in normal\n        // computation and extrusion).\n        height = Math.max(floorHeight + MapMeshMaterialsDefs_1.ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT, height);\n        const styleSetConstantHeight = harp_utils_1.getOptionValue(extrudedPolygonTechnique.constantHeight, false);\n        this.m_decodeInfo.tileBounds.getCenter(tempTileOrigin);\n        const { positions, normals, textureCoordinates, colors, extrusionAxis, indices, edgeIndices, groups } = meshBuffers;\n        const featureStride = texCoordType !== undefined ? 4 : 2;\n        const vertexStride = featureStride + 2;\n        const isSpherical = this.m_decodeInfo.targetProjection.type === harp_geoutils_1.ProjectionType.Spherical;\n        const edgeWidth = isExtruded\n            ? extrudedPolygonTechnique.lineWidth || 0.0\n            : isFilled\n                ? fillTechnique.lineWidth || 0.0\n                : 0.0;\n        const hasEdges = edgeWidth > 0.0;\n        let color;\n        if (harp_datasource_protocol_1.isExtrudedPolygonTechnique(technique)) {\n            if (harp_utils_1.getOptionValue(technique.vertexColors, false)) {\n                let colorValue = TechniqueAttr_1.evaluateTechniqueAttr(context, technique.color);\n                if (colorValue === undefined) {\n                    const featureColor = context.env.lookup(\"color\");\n                    if (this.isColorStringValid(featureColor)) {\n                        colorValue = String(featureColor);\n                    }\n                }\n                if (colorValue === undefined) {\n                    colorValue = TechniqueAttr_1.evaluateTechniqueAttr(context, technique.defaultColor, 0x000000);\n                }\n                if (colorValue === undefined) {\n                    colorValue = 0x000000;\n                }\n                tmpColor.set(colorValue);\n                color = tmpColor;\n            }\n        }\n        for (const polygon of polygons) {\n            const startIndexCount = indices.length;\n            for (let ringIndex = 0; ringIndex < polygon.length;) {\n                const vertices = [];\n                const polygonBaseVertex = positions.length / 3;\n                const { contour, winding } = polygon[ringIndex++];\n                for (let i = 0; i < contour.length / featureStride; ++i) {\n                    // Invert the Y component to preserve the correct winding without transforming\n                    // from webMercator's local to global space.\n                    for (let j = 0; j < featureStride; ++j) {\n                        vertices.push((j === 1 ? -1 : 1) * contour[i * featureStride + j]);\n                    }\n                    // Calculate nextEdge and nextWall.\n                    const nextIdx = (i + 1) % (contour.length / featureStride);\n                    const currX = contour[i * featureStride];\n                    const currY = contour[i * featureStride + 1];\n                    const nextX = contour[nextIdx * featureStride];\n                    const nextY = contour[nextIdx * featureStride + 1];\n                    const insideExtents = !((currX <= 0 && nextX <= 0) ||\n                        (currX >= extents && nextX >= extents) ||\n                        (currY <= 0 && nextY <= 0) ||\n                        (currY >= extents && nextY >= extents));\n                    vertices.push(insideExtents ? nextIdx : -1, boundaryWalls || insideExtents ? nextIdx : -1);\n                }\n                // Iterate over the inner rings. The inner rings have the opposite winding\n                // of the outer rings.\n                const holes = [];\n                while (ringIndex < polygon.length && polygon[ringIndex].winding !== winding) {\n                    const vertexOffset = vertices.length / vertexStride;\n                    holes.push(vertexOffset);\n                    const hole = polygon[ringIndex++].contour;\n                    for (let i = 0; i < hole.length / featureStride; ++i) {\n                        // Invert the Y component to preserve the correct winding without\n                        // transforming from webMercator's local to global space.\n                        for (let j = 0; j < featureStride; ++j) {\n                            vertices.push((j === 1 ? -1 : 1) * hole[i * featureStride + j]);\n                        }\n                        // Calculate nextEdge and nextWall.\n                        const nextIdx = (i + 1) % (hole.length / featureStride);\n                        const currX = hole[i * featureStride];\n                        const currY = hole[i * featureStride + 1];\n                        const nextX = hole[nextIdx * featureStride];\n                        const nextY = hole[nextIdx * featureStride + 1];\n                        const insideExtents = !((currX <= 0 && nextX <= 0) ||\n                            (currX >= extents && nextX >= extents) ||\n                            (currY <= 0 && nextY <= 0) ||\n                            (currY >= extents && nextY >= extents));\n                        vertices.push(insideExtents ? vertexOffset + nextIdx : -1, boundaryWalls || insideExtents ? vertexOffset + nextIdx : -1);\n                    }\n                }\n                try {\n                    // Triangulate the footprint polyline.\n                    const triangles = earcut_1.default(vertices, holes, vertexStride);\n                    const originalVertexCount = vertices.length / vertexStride;\n                    // Subdivide for spherical projections if needed.\n                    if (isSpherical) {\n                        const geom = new THREE.BufferGeometry();\n                        const positionArray = [];\n                        const uvArray = [];\n                        const edgeArray = [];\n                        const wallArray = [];\n                        // Transform to global webMercator coordinates to be able to reproject to\n                        // sphere.\n                        for (let i = 0; i < vertices.length; i += vertexStride) {\n                            const worldPos = OmvUtils_1.tile2world(extents, this.m_decodeInfo, tmpV2.set(vertices[i], vertices[i + 1]), true, tmpV2r);\n                            positionArray.push(worldPos.x, worldPos.y, 0);\n                            if (texCoordType !== undefined) {\n                                uvArray.push(vertices[i + 2], vertices[i + 3]);\n                            }\n                            edgeArray.push(vertices[i + featureStride]);\n                            wallArray.push(vertices[i + featureStride + 1]);\n                        }\n                        // Create the temporary geometry used for subdivision.\n                        const posAttr = new THREE.BufferAttribute(new Float32Array(positionArray), 3);\n                        geom.setAttribute(\"position\", posAttr);\n                        let uvAttr;\n                        if (texCoordType !== undefined) {\n                            uvAttr = new THREE.BufferAttribute(new Float32Array(uvArray), 2);\n                            geom.setAttribute(\"uv\", uvAttr);\n                        }\n                        const edgeAttr = new THREE.BufferAttribute(new Float32Array(edgeArray), 1);\n                        geom.setAttribute(\"edge\", edgeAttr);\n                        const wallAttr = new THREE.BufferAttribute(new Float32Array(wallArray), 1);\n                        geom.setAttribute(\"wall\", edgeAttr);\n                        const indexAttr = new THREE.BufferAttribute(new Uint32Array(triangles), 1);\n                        geom.setIndex(indexAttr);\n                        // FIXME(HARP-5700): Subdivision modifier ignores texture coordinates.\n                        const modifier = new SphericalGeometrySubdivisionModifier_1.SphericalGeometrySubdivisionModifier(THREE.Math.degToRad(10), harp_geoutils_1.webMercatorProjection);\n                        modifier.modify(geom);\n                        // Reassemble the vertex buffer, transforming the subdivided global\n                        // webMercator points back to local space.\n                        vertices.length = 0;\n                        triangles.length = 0;\n                        for (let i = 0; i < posAttr.array.length; i += 3) {\n                            const tilePos = OmvUtils_1.world2tile(extents, this.m_decodeInfo, tmpV2.set(posAttr.array[i], posAttr.array[i + 1]), true, tmpV2r);\n                            vertices.push(tilePos.x, tilePos.y);\n                            if (texCoordType !== undefined) {\n                                vertices.push(uvAttr.array[(i / 3) * 2]);\n                                vertices.push(uvAttr.array[(i / 3) * 2 + 1]);\n                            }\n                            vertices.push(edgeAttr.array[i / 3]);\n                            vertices.push(wallAttr.array[i / 3]);\n                        }\n                        const geomIndex = geom.getIndex();\n                        if (geomIndex !== null) {\n                            triangles.push(...geomIndex.array);\n                        }\n                    }\n                    // Add the footprint/roof vertices to the position buffer.\n                    tempVertNormal.set(0, 0, 1);\n                    // Assemble the vertex buffer.\n                    for (let i = 0; i < vertices.length; i += vertexStride) {\n                        OmvUtils_1.webMercatorTile2TargetTile(extents, this.m_decodeInfo, tmpV2.set(vertices[i], vertices[i + 1]), tmpV3, true);\n                        let scaleFactor = 1.0;\n                        if (isExtruded && styleSetConstantHeight !== true) {\n                            tempVertOrigin.set(tempTileOrigin.x + tmpV3.x, tempTileOrigin.y + tmpV3.y, tempTileOrigin.z + tmpV3.z);\n                            scaleFactor = this.m_decodeInfo.targetProjection.getScaleFactor(tempVertOrigin);\n                        }\n                        this.m_maxGeometryHeight = Math.max(this.m_maxGeometryHeight, scaleFactor * height);\n                        if (isSpherical) {\n                            tempVertNormal\n                                .set(tmpV3.x, tmpV3.y, tmpV3.z)\n                                .add(this.center)\n                                .normalize();\n                        }\n                        tempFootDisp.copy(tempVertNormal).multiplyScalar(floorHeight * scaleFactor);\n                        tempRoofDisp.copy(tempVertNormal).multiplyScalar(height * scaleFactor);\n                        positions.push(tmpV3.x + tempFootDisp.x, tmpV3.y + tempFootDisp.y, tmpV3.z + tempFootDisp.z);\n                        if (texCoordType !== undefined) {\n                            textureCoordinates.push(vertices[i + 2], vertices[i + 3]);\n                        }\n                        if (this.m_enableElevationOverlay) {\n                            normals.push(...tempVertNormal.toArray());\n                        }\n                        if (isExtruded) {\n                            positions.push(tmpV3.x + tempRoofDisp.x, tmpV3.y + tempRoofDisp.y, tmpV3.z + tempRoofDisp.z);\n                            extrusionAxis.push(0.0, 0.0, 0.0, 0.0, tempRoofDisp.x - tempFootDisp.x, tempRoofDisp.y - tempFootDisp.y, tempRoofDisp.z - tempFootDisp.z, 1.0);\n                            if (texCoordType !== undefined) {\n                                textureCoordinates.push(vertices[i + 2], vertices[i + 3]);\n                            }\n                            if (this.m_enableElevationOverlay) {\n                                normals.push(...tempVertNormal.toArray());\n                            }\n                            if (color !== undefined) {\n                                colors.push(color.r, color.g, color.b, color.r, color.g, color.b);\n                            }\n                        }\n                    }\n                    // Add the footprint/roof indices to the index buffer.\n                    for (let i = 0; i < triangles.length; i += 3) {\n                        if (isExtruded) {\n                            // When extruding we duplicate the vertices, so that all even vertices\n                            // belong to the bottom and all odd vertices belong to the top.\n                            const i0 = polygonBaseVertex + triangles[i + 0] * 2 + 1;\n                            const i1 = polygonBaseVertex + triangles[i + 1] * 2 + 1;\n                            const i2 = polygonBaseVertex + triangles[i + 2] * 2 + 1;\n                            indices.push(i0, i1, i2);\n                        }\n                        else {\n                            const i0 = polygonBaseVertex + triangles[i + 0];\n                            const i1 = polygonBaseVertex + triangles[i + 1];\n                            const i2 = polygonBaseVertex + triangles[i + 2];\n                            indices.push(i0, i1, i2);\n                        }\n                    }\n                    // Assemble the index buffer for edges (follow vertices as linked list).\n                    if (hasEdges) {\n                        this.addEdges(polygonBaseVertex, originalVertexCount, vertexStride, featureStride, positions, vertices, edgeIndices, isExtruded, extrudedPolygonTechnique.footprint, extrudedPolygonTechnique.maxSlope);\n                    }\n                    if (isExtruded) {\n                        this.addWalls(polygonBaseVertex, originalVertexCount, vertexStride, featureStride, vertices, indices);\n                    }\n                }\n                catch (err) {\n                    logger.error(`cannot triangulate geometry`, err);\n                }\n            }\n            if (this.m_gatherFeatureAttributes) {\n                meshBuffers.objInfos.push(context.env.entries);\n                meshBuffers.featureStarts.push(startIndexCount);\n            }\n            const count = indices.length - startIndexCount;\n            if (count > 0) {\n                groups.push({\n                    start: startIndexCount,\n                    count,\n                    technique: techniqueIndex,\n                    featureId\n                });\n            }\n        }\n    }\n    createGeometries() {\n        this.m_meshBuffers.forEach((meshBuffers, techniqueIdx) => {\n            if (meshBuffers.positions.length === 0) {\n                return;\n            } // nothing to do\n            if (!this.m_styleSetEvaluator.techniques ||\n                this.m_styleSetEvaluator.techniques.length <= techniqueIdx) {\n                throw new Error(\"Invalid technique index\");\n            }\n            const technique = this.m_styleSetEvaluator.techniques[techniqueIdx];\n            if (technique === undefined) {\n                return;\n            }\n            const positionElements = new Float32Array(meshBuffers.positions);\n            if (meshBuffers.texts.length > 0 && harp_datasource_protocol_1.isTextTechnique(technique)) {\n                this.m_textGeometries.push({\n                    positions: {\n                        name: \"position\",\n                        type: \"float\",\n                        buffer: positionElements.buffer,\n                        itemCount: 3\n                    },\n                    texts: meshBuffers.texts,\n                    technique: techniqueIdx,\n                    stringCatalog: meshBuffers.stringCatalog,\n                    objInfos: meshBuffers.objInfos\n                });\n                return;\n            }\n            if (meshBuffers.texts.length > 0 && harp_datasource_protocol_1.isPoiTechnique(technique)) {\n                this.m_poiGeometries.push({\n                    positions: {\n                        name: \"position\",\n                        type: \"float\",\n                        buffer: positionElements.buffer,\n                        itemCount: 3\n                    },\n                    texts: meshBuffers.texts,\n                    technique: techniqueIdx,\n                    stringCatalog: meshBuffers.stringCatalog,\n                    imageTextures: meshBuffers.imageTextures,\n                    objInfos: meshBuffers.objInfos\n                });\n                return;\n            }\n            if (meshBuffers.groups.length === 0) {\n                // create a default group containing all the vertices in the position attribute.\n                meshBuffers.groups.push({\n                    start: 0,\n                    count: positionElements.length / 3,\n                    technique: techniqueIdx\n                });\n            }\n            const geometry = {\n                type: meshBuffers.type,\n                vertexAttributes: [\n                    {\n                        name: \"position\",\n                        buffer: positionElements.buffer,\n                        itemCount: 3,\n                        type: \"float\"\n                    }\n                ],\n                groups: meshBuffers.groups\n            };\n            if (meshBuffers.normals.length > 0) {\n                const normals = new Float32Array(meshBuffers.normals);\n                harp_utils_1.assert(normals.length === positionElements.length, \"length of normals buffer is different than the length of the \" +\n                    \"position buffer\");\n                geometry.vertexAttributes.push({\n                    name: \"normal\",\n                    buffer: normals.buffer,\n                    itemCount: 3,\n                    type: \"float\"\n                });\n            }\n            if (meshBuffers.colors.length > 0) {\n                const colors = new Float32Array(meshBuffers.colors);\n                harp_utils_1.assert(colors.length === positionElements.length, \"length of colors buffer is different than the length of the \" +\n                    \"position buffer\");\n                geometry.vertexAttributes.push({\n                    name: \"color\",\n                    buffer: colors.buffer,\n                    itemCount: 3,\n                    type: \"float\"\n                });\n            }\n            if (meshBuffers.textureCoordinates.length > 0) {\n                const positionCount = meshBuffers.positions.length / 3;\n                const texCoordCount = meshBuffers.textureCoordinates.length / 2;\n                harp_utils_1.assert(texCoordCount === positionCount, \"length of textureCoordinates buffer is different than the length of the\" +\n                    \"position buffer\");\n                const textureCoordinates = new Float32Array(meshBuffers.textureCoordinates);\n                geometry.vertexAttributes.push({\n                    name: \"uv\",\n                    buffer: textureCoordinates.buffer,\n                    itemCount: 2,\n                    type: \"float\"\n                });\n            }\n            if (meshBuffers.extrusionAxis.length > 0) {\n                const extrusionAxis = new Float32Array(meshBuffers.extrusionAxis);\n                harp_utils_1.assert(extrusionAxis.length / 4 === positionElements.length / 3, \"length of extrusionAxis buffer is different than the length of the \" +\n                    \"position buffer\");\n                geometry.vertexAttributes.push({\n                    name: \"extrusionAxis\",\n                    buffer: extrusionAxis.buffer,\n                    itemCount: 4,\n                    type: \"float\"\n                });\n            }\n            if (meshBuffers.indices.length > 0) {\n                // TODO: use uint16 for buffers when possible\n                geometry.index = {\n                    name: \"index\",\n                    buffer: new Uint32Array(meshBuffers.indices).buffer,\n                    itemCount: 1,\n                    type: \"uint32\"\n                };\n            }\n            if (meshBuffers.edgeIndices.length > 0) {\n                // TODO: use uint16 for buffers when possible. Issue HARP-3987\n                geometry.edgeIndex = {\n                    name: \"edgeIndex\",\n                    buffer: new Uint32Array(meshBuffers.edgeIndices)\n                        .buffer,\n                    itemCount: 1,\n                    type: \"uint32\"\n                };\n            }\n            geometry.featureStarts = meshBuffers.featureStarts;\n            geometry.objInfos = meshBuffers.objInfos;\n            this.m_geometries.push(geometry);\n        });\n    }\n    processLines(linesArray) {\n        linesArray.forEach(linesGeometry => {\n            const { vertices, indices } = linesGeometry.lines;\n            const renderOrderOffset = linesGeometry.renderOrderOffset;\n            const technique = linesGeometry.technique;\n            const buffer = new Float32Array(vertices).buffer;\n            const index = new Uint32Array(indices).buffer;\n            const attr = {\n                type: \"float\",\n                stride: linesGeometry.lines.stride,\n                buffer,\n                attributes: linesGeometry.lines.vertexAttributes\n            };\n            const geometry = {\n                type: harp_datasource_protocol_1.GeometryType.SolidLine,\n                index: {\n                    buffer: index,\n                    itemCount: 1,\n                    type: \"uint32\",\n                    name: \"index\"\n                },\n                interleavedVertexAttributes: [attr],\n                groups: [{ start: 0, count: indices.length, technique, renderOrderOffset }],\n                vertexAttributes: [],\n                featureStarts: linesGeometry.featureStarts,\n                objInfos: linesGeometry.objInfos\n            };\n            this.m_geometries.push(geometry);\n        });\n    }\n    processSimpleLines(linesArray) {\n        linesArray.forEach(linesGeometry => {\n            const { vertices, indices } = linesGeometry.lines;\n            const renderOrderOffset = linesGeometry.renderOrderOffset;\n            const technique = linesGeometry.technique;\n            const buffer = new Float32Array(vertices).buffer;\n            const index = new Uint32Array(indices).buffer;\n            const attr = {\n                buffer,\n                itemCount: 3,\n                type: \"float\",\n                name: \"position\"\n            };\n            const geometry = {\n                type: harp_datasource_protocol_1.GeometryType.Line,\n                index: {\n                    buffer: index,\n                    itemCount: 1,\n                    type: \"uint32\",\n                    name: \"index\"\n                },\n                vertexAttributes: [attr],\n                groups: [{ start: 0, count: indices.length, technique, renderOrderOffset }],\n                featureStarts: linesGeometry.featureStarts,\n                objInfos: linesGeometry.objInfos\n            };\n            this.m_geometries.push(geometry);\n        });\n    }\n    findOrCreateMeshBuffers(index, type) {\n        let buffers = this.m_meshBuffers.get(index);\n        if (buffers !== undefined) {\n            if (buffers.type !== type) {\n                logger.error(`MeshBuffer has been created with wrong type \"${harp_datasource_protocol_1.GeometryType[type]}\"\n                instead of \"${harp_datasource_protocol_1.GeometryType[buffers.type]}\"`);\n                return undefined;\n            }\n            return buffers;\n        }\n        buffers = new MeshBuffers(type);\n        this.m_meshBuffers.set(index, buffers);\n        return buffers;\n    }\n    processFeatureCommon(env) {\n        const source = env.lookup(\"source\");\n        if (typeof source === \"string\" && source !== \"\") {\n            if (!this.m_sources.includes(source)) {\n                this.m_sources.push(source);\n            }\n        }\n    }\n    isColorStringValid(color) {\n        return typeof color === \"string\" && color.length > 0;\n    }\n    addEdges(featureBaseVertex, featureVertexCount, vertexStride, featureStride, positions, vertices, indices, isExtruded, hasFootprint, maxSlope) {\n        const tmpEdgeA = new THREE.Vector3();\n        const tmpEdgeB = new THREE.Vector3();\n        let firstRingVertex;\n        let prevRingVertex;\n        let currRingVertex = 0;\n        let maxRingVertex = 0;\n        while (currRingVertex < featureVertexCount) {\n            while (currRingVertex !== firstRingVertex) {\n                if (firstRingVertex === undefined) {\n                    firstRingVertex = currRingVertex;\n                }\n                if (currRingVertex < featureVertexCount) {\n                    maxRingVertex = Math.max(maxRingVertex, currRingVertex);\n                }\n                const nextRingVertex = vertices[currRingVertex * vertexStride + featureStride];\n                if (nextRingVertex < 0) {\n                    break;\n                }\n                else {\n                    if (!isExtruded) {\n                        indices.push(featureBaseVertex + currRingVertex, featureBaseVertex + nextRingVertex);\n                    }\n                    else {\n                        if (hasFootprint === true) {\n                            indices.push(featureBaseVertex + currRingVertex * 2, featureBaseVertex + nextRingVertex * 2);\n                        }\n                        indices.push(featureBaseVertex + currRingVertex * 2 + 1, featureBaseVertex + nextRingVertex * 2 + 1);\n                        if (maxSlope !== undefined) {\n                            if (prevRingVertex !== undefined) {\n                                const prevPos = (featureBaseVertex + prevRingVertex * 2) * 3;\n                                const currPos = (featureBaseVertex + currRingVertex * 2) * 3;\n                                const nextPos = (featureBaseVertex + nextRingVertex * 2) * 3;\n                                tmpEdgeA\n                                    .set(positions[currPos] - positions[prevPos], positions[currPos + 1] - positions[prevPos + 1], positions[currPos + 2] - positions[prevPos + 2])\n                                    .normalize();\n                                tmpEdgeB\n                                    .set(positions[nextPos] - positions[currPos], positions[nextPos + 1] - positions[currPos + 1], positions[nextPos + 2] - positions[currPos + 2])\n                                    .normalize();\n                                if (tmpEdgeA.dot(tmpEdgeB) <= maxSlope) {\n                                    indices.push(featureBaseVertex + currRingVertex * 2, featureBaseVertex + currRingVertex * 2 + 1);\n                                }\n                            }\n                        }\n                        else {\n                            indices.push(featureBaseVertex + currRingVertex * 2, featureBaseVertex + currRingVertex * 2 + 1);\n                        }\n                    }\n                    prevRingVertex = currRingVertex;\n                    currRingVertex = nextRingVertex;\n                }\n            }\n            currRingVertex = maxRingVertex + 1;\n            firstRingVertex = undefined;\n            prevRingVertex = undefined;\n        }\n    }\n    addWalls(featureBaseVertex, featureVertexCount, vertexStride, featureStride, vertices, indices) {\n        let firstRingVertex;\n        let currRingVertex = 0;\n        let maxRingVertex = 0;\n        while (currRingVertex < featureVertexCount) {\n            while (currRingVertex !== firstRingVertex) {\n                if (firstRingVertex === undefined) {\n                    firstRingVertex = currRingVertex;\n                }\n                if (currRingVertex < featureVertexCount) {\n                    maxRingVertex = Math.max(maxRingVertex, currRingVertex);\n                }\n                const nextRingVertex = vertices[currRingVertex * vertexStride + featureStride + 1];\n                if (nextRingVertex < 0) {\n                    break;\n                }\n                else {\n                    indices.push(featureBaseVertex + currRingVertex * 2, featureBaseVertex + currRingVertex * 2 + 1, featureBaseVertex + nextRingVertex * 2 + 1, featureBaseVertex + nextRingVertex * 2 + 1, featureBaseVertex + nextRingVertex * 2, featureBaseVertex + currRingVertex * 2);\n                }\n                currRingVertex = nextRingVertex;\n            }\n            currRingVertex = maxRingVertex + 1;\n            firstRingVertex = undefined;\n        }\n    }\n    findRelativePositionInLine(p, line) {\n        let lineDist = Infinity;\n        let lineOffset = 0;\n        for (let i = 0; i < line.length; i += 4) {\n            // Find the closest point C in segment AB to point P.\n            tmpLine.set(tmpPointA.set(line[i], line[i + 1], line[i + 2]), tmpPointB.set(line[i + 4], line[i + 5], line[i + 6]));\n            tmpLine.closestPointToPoint(p, true, tmpPointC);\n            // If P is in AB (or really close), save A as anchor point and C (to estimate distance\n            // from segment origin).\n            const dist = tmpPointC.distanceTo(p);\n            if (dist < lineDist) {\n                tmpPointD.copy(tmpPointC);\n                tmpPointE.copy(tmpPointA);\n                lineDist = dist;\n                lineOffset = line[i + 3];\n            }\n        }\n        // Return the relative position of P inside the line.\n        return lineOffset + tmpPointD.distanceTo(tmpPointE);\n    }\n}\nexports.OmvDecodedTileEmitter = OmvDecodedTileEmitter;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/OmvDecodedTileEmitter.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/OmvDecoder.js":
/*!******************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/OmvDecoder.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\nconst index_worker_1 = __webpack_require__(/*! @here/harp-mapview-decoder/index-worker */ \"./node_modules/@here/harp-mapview-decoder/index-worker.js\");\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst OmvData_1 = __webpack_require__(/*! ./OmvData */ \"./node_modules/@here/harp-omv-datasource/lib/OmvData.js\");\nconst OmvDataFilter_1 = __webpack_require__(/*! ./OmvDataFilter */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDataFilter.js\");\nconst OmvDecodedTileEmitter_1 = __webpack_require__(/*! ./OmvDecodedTileEmitter */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDecodedTileEmitter.js\");\nconst OmvDecoderDefs_1 = __webpack_require__(/*! ./OmvDecoderDefs */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDecoderDefs.js\");\nconst OmvTileInfoEmitter_1 = __webpack_require__(/*! ./OmvTileInfoEmitter */ \"./node_modules/@here/harp-omv-datasource/lib/OmvTileInfoEmitter.js\");\nconst OmvTomTomFeatureModifier_1 = __webpack_require__(/*! ./OmvTomTomFeatureModifier */ \"./node_modules/@here/harp-omv-datasource/lib/OmvTomTomFeatureModifier.js\");\nconst StyleSetDataFilter_1 = __webpack_require__(/*! ./StyleSetDataFilter */ \"./node_modules/@here/harp-omv-datasource/lib/StyleSetDataFilter.js\");\nconst VTJsonDataAdapter_1 = __webpack_require__(/*! ./VTJsonDataAdapter */ \"./node_modules/@here/harp-omv-datasource/lib/VTJsonDataAdapter.js\");\nconst logger = harp_utils_1.LoggerManager.instance.create(\"OmvDecoder\", { enabled: false });\nclass Ring {\n    /**\n     * Constructs a new [[Ring]].\n     *\n     * @param extents The extents of the enclosing layer.\n     * @param vertexStride The stride of this elements stored in 'contour'.\n     * @param contour The [[Array]] containing the projected world coordinates.\n     */\n    constructor(extents, vertexStride, contour) {\n        this.extents = extents;\n        this.vertexStride = vertexStride;\n        this.contour = contour;\n        this.winding = this.area() < 0;\n    }\n    area() {\n        const points = this.contour;\n        const stride = this.vertexStride;\n        const n = points.length / stride;\n        let area = 0.0;\n        for (let p = n - 1, q = 0; q < n; p = q++) {\n            area +=\n                points[p * stride] * points[q * stride + 1] -\n                    points[q * stride] * points[p * stride + 1];\n        }\n        return area / 2;\n    }\n}\nexports.Ring = Ring;\nclass OmvDecoder {\n    constructor(m_projection, m_styleSetEvaluator, m_showMissingTechniques, m_dataFilter, m_featureModifier, m_gatherFeatureAttributes = false, m_createTileInfo = false, m_gatherRoadSegments = false, m_skipShortLabels = true, m_storageLevelOffset = 0, m_enableElevationOverlay = false, m_languages) {\n        this.m_projection = m_projection;\n        this.m_styleSetEvaluator = m_styleSetEvaluator;\n        this.m_showMissingTechniques = m_showMissingTechniques;\n        this.m_dataFilter = m_dataFilter;\n        this.m_featureModifier = m_featureModifier;\n        this.m_gatherFeatureAttributes = m_gatherFeatureAttributes;\n        this.m_createTileInfo = m_createTileInfo;\n        this.m_gatherRoadSegments = m_gatherRoadSegments;\n        this.m_skipShortLabels = m_skipShortLabels;\n        this.m_storageLevelOffset = m_storageLevelOffset;\n        this.m_enableElevationOverlay = m_enableElevationOverlay;\n        this.m_languages = m_languages;\n        this.m_dataAdapters = [];\n        const styleSetDataFilter = new StyleSetDataFilter_1.StyleSetDataFilter(m_styleSetEvaluator);\n        const dataPreFilter = m_dataFilter\n            ? new OmvDataFilter_1.ComposedDataFilter([styleSetDataFilter, m_dataFilter])\n            : styleSetDataFilter;\n        // Register the default adapters.\n        this.m_dataAdapters.push(new OmvData_1.OmvProtobufDataAdapter(this, dataPreFilter, logger));\n        this.m_dataAdapters.push(new VTJsonDataAdapter_1.VTJsonDataAdapter(this, dataPreFilter, logger));\n    }\n    get storageLevelOffset() {\n        return this.m_storageLevelOffset;\n    }\n    /**\n     * Given a tile and a protobuffer, it returns a decoded tile and it creates the geometries that\n     * belong to it.\n     *\n     * @param tileKey The tile to be decoded.\n     * @param data The protobuffer to decode from.\n     * @returns A [[DecodedTile]]\n     */\n    getDecodedTile(tileKey, data) {\n        let dataAdapter;\n        for (const adapter of this.m_dataAdapters.values()) {\n            if (adapter.canProcess(data)) {\n                dataAdapter = adapter;\n                break;\n            }\n        }\n        if (dataAdapter === undefined) {\n            return {\n                techniques: [],\n                geometries: []\n            };\n        }\n        this.m_styleSetEvaluator.resetTechniques();\n        const tileSizeOnScreen = this.estimatedTileSizeOnScreen();\n        const decodeInfo = new OmvDecoder.DecodeInfo(dataAdapter.id, this.m_projection, tileKey, tileSizeOnScreen);\n        this.m_decodedTileEmitter = new OmvDecodedTileEmitter_1.OmvDecodedTileEmitter(decodeInfo, this.m_styleSetEvaluator, this.m_gatherFeatureAttributes, this.m_skipShortLabels, this.m_enableElevationOverlay, this.m_languages);\n        if (this.m_createTileInfo) {\n            const storeExtendedTags = true;\n            this.m_infoTileEmitter = new OmvTileInfoEmitter_1.OmvTileInfoEmitter(decodeInfo, this.m_styleSetEvaluator, storeExtendedTags, this.m_gatherRoadSegments);\n        }\n        dataAdapter.process(data, tileKey, decodeInfo.geoBox);\n        const decodedTile = this.m_decodedTileEmitter.getDecodedTile();\n        if (this.m_createTileInfo) {\n            decodedTile.tileInfo = this.m_infoTileEmitter.getTileInfo();\n        }\n        return decodedTile;\n    }\n    getTileInfo(tileKey, data) {\n        let dataAdapter;\n        for (const adapter of this.m_dataAdapters.values()) {\n            if (adapter.canProcess(data)) {\n                dataAdapter = adapter;\n                break;\n            }\n        }\n        if (dataAdapter === undefined) {\n            return new harp_datasource_protocol_1.ExtendedTileInfo(tileKey, false);\n        }\n        this.m_styleSetEvaluator.resetTechniques();\n        const tileSizeOnScreen = this.estimatedTileSizeOnScreen();\n        const decodeInfo = new OmvDecoder.DecodeInfo(dataAdapter.id, this.m_projection, tileKey, tileSizeOnScreen);\n        const storeExtendedTags = true;\n        this.m_infoTileEmitter = new OmvTileInfoEmitter_1.OmvTileInfoEmitter(decodeInfo, this.m_styleSetEvaluator, storeExtendedTags, this.m_gatherRoadSegments);\n        for (const adapter of this.m_dataAdapters.values()) {\n            if (adapter.canProcess(data)) {\n                adapter.process(data, tileKey, decodeInfo.geoBox);\n                break;\n            }\n        }\n        return this.m_infoTileEmitter.getTileInfo();\n    }\n    processPointFeature(layer, extents, geometry, env, storageLevel) {\n        if (this.m_featureModifier !== undefined &&\n            !this.m_featureModifier.doProcessPointFeature(layer, env, storageLevel)) {\n            return;\n        }\n        const techniques = this.applyKindFilter(this.m_styleSetEvaluator.getMatchingTechniques(env, layer, \"point\"), harp_datasource_protocol_1.GeometryKind.Label);\n        if (techniques.length === 0) {\n            if (this.m_showMissingTechniques) {\n                logger.log(\"OmvDecoder#processPointFeature: no techniques for object:\", JSON.stringify(env.unmap()));\n            }\n            return;\n        }\n        const context = {\n            env,\n            storageLevel,\n            zoomLevel: this.getZoomLevel(storageLevel),\n            cachedExprResults: this.m_styleSetEvaluator.expressionEvaluatorCache\n        };\n        const featureId = env.lookup(\"$id\");\n        if (this.m_decodedTileEmitter) {\n            this.m_decodedTileEmitter.processPointFeature(layer, extents, geometry, context, techniques, featureId);\n        }\n        if (this.m_infoTileEmitter) {\n            this.m_infoTileEmitter.processPointFeature(layer, extents, geometry, context, techniques, featureId);\n        }\n    }\n    processLineFeature(layer, extents, geometry, env, storageLevel) {\n        if (this.m_featureModifier !== undefined &&\n            !this.m_featureModifier.doProcessLineFeature(layer, env, storageLevel)) {\n            return;\n        }\n        const techniques = this.applyKindFilter(this.m_styleSetEvaluator.getMatchingTechniques(env, layer, \"line\"), harp_datasource_protocol_1.GeometryKind.Line);\n        if (techniques.length === 0) {\n            if (this.m_showMissingTechniques) {\n                logger.log(\"OmvDecoder#processLineFeature: no techniques for object:\", JSON.stringify(env.unmap()));\n            }\n            return;\n        }\n        const context = {\n            env,\n            storageLevel,\n            zoomLevel: this.getZoomLevel(storageLevel),\n            cachedExprResults: this.m_styleSetEvaluator.expressionEvaluatorCache\n        };\n        const featureId = env.lookup(\"$id\");\n        if (this.m_decodedTileEmitter) {\n            this.m_decodedTileEmitter.processLineFeature(layer, extents, geometry, context, techniques, featureId);\n        }\n        if (this.m_infoTileEmitter) {\n            this.m_infoTileEmitter.processLineFeature(layer, extents, geometry, context, techniques, featureId);\n        }\n    }\n    processPolygonFeature(layer, extents, geometry, env, storageLevel) {\n        if (this.m_featureModifier !== undefined &&\n            !this.m_featureModifier.doProcessPolygonFeature(layer, env, storageLevel)) {\n            return;\n        }\n        const techniques = this.applyKindFilter(this.m_styleSetEvaluator.getMatchingTechniques(env, layer, \"polygon\"), harp_datasource_protocol_1.GeometryKind.Area);\n        if (techniques.length === 0) {\n            if (this.m_showMissingTechniques) {\n                logger.log(\"OmvDecoder#processPolygonFeature: no techniques for object:\", JSON.stringify(env.unmap()));\n            }\n            return;\n        }\n        const context = {\n            env,\n            storageLevel,\n            zoomLevel: this.getZoomLevel(storageLevel),\n            cachedExprResults: this.m_styleSetEvaluator.expressionEvaluatorCache\n        };\n        const featureId = env.lookup(\"$id\");\n        if (this.m_decodedTileEmitter) {\n            this.m_decodedTileEmitter.processPolygonFeature(layer, extents, geometry, context, techniques, featureId);\n        }\n        if (this.m_infoTileEmitter) {\n            this.m_infoTileEmitter.processPolygonFeature(layer, extents, geometry, context, techniques, featureId);\n        }\n    }\n    /**\n     * Estimate the number of screen pixels a tile will cover. The actual number of pixels will be\n     * influenced by tilt and rotation, so estimated the number here should be an upper bound.\n     *\n     * @returns {number} Estimated number of screen pixels.\n     */\n    estimatedTileSizeOnScreen() {\n        const tileSizeOnScreen = 256 * Math.pow(2, -this.m_storageLevelOffset);\n        return tileSizeOnScreen;\n    }\n    getZoomLevel(storageLevel) {\n        return Math.max(0, storageLevel - (this.m_storageLevelOffset || 0));\n    }\n    applyKindFilter(techniques, defaultKind) {\n        if (this.m_dataFilter !== undefined && this.m_dataFilter.hasKindFilter) {\n            techniques = techniques.filter(technique => {\n                return technique.kind === undefined\n                    ? this.m_dataFilter.wantsKind(defaultKind)\n                    : this.m_dataFilter.wantsKind(technique.kind);\n            });\n        }\n        return techniques;\n    }\n}\nexports.OmvDecoder = OmvDecoder;\n(function (OmvDecoder) {\n    class DecodeInfo {\n        /**\n         * Constructs a new [[DecodeInfo]].\n         *\n         * @param adapterId The id of the [[OmvDataAdapter]] used for decoding.\n         * @param targetProjection The [[Projection]]\n         * @param tileKey The [[TileKey]] of the Tile to decode.\n         * @param tileSizeOnScreen The estimated size of the Tile in pixels.\n         */\n        constructor(adapterId, targetProjection, tileKey, tileSizeOnScreen) {\n            this.adapterId = adapterId;\n            this.targetProjection = targetProjection;\n            this.tileKey = tileKey;\n            this.tileSizeOnScreen = tileSizeOnScreen;\n            this.projectedBoundingBox = new harp_geoutils_1.OrientedBox3();\n            /**\n             * The tile bounds in the OMV tile space [[webMercatorTilingScheme]].\n             */\n            this.tileBounds = new THREE.Box3();\n            /**\n             * The tile size in the OMV tile space [[webMercatorTilingScheme]].\n             */\n            this.tileSize = new THREE.Vector3();\n            /**\n             * The center of the Tile in the target [[Projection]] space.\n             * Geometries generated by decoding the OMV tile must be relative\n             * to this position.\n             */\n            this.center = new THREE.Vector3();\n            /**\n             * The tile bounds in the world space of the\n             * target projection [[DecodeInfo.targetProjection]].\n             *\n             * @deprecated\n             */\n            this.projectedTileBounds = new THREE.Box3();\n            this.geoBox = this.tilingScheme.getGeoBox(tileKey);\n            this.targetProjection.projectBox(this.geoBox, this.projectedTileBounds);\n            this.targetProjection.projectBox(this.geoBox, this.projectedBoundingBox);\n            this.projectedBoundingBox.getCenter(this.center);\n            this.tilingScheme.getWorldBox(tileKey, this.tileBounds);\n            this.tileBounds.getSize(this.tileSize);\n        }\n        /**\n         * The [[TilingScheme]] of the OMV data, currenly it is defined\n         * to be [[webMercatorTilingScheme]].\n         */\n        get tilingScheme() {\n            return harp_geoutils_1.webMercatorTilingScheme;\n        }\n        /**\n         * The [[Projection]] of OMV tiled data, currenly it is defined\n         * to be [[webMercatorProjection]].\n         */\n        get sourceProjection() {\n            return this.tilingScheme.projection;\n        }\n    }\n    OmvDecoder.DecodeInfo = DecodeInfo;\n})(OmvDecoder = exports.OmvDecoder || (exports.OmvDecoder = {}));\nclass OmvTileDecoder extends index_worker_1.ThemedTileDecoder {\n    constructor() {\n        super(...arguments);\n        this.m_showMissingTechniques = false;\n        this.m_gatherFeatureAttributes = false;\n        this.m_createTileInfo = false;\n        this.m_gatherRoadSegments = false;\n        this.m_skipShortLabels = true;\n        this.m_enableElevationOverlay = false;\n    }\n    /** @override */\n    connect() {\n        return Promise.resolve();\n    }\n    /** @override */\n    decodeThemedTile(data, tileKey, styleSetEvaluator, projection) {\n        const startTime = harp_utils_1.PerformanceTimer.now();\n        const decoder = new OmvDecoder(projection, styleSetEvaluator, this.m_showMissingTechniques, this.m_featureFilter, this.m_featureModifier, this.m_gatherFeatureAttributes, this.m_createTileInfo, this.m_gatherRoadSegments, this.m_skipShortLabels, this.m_storageLevelOffset, this.m_enableElevationOverlay, this.languages);\n        const decodedTile = decoder.getDecodedTile(tileKey, data);\n        decodedTile.decodeTime = harp_utils_1.PerformanceTimer.now() - startTime;\n        return Promise.resolve(decodedTile);\n    }\n    /** @override */\n    getTileInfo(data, tileKey, projection) {\n        const startTime = harp_utils_1.PerformanceTimer.now();\n        const styleSetEvaluator = this.m_styleSetEvaluator;\n        if (styleSetEvaluator === undefined) {\n            return Promise.reject(new Error(\"no theme loaded\"));\n        }\n        const decoder = new OmvDecoder(projection, styleSetEvaluator, this.m_showMissingTechniques, this.m_featureFilter, this.m_featureModifier, this.m_gatherFeatureAttributes, this.m_createTileInfo, this.m_gatherRoadSegments, this.m_skipShortLabels, this.m_storageLevelOffset, this.m_enableElevationOverlay, this.languages);\n        const tileInfo = decoder.getTileInfo(tileKey, data);\n        tileInfo.setupTime = harp_utils_1.PerformanceTimer.now() - startTime;\n        return Promise.resolve(tileInfo);\n    }\n    /** @override */\n    configure(styleSet, definitions, languages, options) {\n        super.configure(styleSet, definitions, languages, options);\n        if (options) {\n            const omvOptions = options;\n            if (omvOptions.showMissingTechniques !== undefined) {\n                this.m_showMissingTechniques = omvOptions.showMissingTechniques === true;\n            }\n            if (omvOptions && omvOptions.filterDescription !== undefined) {\n                if (omvOptions.filterDescription !== null) {\n                    // create new filter/modifier from description\n                    this.m_featureFilter = new OmvDataFilter_1.OmvGenericFeatureFilter(omvOptions.filterDescription);\n                    this.m_featureModifier = this.createFeatureModifier(omvOptions.filterDescription, omvOptions.featureModifierId);\n                }\n                else {\n                    // null is the signal to clear the filter/modifier\n                    this.m_featureFilter = undefined;\n                    this.m_featureModifier = undefined;\n                }\n            }\n            if (omvOptions.gatherFeatureAttributes !== undefined) {\n                this.m_gatherFeatureAttributes = omvOptions.gatherFeatureAttributes === true;\n            }\n            if (omvOptions.createTileInfo !== undefined) {\n                this.m_createTileInfo = omvOptions.createTileInfo === true;\n            }\n            if (omvOptions.gatherRoadSegments !== undefined) {\n                this.m_gatherRoadSegments = omvOptions.gatherRoadSegments === true;\n            }\n            if (omvOptions.skipShortLabels !== undefined) {\n                this.m_skipShortLabels = omvOptions.skipShortLabels;\n            }\n            if (omvOptions.enableElevationOverlay !== undefined) {\n                this.m_enableElevationOverlay = omvOptions.enableElevationOverlay;\n            }\n        }\n        if (languages !== undefined) {\n            this.languages = languages;\n        }\n    }\n    createFeatureModifier(filterDescription, featureModifierId) {\n        if (featureModifierId === OmvDecoderDefs_1.FeatureModifierId.tomTom) {\n            return new OmvTomTomFeatureModifier_1.OmvTomTomFeatureModifier(filterDescription);\n        }\n        else {\n            return new OmvDataFilter_1.OmvGenericFeatureModifier(filterDescription);\n        }\n    }\n}\nexports.OmvTileDecoder = OmvTileDecoder;\n/**\n * OMV tile decoder service.\n */\nclass OmvTileDecoderService {\n    /**\n     * Register[[OmvTileDecoder]] service class in [[WorkerServiceManager]].\n     *\n     * Has to be called during initialization of decoder bundle.\n     */\n    static start() {\n        index_worker_1.WorkerServiceManager.getInstance().register({\n            serviceType: OmvDecoderDefs_1.OMV_TILE_DECODER_SERVICE_TYPE,\n            factory: (serviceId) => index_worker_1.TileDecoderService.start(serviceId, new OmvTileDecoder())\n        });\n    }\n}\nexports.OmvTileDecoderService = OmvTileDecoderService;\n/**\n * Starts an OMV decoder service.\n *\n * @deprecated Please use [[OmvTileDecoderService.start]].\n */\nclass OmvWorkerClient {\n    // TODO(HARP-3651): remove this class when clients are ready\n    constructor() {\n        logger.warn(\"OmvWorkerClient class is deprecated, please use OmvTileDecoderService.start\");\n        OmvTileDecoderService.start();\n    }\n}\nexports.default = OmvWorkerClient;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/OmvDecoder.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/OmvDecoderDefs.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/OmvDecoderDefs.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Feature Modifier ids to choose which OmvFeatureModifer should be used in OmvDecoder.\n */\nvar FeatureModifierId;\n(function (FeatureModifierId) {\n    /**\n     * Identifier to use the OmvTomTomFeatureModifier in the OmvDecoder.\n     */\n    FeatureModifierId[FeatureModifierId[\"tomTom\"] = 0] = \"tomTom\";\n})(FeatureModifierId = exports.FeatureModifierId || (exports.FeatureModifierId = {}));\n/**\n * Adding the match condition type and the matching function to the namespace of `OmvFilterString`.\n */\nvar OmvFilterString;\n(function (OmvFilterString) {\n    /**\n     * Match condition.\n     */\n    let StringMatch;\n    (function (StringMatch) {\n        /** Matches any. */\n        StringMatch[StringMatch[\"Any\"] = 0] = \"Any\";\n        /** Exact match. */\n        StringMatch[StringMatch[\"Match\"] = 1] = \"Match\";\n        /** Matches if a test string starts with a filter string. */\n        StringMatch[StringMatch[\"StartsWith\"] = 2] = \"StartsWith\";\n        /** Matches if a test string contains a filter string. */\n        StringMatch[StringMatch[\"Contains\"] = 3] = \"Contains\";\n        /** Matches if a test string ends with a filter string. */\n        StringMatch[StringMatch[\"EndsWith\"] = 4] = \"EndsWith\";\n    })(StringMatch = OmvFilterString.StringMatch || (OmvFilterString.StringMatch = {}));\n    /**\n     * Check for a string against a filter.\n     *\n     * @param str The string to check against a filter.\n     * @param filterString The filter containing the match condition.\n     * @returns `true` if the match condition is satisfied.\n     */\n    function matchString(str, filterString) {\n        switch (filterString.match) {\n            case OmvFilterString.StringMatch.Any:\n                return true;\n            case OmvFilterString.StringMatch.Match:\n                return str === filterString.value;\n            case OmvFilterString.StringMatch.StartsWith:\n                return filterString.value.startsWith(str);\n            case OmvFilterString.StringMatch.EndsWith:\n                return filterString.value.endsWith(str);\n            default:\n                return str.indexOf(filterString.value) >= 0;\n        }\n    }\n    OmvFilterString.matchString = matchString;\n})(OmvFilterString = exports.OmvFilterString || (exports.OmvFilterString = {}));\nvar OmvGeometryType;\n(function (OmvGeometryType) {\n    OmvGeometryType[OmvGeometryType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    OmvGeometryType[OmvGeometryType[\"POINT\"] = 1] = \"POINT\";\n    OmvGeometryType[OmvGeometryType[\"LINESTRING\"] = 2] = \"LINESTRING\";\n    OmvGeometryType[OmvGeometryType[\"POLYGON\"] = 3] = \"POLYGON\";\n})(OmvGeometryType = exports.OmvGeometryType || (exports.OmvGeometryType = {}));\n/**\n * Default OMV tile decoder service type.\n *\n * Used for requesting decoder services using [[WorkerServiceManager]].\n */\nexports.OMV_TILE_DECODER_SERVICE_TYPE = \"omv-tile-decoder\";\n/**\n * Default OMV tiler service type.\n *\n * Used for requesting tiler services using [[WorkerServiceManager]].\n */\nexports.OMV_TILER_SERVICE_TYPE = \"omv-tiler\";\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/OmvDecoderDefs.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/OmvTileInfoEmitter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/OmvTileInfoEmitter.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_datasource_protocol_1 = __webpack_require__(/*! @here/harp-datasource-protocol */ \"./node_modules/@here/harp-datasource-protocol/index.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst OmvDecoder_1 = __webpack_require__(/*! ./OmvDecoder */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDecoder.js\");\nconst OmvUtils_1 = __webpack_require__(/*! ./OmvUtils */ \"./node_modules/@here/harp-omv-datasource/lib/OmvUtils.js\");\nclass OmvTileInfoEmitter {\n    /**\n     * Create OmvTileInfoEmitter object\n     *\n     * @param m_decodeInfo\n     * @param m_styleSetEvaluator\n     * @param m_storeExtendedTags\n     * @param m_gatherRoadSegments\n     */\n    constructor(m_decodeInfo, \n    // tslint:disable-next-line:no-unused-variable\n    m_styleSetEvaluator, m_storeExtendedTags, m_gatherRoadSegments, m_languages) {\n        this.m_decodeInfo = m_decodeInfo;\n        this.m_styleSetEvaluator = m_styleSetEvaluator;\n        this.m_storeExtendedTags = m_storeExtendedTags;\n        this.m_gatherRoadSegments = m_gatherRoadSegments;\n        this.m_languages = m_languages;\n        this.m_tileInfo = new harp_datasource_protocol_1.ExtendedTileInfo(m_decodeInfo.tileKey, this.m_storeExtendedTags);\n        this.m_tileInfoWriter = new harp_datasource_protocol_1.ExtendedTileInfoWriter(this.m_tileInfo, this.m_storeExtendedTags);\n    }\n    processPointFeature(layer, extents, geometry, context, techniques, featureId) {\n        const tileInfoWriter = this.m_tileInfoWriter;\n        const tmpV = new THREE.Vector3();\n        for (const technique of techniques) {\n            if (technique === undefined) {\n                continue;\n            }\n            const infoTileTechniqueIndex = tileInfoWriter.addTechnique(technique);\n            const featureText = harp_datasource_protocol_1.ExtendedTileInfo.getFeatureText(context, technique, this.m_languages);\n            for (const pos of geometry) {\n                OmvUtils_1.webMercatorTile2TargetTile(extents, this.m_decodeInfo, pos, tmpV);\n                tileInfoWriter.addFeature(this.m_tileInfo.pointGroup, context.env, featureId, featureText, infoTileTechniqueIndex, harp_datasource_protocol_1.FeatureGroupType.Point);\n                tileInfoWriter.addFeaturePoint(this.m_tileInfo.pointGroup, tmpV.x, tmpV.y);\n            }\n        }\n    }\n    processLineFeature(layer, extents, geometry, context, techniques, featureId) {\n        const tileInfoWriter = this.m_tileInfoWriter;\n        const env = context.env;\n        const tmpV = new THREE.Vector3();\n        const lines = [];\n        for (const polyline of geometry) {\n            const line = [];\n            for (const pos of polyline.positions) {\n                OmvUtils_1.webMercatorTile2TargetTile(extents, this.m_decodeInfo, pos, tmpV);\n                line.push(tmpV.x, tmpV.y);\n            }\n            lines.push(line);\n        }\n        for (const technique of techniques) {\n            if (technique === undefined) {\n                continue;\n            }\n            const infoTileTechniqueIndex = tileInfoWriter.addTechnique(technique);\n            const featureText = harp_datasource_protocol_1.ExtendedTileInfo.getFeatureText(context, technique, this.m_languages);\n            for (const aLine of lines) {\n                tileInfoWriter.addFeature(this.m_tileInfo.lineGroup, env, featureId, featureText, infoTileTechniqueIndex, harp_datasource_protocol_1.FeatureGroupType.Line);\n                tileInfoWriter.addFeaturePoints(this.m_tileInfo.lineGroup, aLine);\n            }\n        }\n        if (this.m_gatherRoadSegments) {\n            const segmentId = env.lookup(\"segmentId\");\n            if (segmentId !== undefined) {\n                const startOffset = env.lookup(\"startOffset\");\n                const endOffset = env.lookup(\"endOffset\");\n                tileInfoWriter.addRoadSegments(this.m_tileInfo.lineGroup, segmentId, startOffset !== undefined ? startOffset : 0, endOffset !== undefined ? endOffset : 1);\n            }\n        }\n    }\n    processPolygonFeature(layer, extents, geometry, context, techniques, featureId) {\n        if (techniques.length === 0) {\n            throw new Error(\"OmvTileInfoEmitter#processPolygonFeature: Internal error - No technique index\");\n        }\n        const tileInfoWriter = this.m_tileInfoWriter;\n        const tmpV = new THREE.Vector3();\n        const polygons = [];\n        for (const polygon of geometry) {\n            const rings = [];\n            for (const outline of polygon.rings) {\n                const contour = [];\n                for (const pos of outline) {\n                    OmvUtils_1.webMercatorTile2TargetTile(extents, this.m_decodeInfo, pos, tmpV);\n                    contour.push(tmpV.x, tmpV.y, tmpV.z);\n                }\n                rings.push(new OmvDecoder_1.Ring(extents, 3, contour));\n            }\n            polygons.push(rings);\n        }\n        for (const technique of techniques) {\n            if (technique === undefined) {\n                continue;\n            }\n            const infoTileTechniqueIndex = tileInfoWriter.addTechnique(technique);\n            const featureText = harp_datasource_protocol_1.ExtendedTileInfo.getFeatureText(context, technique, this.m_languages);\n            tileInfoWriter.addFeature(this.m_tileInfo.polygonGroup, context.env, featureId, featureText, infoTileTechniqueIndex, harp_datasource_protocol_1.FeatureGroupType.Polygon);\n        }\n        for (const rings of polygons) {\n            // rings are shared between techniques\n            if (rings.length === 0) {\n                continue;\n            }\n            const outerRingWinding = rings[0].winding;\n            for (const aRing of rings) {\n                tileInfoWriter.addRingPoints(this.m_tileInfo.polygonGroup, aRing.contour, aRing.winding === outerRingWinding);\n            }\n        }\n    }\n    getTileInfo() {\n        this.m_tileInfoWriter.finish();\n        return this.m_tileInfo;\n    }\n}\nexports.OmvTileInfoEmitter = OmvTileInfoEmitter;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/OmvTileInfoEmitter.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/OmvTiler.js":
/*!****************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/OmvTiler.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_worker_1 = __webpack_require__(/*! @here/harp-mapview-decoder/index-worker */ \"./node_modules/@here/harp-mapview-decoder/index-worker.js\");\nconst OmvDecoderDefs_1 = __webpack_require__(/*! ./OmvDecoderDefs */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDecoderDefs.js\");\n/**\n * OMV tile decoder service.\n */\nclass OmvTilerService {\n    /**\n     * Register[[OmvTiler]] service class in [[WorkerServiceManager]].\n     *\n     * Has to be called during initialization of decoder bundle.\n     */\n    static start() {\n        index_worker_1.WorkerServiceManager.getInstance().register({\n            serviceType: OmvDecoderDefs_1.OMV_TILER_SERVICE_TYPE,\n            factory: (serviceId) => index_worker_1.TilerService.start(serviceId)\n        });\n    }\n}\nexports.OmvTilerService = OmvTilerService;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/OmvTiler.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/OmvTomTomFeatureModifier.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/OmvTomTomFeatureModifier.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst harp_utils_1 = __webpack_require__(/*! @here/harp-utils */ \"./node_modules/@here/harp-utils/index.web.js\");\nconst OmvDataFilter_1 = __webpack_require__(/*! ./OmvDataFilter */ \"./node_modules/@here/harp-omv-datasource/lib/OmvDataFilter.js\");\nconst logger = harp_utils_1.LoggerManager.instance.create(\"OmvTomTomFeatureModifier\");\nconst DEFAULT_BUILDING_COLOR = \"#AAAAAA\";\nconst DEFAULT_DO_EXTRUDE_BUILDINGS = \"true\";\nconst DEFAULT_BUILDING_MIN_HEIGHT = \"2\";\nconst DEFAULT_BUILDING_HEIGHT = \"20\";\n/**\n * Modifies the MapEnv of the TomTom Vector Tiles to be similar to the OMV format, so that the same\n * theme files can be used.\n */\nclass OmvTomTomFeatureModifier extends OmvDataFilter_1.OmvGenericFeatureModifier {\n    constructor(description) {\n        super(description);\n    }\n    /** @override */\n    doProcessFeature(itemsToProcess, itemsToIgnore, layer, env, defaultResult) {\n        this.rewriteEnvironment(layer, env);\n        return super.doProcessFeature(itemsToProcess, itemsToIgnore, layer, env, defaultResult);\n    }\n    /**\n     * Rewrites the Environment to match the environment naming used in OMV.\n     *\n     * Does not cover roadlabels, as the roadlabels in the Tomtom format are delivered in a\n     * different format combined in the environment with the road line geometry, which is\n     * represented as two separate environment in the default format.\n     *\n     * @param layer\n     * @param env\n     */\n    rewriteEnvironment(layer, env) {\n        // Rewriting landuse layers\n        if (this.isWood(layer)) {\n            this.updateEnvironment(env, \"landuse\", \"wood\");\n        }\n        else if (this.isHospital(layer)) {\n            this.updateEnvironment(env, \"landuse\", \"hospital\");\n        }\n        else if (this.isCemetery(layer)) {\n            this.updateEnvironment(env, \"landuse\", \"cemetery\");\n        }\n        else if (this.isIndustrial(layer)) {\n            this.updateEnvironment(env, \"landuse\", \"industrial\");\n        }\n        else if (this.isPark(layer)) {\n            this.updateEnvironment(env, \"landuse\", \"park\");\n        }\n        else if (this.isBuiltup(layer)) {\n            this.updateEnvironment(env, \"landuse\", \"builtup\");\n            // Rewriting the water layer\n        }\n        else if (this.isWater(layer)) {\n            this.updateEnvironment(env, \"water\");\n            // Rewriting the road label layer\n        }\n        else if (this.isRoadLabel(layer)) {\n            this.updateEnvironment(env, \"road_label\");\n            // Rewriting road layers with category classes\n        }\n        else if (this.isRoadPath(layer)) {\n            this.updateEnvironment(env, \"road\", \"path\");\n        }\n        else if (this.isRoadStreet(layer)) {\n            this.updateEnvironment(env, \"road\", \"street\");\n        }\n        else if (this.isRoadPrimary(layer)) {\n            this.updateEnvironment(env, \"road\", \"primary\");\n        }\n        else if (this.isRoadSecondary(layer)) {\n            this.updateEnvironment(env, \"road\", \"secondary\");\n        }\n        else if (this.isRailway(layer)) {\n            this.updateEnvironment(env, \"road\", \"major_rail\");\n        }\n        else if (this.isFerry(layer)) {\n            this.updateEnvironment(env, \"road\", \"ferry\");\n            // Rewriting aeroway layer\n        }\n        else if (this.isAeroway(layer)) {\n            this.updateEnvironment(env, \"aeroway\");\n            // Rewriting border layer\n        }\n        else if (this.isBorder(layer)) {\n            this.updateEnvironment(env, \"admin\");\n            // Rewriting label layers\n        }\n        else if (this.isCountryLabel(layer)) {\n            this.updateEnvironment(env, \"country_label\");\n        }\n        else if (this.isCountyLabel(layer)) {\n            this.updateEnvironment(env, \"county_label\");\n        }\n        else if (this.isRegionLabel(layer)) {\n            this.updateEnvironment(env, \"region_label\");\n        }\n        else if (this.isStateLabel(layer)) {\n            this.updateEnvironment(env, \"state_label\");\n        }\n        else if (this.isPlaceLabel(layer)) {\n            this.updateEnvironment(env, \"place_label\");\n        }\n        else if (this.isWaterLabel(layer)) {\n            this.updateEnvironment(env, \"water_label\");\n        }\n        else if (this.isMarineLabel(layer)) {\n            this.updateEnvironment(env, \"marine_label\");\n        }\n        else if (this.isPoiLabel(layer)) {\n            this.updateEnvironment(env, \"poi_label\");\n            // Rewriting building layer\n        }\n        else if (this.isBuilding(layer)) {\n            this.updateEnvironment(env, \"building\");\n            env.entries.color = DEFAULT_BUILDING_COLOR;\n            env.entries.extrude = DEFAULT_DO_EXTRUDE_BUILDINGS;\n            env.entries.min_height = DEFAULT_BUILDING_MIN_HEIGHT;\n            env.entries.height = DEFAULT_BUILDING_HEIGHT;\n        }\n        else {\n            logger.info(`Not yet rewritten layer: ##${env.entries.$layer}## `);\n        }\n        // Add tunnel structure if its a tunnel\n        if (this.isTunnel(layer)) {\n            env.entries.structure = \"tunnel\";\n        }\n        //Add bridge structure if its a bridge\n        if (this.isBridge(layer)) {\n            env.entries.structure = \"bridge\";\n        }\n    }\n    updateEnvironment(env, layer, newClass, structure) {\n        env.entries.$layer = layer;\n        if (newClass !== undefined) {\n            env.entries.class = newClass;\n        }\n        if (structure !== undefined) {\n            env.entries.structure = structure;\n        }\n    }\n    isWood(layer) {\n        return layer === \"Woodland\" || layer === \"Moor or heathland\";\n    }\n    isHospital(layer) {\n        return layer === \"Hospital\";\n    }\n    isCemetery(layer) {\n        return layer === \"Cemetery\";\n    }\n    isIndustrial(layer) {\n        return layer.indexOf(\"Industrial\") >= 0 || layer === \"Airport\";\n    }\n    isPark(layer) {\n        return (layer === \"Park\" ||\n            layer === \"City park\" ||\n            layer === \"National park\" ||\n            layer === \"Regional park\" ||\n            layer.indexOf(\"grass\") >= 0 ||\n            layer.indexOf(\"greens\") >= 0);\n    }\n    isBuiltup(layer) {\n        return (layer === \"Built-up area\" ||\n            layer === \"Town paved area\" ||\n            layer === \"Shopping\" ||\n            layer === \"University\" ||\n            layer === \"Stadium\" ||\n            layer.indexOf(\"ground\") > 0);\n    }\n    isWater(layer) {\n        return (layer === \"Other water\" ||\n            layer === \"Ocean or sea\" ||\n            layer === \"Ocean\" ||\n            layer === \"Lake\" ||\n            layer === \"Sea\" ||\n            layer === \"Town swimming pool\" ||\n            layer === \"River\");\n    }\n    isRoadLabel(layer) {\n        return layer.indexOf(\"road label\") >= 0;\n    }\n    isRoadPath(layer) {\n        return (layer.indexOf(\"path\") > 0 ||\n            layer === \"Parking road\" ||\n            layer === \"Town walkway\" ||\n            layer === \"Pedestrian road\" ||\n            layer === \"Walkway road\" ||\n            layer === \"Town carriageway divider\" ||\n            layer === \"Runway\" ||\n            layer === \"Non public road\");\n    }\n    isRoadStreet(layer) {\n        return (layer.indexOf(\"Minor local road\") >= 0 ||\n            layer.indexOf(\"minor local road\") >= 0 ||\n            layer.indexOf(\"Toll local road\") >= 0 ||\n            layer.indexOf(\"Local road\") >= 0);\n    }\n    isRoadPrimary(layer) {\n        return (layer.indexOf(\"Major local road\") >= 0 ||\n            layer.indexOf(\"Major road\") >= 0 ||\n            layer.indexOf(\"major road\") >= 0 ||\n            layer.indexOf(\"Motorway\") >= 0 ||\n            layer.indexOf(\"motorway\") >= 0 ||\n            layer.indexOf(\"International road\") >= 0 ||\n            layer.indexOf(\"international road\") >= 0);\n    }\n    isRoadSecondary(layer) {\n        return (layer.indexOf(\"connecting road\") >= 0 ||\n            layer.indexOf(\"Connecting road\") >= 0 ||\n            layer.indexOf(\"secondary road\") >= 0 ||\n            layer.indexOf(\"Secondary road\") >= 0);\n    }\n    isRailway(layer) {\n        return layer === \"Railway\";\n    }\n    isFerry(layer) {\n        return layer === \"Ferry road\";\n    }\n    isBorder(layer) {\n        return layer.indexOf(\"border\") > 0;\n    }\n    isCountryLabel(layer) {\n        return layer === \"Country name\" || layer === \"Country label\";\n    }\n    isStateLabel(layer) {\n        return layer === \"City\" || layer.indexOf(\"city\") > 0;\n    }\n    isRegionLabel(layer) {\n        return layer === \"Town\";\n    }\n    isCountyLabel(layer) {\n        return layer === \"Village\";\n    }\n    isPlaceLabel(layer) {\n        return (layer === \"Park\" ||\n            layer === \"Railway station\" ||\n            layer === \"Airport POI\" ||\n            layer === \"Town greens\");\n    }\n    isWaterLabel(layer) {\n        return (layer === \"Ocean name\" || layer === \"River label\" || layer.indexOf(\"water label\") > 0);\n    }\n    isMarineLabel(layer) {\n        return layer.indexOf(\"water label\") > 0;\n    }\n    isPoiLabel(layer) {\n        return (layer === \"National park name\" ||\n            layer === \"Landmark label\" ||\n            layer.indexOf(\"label\") >= 0);\n    }\n    isAeroway(layer) {\n        return layer === \"Airport\";\n    }\n    isBuilding(layer) {\n        return layer.indexOf(\"building\") >= 0;\n    }\n    isTunnel(layer) {\n        return layer.indexOf(\"tunnel\") >= 0;\n    }\n    isBridge(layer) {\n        return layer.indexOf(\"bridge\") >= 0;\n    }\n}\nexports.OmvTomTomFeatureModifier = OmvTomTomFeatureModifier;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/OmvTomTomFeatureModifier.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/OmvUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/OmvUtils.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\nconst THREE = __webpack_require__(/*! three */ \"three\");\nconst VTJsonDataAdapter_1 = __webpack_require__(/*! ./VTJsonDataAdapter */ \"./node_modules/@here/harp-omv-datasource/lib/VTJsonDataAdapter.js\");\n/**\n * @hidden\n */\nfunction isArrayBufferLike(data) {\n    if (typeof SharedArrayBuffer !== \"undefined\") {\n        return data instanceof ArrayBuffer || data instanceof SharedArrayBuffer;\n    }\n    else {\n        return data instanceof ArrayBuffer;\n    }\n}\nexports.isArrayBufferLike = isArrayBufferLike;\n/**\n * @hidden\n */\nfunction lat2tile(lat, zoom, func = Math.floor) {\n    return func(((1 -\n        Math.log(Math.tan((lat * Math.PI) / 180) + 1 / Math.cos((lat * Math.PI) / 180)) /\n            Math.PI) /\n        2) *\n        Math.pow(2, zoom));\n}\nexports.lat2tile = lat2tile;\n/**\n * @hidden\n */\nfunction tile2lat(y, level) {\n    const n = Math.PI - (2 * Math.PI * y) / Math.pow(2, level);\n    return (180 / Math.PI) * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n}\nexports.tile2lat = tile2lat;\nfunction createWorldTileTransformationCookie(extents, decodeInfo) {\n    const { north, west } = decodeInfo.geoBox;\n    const N = Math.log2(extents);\n    const scale = Math.pow(2, decodeInfo.tileKey.level + N);\n    return {\n        extents,\n        scale,\n        top: lat2tile(north, decodeInfo.tileKey.level + N, decodeInfo.adapterId === VTJsonDataAdapter_1.VTJsonDataAdapterId ? Math.round : Math.floor),\n        left: ((west + 180) / 360) * scale\n    };\n}\nexports.createWorldTileTransformationCookie = createWorldTileTransformationCookie;\n/**\n * @hidden\n */\nfunction tile2world(extents, decodeInfo, position, flipY = false, target) {\n    if (decodeInfo.worldTileProjectionCookie === undefined ||\n        decodeInfo.worldTileProjectionCookie.extents !== extents) {\n        decodeInfo.worldTileProjectionCookie = createWorldTileTransformationCookie(extents, decodeInfo);\n    }\n    const { top, left, scale } = decodeInfo.worldTileProjectionCookie;\n    const R = harp_geoutils_1.EarthConstants.EQUATORIAL_CIRCUMFERENCE;\n    return target.set(((left + position.x) / scale) * R, ((top + (flipY ? -position.y : position.y)) / scale) * R);\n}\nexports.tile2world = tile2world;\n/**\n * @hidden\n */\nfunction world2tile(extents, decodeInfo, position, flipY = false, target) {\n    if (decodeInfo.worldTileProjectionCookie === undefined ||\n        decodeInfo.worldTileProjectionCookie.extents !== extents) {\n        decodeInfo.worldTileProjectionCookie = createWorldTileTransformationCookie(extents, decodeInfo);\n    }\n    const { top, left, scale } = decodeInfo.worldTileProjectionCookie;\n    const R = harp_geoutils_1.EarthConstants.EQUATORIAL_CIRCUMFERENCE;\n    return target.set((position.x / R) * scale - left, (flipY ? -1 : 1) * ((position.y / R) * scale - top));\n}\nexports.world2tile = world2tile;\nconst tempWorldPos = new THREE.Vector2();\nfunction webMercatorTile2TargetWorld(extents, decodeInfo, position, target, flipY = false) {\n    const worldPos = tile2world(extents, decodeInfo, position, flipY, tempWorldPos);\n    target.set(worldPos.x, worldPos.y, 0);\n    decodeInfo.targetProjection.reprojectPoint(harp_geoutils_1.webMercatorProjection, target, target);\n}\nexports.webMercatorTile2TargetWorld = webMercatorTile2TargetWorld;\nfunction webMercatorTile2TargetTile(extents, decodeInfo, position, target, flipY = false) {\n    webMercatorTile2TargetWorld(extents, decodeInfo, position, target, flipY);\n    target.sub(decodeInfo.center);\n}\nexports.webMercatorTile2TargetTile = webMercatorTile2TargetTile;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/OmvUtils.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/StyleSetDataFilter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/StyleSetDataFilter.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An [[OmvFeatureFilter]] implementation that queries [[StyleSetEvaluator]]\n * if given layers/features should be processed.\n *\n * Used in [[OmvDecoder]] to skip processing of layers/features that doesn't\n * have associated rules in style.\n *\n * @see [[StyleSetEvaluator.wantsFeature]]\n * @see [[StyleSetEvaluator.wantsLayer]]\n */\nclass StyleSetDataFilter {\n    constructor(styleSetEvaluator) {\n        this.styleSetEvaluator = styleSetEvaluator;\n        this.hasKindFilter = false;\n    }\n    wantsLayer(layer, level) {\n        return this.styleSetEvaluator.wantsLayer(layer);\n    }\n    wantsPointFeature(layer) {\n        return this.styleSetEvaluator.wantsFeature(layer, \"point\");\n    }\n    wantsLineFeature(layer) {\n        return this.styleSetEvaluator.wantsFeature(layer, \"line\");\n    }\n    wantsPolygonFeature(layer) {\n        return this.styleSetEvaluator.wantsFeature(layer, \"polygon\");\n    }\n    wantsKind() {\n        return true;\n    }\n}\nexports.StyleSetDataFilter = StyleSetDataFilter;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/StyleSetDataFilter.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/VTJsonDataAdapter.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/VTJsonDataAdapter.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_decoder_1 = __webpack_require__(/*! @here/harp-datasource-protocol/index-decoder */ \"./node_modules/@here/harp-datasource-protocol/index-decoder.js\");\nconst harp_geoutils_1 = __webpack_require__(/*! @here/harp-geoutils */ \"./node_modules/@here/harp-geoutils/index.js\");\nconst three_1 = __webpack_require__(/*! three */ \"three\");\nconst OmvUtils_1 = __webpack_require__(/*! ./OmvUtils */ \"./node_modules/@here/harp-omv-datasource/lib/OmvUtils.js\");\nconst VT_JSON_EXTENTS = 4096;\nvar VTJsonGeometryType;\n(function (VTJsonGeometryType) {\n    VTJsonGeometryType[VTJsonGeometryType[\"Unknown\"] = 0] = \"Unknown\";\n    VTJsonGeometryType[VTJsonGeometryType[\"Point\"] = 1] = \"Point\";\n    VTJsonGeometryType[VTJsonGeometryType[\"LineString\"] = 2] = \"LineString\";\n    VTJsonGeometryType[VTJsonGeometryType[\"Polygon\"] = 3] = \"Polygon\";\n})(VTJsonGeometryType || (VTJsonGeometryType = {}));\n/**\n * [[OmvDataAdapter]] id for [[VTJsonDataAdapter]].\n */\nexports.VTJsonDataAdapterId = \"vt-json\";\n/**\n * The class [[VTJsonDataAdapter]] converts VT-json data to geometries for the given\n * [[IGeometryProcessor]].\n */\nclass VTJsonDataAdapter {\n    constructor(m_processor, m_dataFilter, m_logger) {\n        this.m_processor = m_processor;\n        this.m_dataFilter = m_dataFilter;\n        this.m_logger = m_logger;\n        this.id = exports.VTJsonDataAdapterId;\n    }\n    get dataFilter() {\n        return this.m_dataFilter;\n    }\n    set dataFilter(dataFilter) {\n        this.m_dataFilter = dataFilter;\n    }\n    canProcess(data) {\n        if (OmvUtils_1.isArrayBufferLike(data)) {\n            return false;\n        }\n        const tile = data;\n        if (tile.features === undefined ||\n            tile.source === undefined ||\n            tile.x === undefined ||\n            tile.y === undefined ||\n            tile.z === undefined) {\n            return false;\n        }\n        return true;\n    }\n    process(tile, tileKey, geoBox) {\n        for (const feature of tile.features) {\n            const env = new index_decoder_1.MapEnv(Object.assign({ $layer: tile.layer, $geometryType: this.convertGeometryType(feature.type), $level: tileKey.level, $zoom: Math.max(0, tileKey.level - (this.m_processor.storageLevelOffset || 0)), $id: feature.id }, feature.tags));\n            switch (feature.type) {\n                case VTJsonGeometryType.Point: {\n                    for (const pointGeometry of feature.geometry) {\n                        const x = pointGeometry[0];\n                        const y = pointGeometry[1];\n                        const position = new three_1.Vector2(x, y);\n                        this.m_processor.processPointFeature(tile.layer, VT_JSON_EXTENTS, [position], env, tileKey.level);\n                    }\n                    break;\n                }\n                case VTJsonGeometryType.LineString: {\n                    let untiledPositions;\n                    if (feature.originalGeometry.type === \"LineString\") {\n                        untiledPositions = [];\n                        for (const [x, y] of feature.originalGeometry.coordinates) {\n                            untiledPositions.push(new harp_geoutils_1.GeoCoordinates(y, x));\n                        }\n                    }\n                    else if (feature.originalGeometry.type === \"MultiLineString\") {\n                        untiledPositions = [];\n                        for (const lineGeometry of feature.originalGeometry\n                            .coordinates) {\n                            for (const [x, y] of lineGeometry) {\n                                untiledPositions.push(new harp_geoutils_1.GeoCoordinates(y, x));\n                            }\n                        }\n                    }\n                    for (const lineGeometry of feature.geometry) {\n                        const line = { positions: [], untiledPositions };\n                        for (const [x, y] of lineGeometry) {\n                            const position = new three_1.Vector2(x, y);\n                            line.positions.push(position);\n                        }\n                        this.m_processor.processLineFeature(tile.layer, VT_JSON_EXTENTS, [line], env, tileKey.level);\n                    }\n                    break;\n                }\n                case VTJsonGeometryType.Polygon: {\n                    const polygon = { rings: [] };\n                    for (const outline of feature.geometry) {\n                        const ring = [];\n                        for (const [currX, currY] of outline) {\n                            const position = new three_1.Vector2(currX, currY);\n                            ring.push(position);\n                        }\n                        polygon.rings.push(ring);\n                    }\n                    this.m_processor.processPolygonFeature(tile.layer, VT_JSON_EXTENTS, [polygon], env, tileKey.level);\n                    break;\n                }\n                case VTJsonGeometryType.Unknown: {\n                    break;\n                }\n            }\n        }\n    }\n    convertGeometryType(type) {\n        switch (type) {\n            case VTJsonGeometryType.Point:\n                return \"point\";\n            case VTJsonGeometryType.LineString:\n                return \"line\";\n            case VTJsonGeometryType.Polygon:\n                return \"polygon\";\n            default:\n                return \"unknown\";\n        }\n    }\n}\nexports.VTJsonDataAdapter = VTJsonDataAdapter;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/VTJsonDataAdapter.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/clipPolygon.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/clipPolygon.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = __webpack_require__(/*! three */ \"three\");\nconst tmpBA = new three_1.Vector2();\nconst tmpQP = new three_1.Vector2();\nconst tmpA = new three_1.Vector2();\nconst tmpB = new three_1.Vector2();\n/**\n * Clip the given polygon using the Sutherland-Hodgman algorithm.\n */\nfunction clipPolygon(polygon, clip) {\n    let outputList = polygon;\n    for (let e = 0; e < clip.length; ++e) {\n        const p = clip[e];\n        const q = clip[(e + 1) % clip.length];\n        const inputList = outputList;\n        outputList = [];\n        for (let i = 0; i < inputList.length; ++i) {\n            const currentPoint = inputList[i];\n            const prevPoint = inputList[(i + inputList.length - 1) % inputList.length];\n            if (inside(currentPoint, p, q)) {\n                if (!inside(prevPoint, p, q)) {\n                    outputList.push(computeIntersection(prevPoint, currentPoint, p, q));\n                }\n                outputList.push(currentPoint);\n            }\n            else if (inside(prevPoint, p, q)) {\n                outputList.push(computeIntersection(prevPoint, currentPoint, p, q));\n            }\n        }\n    }\n    return outputList;\n}\nexports.clipPolygon = clipPolygon;\nfunction computeIntersection(a, b, p, q, result = new three_1.Vector2()) {\n    tmpBA.subVectors(b, a);\n    tmpQP.subVectors(q, p);\n    const c1 = a.cross(tmpBA);\n    const c2 = p.cross(tmpQP);\n    const D = tmpBA.cross(tmpQP);\n    const x = (tmpBA.x * c2 - tmpQP.x * c1) / D;\n    const y = (tmpBA.y * c2 - tmpQP.y * c1) / D;\n    return result.set(x, y).round();\n}\nfunction inside(point, p, q) {\n    tmpA.subVectors(q, p);\n    tmpB.subVectors(point, p);\n    return tmpA.cross(tmpB) > 0;\n}\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/clipPolygon.js?");

/***/ }),

/***/ "./node_modules/@here/harp-omv-datasource/lib/proto/vector_tile.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@here/harp-omv-datasource/lib/proto/vector_tile.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n\nvar $protobuf = __webpack_require__(/*! protobufjs/minimal */ \"./node_modules/protobufjs/minimal.js\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.com = (function() {\n\n    /**\n     * Namespace com.\n     * @exports com\n     * @namespace\n     */\n    var com = {};\n\n    com.mapbox = (function() {\n\n        /**\n         * Namespace mapbox.\n         * @memberof com\n         * @namespace\n         */\n        var mapbox = {};\n\n        mapbox.pb = (function() {\n\n            /**\n             * Namespace pb.\n             * @memberof com.mapbox\n             * @namespace\n             */\n            var pb = {};\n\n            pb.Tile = (function() {\n\n                /**\n                 * Properties of a Tile.\n                 * @memberof com.mapbox.pb\n                 * @interface ITile\n                 * @property {Array.<com.mapbox.pb.Tile.ILayer>|null} [layers] Tile layers\n                 */\n\n                /**\n                 * Constructs a new Tile.\n                 * @memberof com.mapbox.pb\n                 * @classdesc Represents a Tile.\n                 * @implements ITile\n                 * @constructor\n                 * @param {com.mapbox.pb.ITile=} [properties] Properties to set\n                 */\n                function Tile(properties) {\n                    this.layers = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Tile layers.\n                 * @member {Array.<com.mapbox.pb.Tile.ILayer>} layers\n                 * @memberof com.mapbox.pb.Tile\n                 * @instance\n                 */\n                Tile.prototype.layers = $util.emptyArray;\n\n                /**\n                 * Decodes a Tile message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof com.mapbox.pb.Tile\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {com.mapbox.pb.Tile} Tile\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Tile.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapbox.pb.Tile();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 3:\n                            if (!(message.layers && message.layers.length))\n                                message.layers = [];\n                            message.layers.push($root.com.mapbox.pb.Tile.Layer.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Tile message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof com.mapbox.pb.Tile\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {com.mapbox.pb.Tile} Tile\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Tile.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Creates a Tile message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof com.mapbox.pb.Tile\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {com.mapbox.pb.Tile} Tile\n                 */\n                Tile.fromObject = function fromObject(object) {\n                    if (object instanceof $root.com.mapbox.pb.Tile)\n                        return object;\n                    var message = new $root.com.mapbox.pb.Tile();\n                    if (object.layers) {\n                        if (!Array.isArray(object.layers))\n                            throw TypeError(\".com.mapbox.pb.Tile.layers: array expected\");\n                        message.layers = [];\n                        for (var i = 0; i < object.layers.length; ++i) {\n                            if (typeof object.layers[i] !== \"object\")\n                                throw TypeError(\".com.mapbox.pb.Tile.layers: object expected\");\n                            message.layers[i] = $root.com.mapbox.pb.Tile.Layer.fromObject(object.layers[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Tile message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof com.mapbox.pb.Tile\n                 * @static\n                 * @param {com.mapbox.pb.Tile} message Tile\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Tile.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.layers = [];\n                    if (message.layers && message.layers.length) {\n                        object.layers = [];\n                        for (var j = 0; j < message.layers.length; ++j)\n                            object.layers[j] = $root.com.mapbox.pb.Tile.Layer.toObject(message.layers[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this Tile to JSON.\n                 * @function toJSON\n                 * @memberof com.mapbox.pb.Tile\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Tile.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * GeomType enum.\n                 * @name com.mapbox.pb.Tile.GeomType\n                 * @enum {string}\n                 * @property {number} UNKNOWN=0 UNKNOWN value\n                 * @property {number} POINT=1 POINT value\n                 * @property {number} LINESTRING=2 LINESTRING value\n                 * @property {number} POLYGON=3 POLYGON value\n                 */\n                Tile.GeomType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN\"] = 0;\n                    values[valuesById[1] = \"POINT\"] = 1;\n                    values[valuesById[2] = \"LINESTRING\"] = 2;\n                    values[valuesById[3] = \"POLYGON\"] = 3;\n                    return values;\n                })();\n\n                Tile.Value = (function() {\n\n                    /**\n                     * Properties of a Value.\n                     * @memberof com.mapbox.pb.Tile\n                     * @interface IValue\n                     * @property {string|null} [stringValue] Value stringValue\n                     * @property {number|null} [floatValue] Value floatValue\n                     * @property {number|null} [doubleValue] Value doubleValue\n                     * @property {number|Long|null} [intValue] Value intValue\n                     * @property {number|Long|null} [uintValue] Value uintValue\n                     * @property {number|Long|null} [sintValue] Value sintValue\n                     * @property {boolean|null} [boolValue] Value boolValue\n                     */\n\n                    /**\n                     * Constructs a new Value.\n                     * @memberof com.mapbox.pb.Tile\n                     * @classdesc Represents a Value.\n                     * @implements IValue\n                     * @constructor\n                     * @param {com.mapbox.pb.Tile.IValue=} [properties] Properties to set\n                     */\n                    function Value(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Value stringValue.\n                     * @member {string} stringValue\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @instance\n                     */\n                    Value.prototype.stringValue = \"\";\n\n                    /**\n                     * Value floatValue.\n                     * @member {number} floatValue\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @instance\n                     */\n                    Value.prototype.floatValue = 0;\n\n                    /**\n                     * Value doubleValue.\n                     * @member {number} doubleValue\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @instance\n                     */\n                    Value.prototype.doubleValue = 0;\n\n                    /**\n                     * Value intValue.\n                     * @member {number|Long} intValue\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @instance\n                     */\n                    Value.prototype.intValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                    /**\n                     * Value uintValue.\n                     * @member {number|Long} uintValue\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @instance\n                     */\n                    Value.prototype.uintValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n                    /**\n                     * Value sintValue.\n                     * @member {number|Long} sintValue\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @instance\n                     */\n                    Value.prototype.sintValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                    /**\n                     * Value boolValue.\n                     * @member {boolean} boolValue\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @instance\n                     */\n                    Value.prototype.boolValue = false;\n\n                    /**\n                     * Decodes a Value message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {com.mapbox.pb.Tile.Value} Value\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Value.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapbox.pb.Tile.Value();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.stringValue = reader.string();\n                                break;\n                            case 2:\n                                message.floatValue = reader.float();\n                                break;\n                            case 3:\n                                message.doubleValue = reader.double();\n                                break;\n                            case 4:\n                                message.intValue = reader.int64();\n                                break;\n                            case 5:\n                                message.uintValue = reader.uint64();\n                                break;\n                            case 6:\n                                message.sintValue = reader.sint64();\n                                break;\n                            case 7:\n                                message.boolValue = reader.bool();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Value message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {com.mapbox.pb.Tile.Value} Value\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Value.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Creates a Value message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {com.mapbox.pb.Tile.Value} Value\n                     */\n                    Value.fromObject = function fromObject(object) {\n                        if (object instanceof $root.com.mapbox.pb.Tile.Value)\n                            return object;\n                        var message = new $root.com.mapbox.pb.Tile.Value();\n                        if (object.stringValue != null)\n                            message.stringValue = String(object.stringValue);\n                        if (object.floatValue != null)\n                            message.floatValue = Number(object.floatValue);\n                        if (object.doubleValue != null)\n                            message.doubleValue = Number(object.doubleValue);\n                        if (object.intValue != null)\n                            if ($util.Long)\n                                (message.intValue = $util.Long.fromValue(object.intValue)).unsigned = false;\n                            else if (typeof object.intValue === \"string\")\n                                message.intValue = parseInt(object.intValue, 10);\n                            else if (typeof object.intValue === \"number\")\n                                message.intValue = object.intValue;\n                            else if (typeof object.intValue === \"object\")\n                                message.intValue = new $util.LongBits(object.intValue.low >>> 0, object.intValue.high >>> 0).toNumber();\n                        if (object.uintValue != null)\n                            if ($util.Long)\n                                (message.uintValue = $util.Long.fromValue(object.uintValue)).unsigned = true;\n                            else if (typeof object.uintValue === \"string\")\n                                message.uintValue = parseInt(object.uintValue, 10);\n                            else if (typeof object.uintValue === \"number\")\n                                message.uintValue = object.uintValue;\n                            else if (typeof object.uintValue === \"object\")\n                                message.uintValue = new $util.LongBits(object.uintValue.low >>> 0, object.uintValue.high >>> 0).toNumber(true);\n                        if (object.sintValue != null)\n                            if ($util.Long)\n                                (message.sintValue = $util.Long.fromValue(object.sintValue)).unsigned = false;\n                            else if (typeof object.sintValue === \"string\")\n                                message.sintValue = parseInt(object.sintValue, 10);\n                            else if (typeof object.sintValue === \"number\")\n                                message.sintValue = object.sintValue;\n                            else if (typeof object.sintValue === \"object\")\n                                message.sintValue = new $util.LongBits(object.sintValue.low >>> 0, object.sintValue.high >>> 0).toNumber();\n                        if (object.boolValue != null)\n                            message.boolValue = Boolean(object.boolValue);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Value message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @static\n                     * @param {com.mapbox.pb.Tile.Value} message Value\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Value.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.stringValue = \"\";\n                            object.floatValue = 0;\n                            object.doubleValue = 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.intValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.intValue = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, true);\n                                object.uintValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.uintValue = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.sintValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.sintValue = options.longs === String ? \"0\" : 0;\n                            object.boolValue = false;\n                        }\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\"))\n                            object.stringValue = message.stringValue;\n                        if (message.floatValue != null && message.hasOwnProperty(\"floatValue\"))\n                            object.floatValue = options.json && !isFinite(message.floatValue) ? String(message.floatValue) : message.floatValue;\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\"))\n                            object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\"))\n                            if (typeof message.intValue === \"number\")\n                                object.intValue = options.longs === String ? String(message.intValue) : message.intValue;\n                            else\n                                object.intValue = options.longs === String ? $util.Long.prototype.toString.call(message.intValue) : options.longs === Number ? new $util.LongBits(message.intValue.low >>> 0, message.intValue.high >>> 0).toNumber() : message.intValue;\n                        if (message.uintValue != null && message.hasOwnProperty(\"uintValue\"))\n                            if (typeof message.uintValue === \"number\")\n                                object.uintValue = options.longs === String ? String(message.uintValue) : message.uintValue;\n                            else\n                                object.uintValue = options.longs === String ? $util.Long.prototype.toString.call(message.uintValue) : options.longs === Number ? new $util.LongBits(message.uintValue.low >>> 0, message.uintValue.high >>> 0).toNumber(true) : message.uintValue;\n                        if (message.sintValue != null && message.hasOwnProperty(\"sintValue\"))\n                            if (typeof message.sintValue === \"number\")\n                                object.sintValue = options.longs === String ? String(message.sintValue) : message.sintValue;\n                            else\n                                object.sintValue = options.longs === String ? $util.Long.prototype.toString.call(message.sintValue) : options.longs === Number ? new $util.LongBits(message.sintValue.low >>> 0, message.sintValue.high >>> 0).toNumber() : message.sintValue;\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\"))\n                            object.boolValue = message.boolValue;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Value to JSON.\n                     * @function toJSON\n                     * @memberof com.mapbox.pb.Tile.Value\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Value.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Value;\n                })();\n\n                Tile.Feature = (function() {\n\n                    /**\n                     * Properties of a Feature.\n                     * @memberof com.mapbox.pb.Tile\n                     * @interface IFeature\n                     * @property {number|Long|null} [id] Feature id\n                     * @property {Array.<number>|null} [tags] Feature tags\n                     * @property {com.mapbox.pb.Tile.GeomType|null} [type] Feature type\n                     * @property {Array.<number>|null} [geometry] Feature geometry\n                     */\n\n                    /**\n                     * Constructs a new Feature.\n                     * @memberof com.mapbox.pb.Tile\n                     * @classdesc Represents a Feature.\n                     * @implements IFeature\n                     * @constructor\n                     * @param {com.mapbox.pb.Tile.IFeature=} [properties] Properties to set\n                     */\n                    function Feature(properties) {\n                        this.tags = [];\n                        this.geometry = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Feature id.\n                     * @member {number|Long} id\n                     * @memberof com.mapbox.pb.Tile.Feature\n                     * @instance\n                     */\n                    Feature.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n                    /**\n                     * Feature tags.\n                     * @member {Array.<number>} tags\n                     * @memberof com.mapbox.pb.Tile.Feature\n                     * @instance\n                     */\n                    Feature.prototype.tags = $util.emptyArray;\n\n                    /**\n                     * Feature type.\n                     * @member {com.mapbox.pb.Tile.GeomType} type\n                     * @memberof com.mapbox.pb.Tile.Feature\n                     * @instance\n                     */\n                    Feature.prototype.type = 0;\n\n                    /**\n                     * Feature geometry.\n                     * @member {Array.<number>} geometry\n                     * @memberof com.mapbox.pb.Tile.Feature\n                     * @instance\n                     */\n                    Feature.prototype.geometry = $util.emptyArray;\n\n                    /**\n                     * Decodes a Feature message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof com.mapbox.pb.Tile.Feature\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {com.mapbox.pb.Tile.Feature} Feature\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Feature.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapbox.pb.Tile.Feature();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.id = reader.uint64();\n                                break;\n                            case 2:\n                                if (!(message.tags && message.tags.length))\n                                    message.tags = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.tags.push(reader.uint32());\n                                } else\n                                    message.tags.push(reader.uint32());\n                                break;\n                            case 3:\n                                message.type = reader.int32();\n                                break;\n                            case 4:\n                                if (!(message.geometry && message.geometry.length))\n                                    message.geometry = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.geometry.push(reader.uint32());\n                                } else\n                                    message.geometry.push(reader.uint32());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Feature message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof com.mapbox.pb.Tile.Feature\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {com.mapbox.pb.Tile.Feature} Feature\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Feature.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Creates a Feature message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof com.mapbox.pb.Tile.Feature\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {com.mapbox.pb.Tile.Feature} Feature\n                     */\n                    Feature.fromObject = function fromObject(object) {\n                        if (object instanceof $root.com.mapbox.pb.Tile.Feature)\n                            return object;\n                        var message = new $root.com.mapbox.pb.Tile.Feature();\n                        if (object.id != null)\n                            if ($util.Long)\n                                (message.id = $util.Long.fromValue(object.id)).unsigned = true;\n                            else if (typeof object.id === \"string\")\n                                message.id = parseInt(object.id, 10);\n                            else if (typeof object.id === \"number\")\n                                message.id = object.id;\n                            else if (typeof object.id === \"object\")\n                                message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);\n                        if (object.tags) {\n                            if (!Array.isArray(object.tags))\n                                throw TypeError(\".com.mapbox.pb.Tile.Feature.tags: array expected\");\n                            message.tags = [];\n                            for (var i = 0; i < object.tags.length; ++i)\n                                message.tags[i] = object.tags[i] >>> 0;\n                        }\n                        switch (object.type) {\n                        case \"UNKNOWN\":\n                        case 0:\n                            message.type = 0;\n                            break;\n                        case \"POINT\":\n                        case 1:\n                            message.type = 1;\n                            break;\n                        case \"LINESTRING\":\n                        case 2:\n                            message.type = 2;\n                            break;\n                        case \"POLYGON\":\n                        case 3:\n                            message.type = 3;\n                            break;\n                        }\n                        if (object.geometry) {\n                            if (!Array.isArray(object.geometry))\n                                throw TypeError(\".com.mapbox.pb.Tile.Feature.geometry: array expected\");\n                            message.geometry = [];\n                            for (var i = 0; i < object.geometry.length; ++i)\n                                message.geometry[i] = object.geometry[i] >>> 0;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Feature message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof com.mapbox.pb.Tile.Feature\n                     * @static\n                     * @param {com.mapbox.pb.Tile.Feature} message Feature\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Feature.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.tags = [];\n                            object.geometry = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, true);\n                                object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.id = options.longs === String ? \"0\" : 0;\n                            object.type = options.enums === String ? \"UNKNOWN\" : 0;\n                        }\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            if (typeof message.id === \"number\")\n                                object.id = options.longs === String ? String(message.id) : message.id;\n                            else\n                                object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;\n                        if (message.tags && message.tags.length) {\n                            object.tags = [];\n                            for (var j = 0; j < message.tags.length; ++j)\n                                object.tags[j] = message.tags[j];\n                        }\n                        if (message.type != null && message.hasOwnProperty(\"type\"))\n                            object.type = options.enums === String ? $root.com.mapbox.pb.Tile.GeomType[message.type] : message.type;\n                        if (message.geometry && message.geometry.length) {\n                            object.geometry = [];\n                            for (var j = 0; j < message.geometry.length; ++j)\n                                object.geometry[j] = message.geometry[j];\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Feature to JSON.\n                     * @function toJSON\n                     * @memberof com.mapbox.pb.Tile.Feature\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Feature.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Feature;\n                })();\n\n                Tile.Layer = (function() {\n\n                    /**\n                     * Properties of a Layer.\n                     * @memberof com.mapbox.pb.Tile\n                     * @interface ILayer\n                     * @property {number} version Layer version\n                     * @property {string} name Layer name\n                     * @property {Array.<com.mapbox.pb.Tile.IFeature>|null} [features] Layer features\n                     * @property {Array.<string>|null} [keys] Layer keys\n                     * @property {Array.<com.mapbox.pb.Tile.IValue>|null} [values] Layer values\n                     * @property {number|null} [extent] Layer extent\n                     */\n\n                    /**\n                     * Constructs a new Layer.\n                     * @memberof com.mapbox.pb.Tile\n                     * @classdesc Represents a Layer.\n                     * @implements ILayer\n                     * @constructor\n                     * @param {com.mapbox.pb.Tile.ILayer=} [properties] Properties to set\n                     */\n                    function Layer(properties) {\n                        this.features = [];\n                        this.keys = [];\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Layer version.\n                     * @member {number} version\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @instance\n                     */\n                    Layer.prototype.version = 1;\n\n                    /**\n                     * Layer name.\n                     * @member {string} name\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @instance\n                     */\n                    Layer.prototype.name = \"\";\n\n                    /**\n                     * Layer features.\n                     * @member {Array.<com.mapbox.pb.Tile.IFeature>} features\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @instance\n                     */\n                    Layer.prototype.features = $util.emptyArray;\n\n                    /**\n                     * Layer keys.\n                     * @member {Array.<string>} keys\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @instance\n                     */\n                    Layer.prototype.keys = $util.emptyArray;\n\n                    /**\n                     * Layer values.\n                     * @member {Array.<com.mapbox.pb.Tile.IValue>} values\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @instance\n                     */\n                    Layer.prototype.values = $util.emptyArray;\n\n                    /**\n                     * Layer extent.\n                     * @member {number} extent\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @instance\n                     */\n                    Layer.prototype.extent = 4096;\n\n                    /**\n                     * Decodes a Layer message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {com.mapbox.pb.Tile.Layer} Layer\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Layer.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapbox.pb.Tile.Layer();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 15:\n                                message.version = reader.uint32();\n                                break;\n                            case 1:\n                                message.name = reader.string();\n                                break;\n                            case 2:\n                                if (!(message.features && message.features.length))\n                                    message.features = [];\n                                message.features.push($root.com.mapbox.pb.Tile.Feature.decode(reader, reader.uint32()));\n                                break;\n                            case 3:\n                                if (!(message.keys && message.keys.length))\n                                    message.keys = [];\n                                message.keys.push(reader.string());\n                                break;\n                            case 4:\n                                if (!(message.values && message.values.length))\n                                    message.values = [];\n                                message.values.push($root.com.mapbox.pb.Tile.Value.decode(reader, reader.uint32()));\n                                break;\n                            case 5:\n                                message.extent = reader.uint32();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        if (!message.hasOwnProperty(\"version\"))\n                            throw $util.ProtocolError(\"missing required 'version'\", { instance: message });\n                        if (!message.hasOwnProperty(\"name\"))\n                            throw $util.ProtocolError(\"missing required 'name'\", { instance: message });\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Layer message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {com.mapbox.pb.Tile.Layer} Layer\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Layer.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Creates a Layer message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {com.mapbox.pb.Tile.Layer} Layer\n                     */\n                    Layer.fromObject = function fromObject(object) {\n                        if (object instanceof $root.com.mapbox.pb.Tile.Layer)\n                            return object;\n                        var message = new $root.com.mapbox.pb.Tile.Layer();\n                        if (object.version != null)\n                            message.version = object.version >>> 0;\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.features) {\n                            if (!Array.isArray(object.features))\n                                throw TypeError(\".com.mapbox.pb.Tile.Layer.features: array expected\");\n                            message.features = [];\n                            for (var i = 0; i < object.features.length; ++i) {\n                                if (typeof object.features[i] !== \"object\")\n                                    throw TypeError(\".com.mapbox.pb.Tile.Layer.features: object expected\");\n                                message.features[i] = $root.com.mapbox.pb.Tile.Feature.fromObject(object.features[i]);\n                            }\n                        }\n                        if (object.keys) {\n                            if (!Array.isArray(object.keys))\n                                throw TypeError(\".com.mapbox.pb.Tile.Layer.keys: array expected\");\n                            message.keys = [];\n                            for (var i = 0; i < object.keys.length; ++i)\n                                message.keys[i] = String(object.keys[i]);\n                        }\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".com.mapbox.pb.Tile.Layer.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".com.mapbox.pb.Tile.Layer.values: object expected\");\n                                message.values[i] = $root.com.mapbox.pb.Tile.Value.fromObject(object.values[i]);\n                            }\n                        }\n                        if (object.extent != null)\n                            message.extent = object.extent >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Layer message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @static\n                     * @param {com.mapbox.pb.Tile.Layer} message Layer\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Layer.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.features = [];\n                            object.keys = [];\n                            object.values = [];\n                        }\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.extent = 4096;\n                            object.version = 1;\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.features && message.features.length) {\n                            object.features = [];\n                            for (var j = 0; j < message.features.length; ++j)\n                                object.features[j] = $root.com.mapbox.pb.Tile.Feature.toObject(message.features[j], options);\n                        }\n                        if (message.keys && message.keys.length) {\n                            object.keys = [];\n                            for (var j = 0; j < message.keys.length; ++j)\n                                object.keys[j] = message.keys[j];\n                        }\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.com.mapbox.pb.Tile.Value.toObject(message.values[j], options);\n                        }\n                        if (message.extent != null && message.hasOwnProperty(\"extent\"))\n                            object.extent = message.extent;\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            object.version = message.version;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Layer to JSON.\n                     * @function toJSON\n                     * @memberof com.mapbox.pb.Tile.Layer\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Layer.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Layer;\n                })();\n\n                return Tile;\n            })();\n\n            return pb;\n        })();\n\n        return mapbox;\n    })();\n\n    return com;\n})();\n\nmodule.exports = $root;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-omv-datasource/lib/proto/vector_tile.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/index-common.js":
/*!*******************************************************!*\
  !*** ./node_modules/@here/harp-utils/index-common.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./lib/GroupedPriorityList */ \"./node_modules/@here/harp-utils/lib/GroupedPriorityList.js\"));\n__export(__webpack_require__(/*! ./lib/Logger */ \"./node_modules/@here/harp-utils/lib/Logger/index.js\"));\n__export(__webpack_require__(/*! ./lib/Math2D */ \"./node_modules/@here/harp-utils/lib/Math2D.js\"));\n__export(__webpack_require__(/*! ./lib/MathUtils */ \"./node_modules/@here/harp-utils/lib/MathUtils.js\"));\n__export(__webpack_require__(/*! ./lib/Mixins */ \"./node_modules/@here/harp-utils/lib/Mixins.js\"));\n__export(__webpack_require__(/*! ./lib/assert */ \"./node_modules/@here/harp-utils/lib/assert.js\"));\n__export(__webpack_require__(/*! ./lib/ContextLogger */ \"./node_modules/@here/harp-utils/lib/ContextLogger.js\"));\n__export(__webpack_require__(/*! ./lib/PerformanceTimer */ \"./node_modules/@here/harp-utils/lib/PerformanceTimer.js\"));\n__export(__webpack_require__(/*! ./lib/ObjectUtils */ \"./node_modules/@here/harp-utils/lib/ObjectUtils.js\"));\n__export(__webpack_require__(/*! ./lib/OptionsUtils */ \"./node_modules/@here/harp-utils/lib/OptionsUtils.js\"));\n__export(__webpack_require__(/*! ./lib/UriResolver */ \"./node_modules/@here/harp-utils/lib/UriResolver.js\"));\n__export(__webpack_require__(/*! ./lib/UrlUtils */ \"./node_modules/@here/harp-utils/lib/UrlUtils.js\"));\n__export(__webpack_require__(/*! ./lib/Functions */ \"./node_modules/@here/harp-utils/lib/Functions.js\"));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/index-common.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/index.web.js":
/*!****************************************************!*\
  !*** ./node_modules/@here/harp-utils/index.web.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./index-common */ \"./node_modules/@here/harp-utils/index-common.js\"));\n__export(__webpack_require__(/*! ./lib/UrlPlatformUtils.web */ \"./node_modules/@here/harp-utils/lib/UrlPlatformUtils.web.js\"));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/index.web.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/ContextLogger.js":
/*!************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/ContextLogger.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Context-aware logger that decorates log message with stack-based prefix, emits `headerMessage`\n * before first actual log message.\n */\nclass ContextLogger {\n    /**\n     * Construct a context-aware logger that logs to `m_logger`.\n     */\n    constructor(m_logger, headerMessage) {\n        this.m_logger = m_logger;\n        this.headerMessage = headerMessage;\n        this.context = [];\n        this.m_headerLogged = false;\n        // They, are public member functions it's just tslint who doesn't understand this.\n        // tslint:disable:member-ordering\n        this.warn = this.createLogMethod(\"warn\");\n        this.info = this.createLogMethod(\"info\");\n        this.error = this.createLogMethod(\"error\");\n    }\n    /**\n     * Push \"attribute-like\" context.\n     *\n     * Following log messages will be prefixed with `name` or `.name` depending on current context.\n     */\n    pushAttr(name) {\n        this.context.push(`${this.context.length > 0 ? \".\" : \"\"}${name}`);\n    }\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index) {\n        this.context.push(`[${index}]`);\n    }\n    pop() {\n        this.context.pop();\n    }\n    // tslint:enable:member-ordering\n    createLogMethod(severity) {\n        return (message, ...rest) => {\n            if (!this.m_headerLogged) {\n                this.m_logger.info(this.headerMessage);\n                this.m_headerLogged = true;\n            }\n            this.m_logger[severity](`${this.context.join(\"\")}: ${message}`, ...rest);\n        };\n    }\n}\nexports.ContextLogger = ContextLogger;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/ContextLogger.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Functions.js":
/*!********************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Functions.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Chains two functions for further assigning as one wrapped callback function\n */\nfunction chainCallbacks(f1, f2) {\n    return function (...args) {\n        if (f1) {\n            f1.apply(this, args);\n        }\n        return f2.apply(this, args);\n    };\n}\nexports.chainCallbacks = chainCallbacks;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Functions.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/GroupedPriorityList.js":
/*!******************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/GroupedPriorityList.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The `PriorityListGroup` contains a list of [[PriorityListElement]]s that all have the same\n * (integer) priority.\n */\nclass PriorityListGroup {\n    constructor(priority, elements = new Array()) {\n        this.priority = priority;\n        this.elements = elements;\n    }\n    /**\n     * Create and return a deep copy of the `PriorityListGroup<T>`.\n     *\n     * @returns A clone of the `PriorityListGroup<T>`.\n     */\n    clone() {\n        return new PriorityListGroup(this.priority, this.elements.slice());\n    }\n}\nexports.PriorityListGroup = PriorityListGroup;\n/**\n * The `GroupedPriorityList` contains a [[PriorityListGroupMap]] to manage a larger number of items\n * in priority groups.\n */\nclass GroupedPriorityList {\n    constructor() {\n        this.groups = new Map();\n    }\n    /**\n     * Add an element to the `GroupedPriorityList`. Selects group based on the elements priority.\n     *\n     * @param element Element to be added.\n     */\n    add(element) {\n        this.getGroup(element.priority).elements.push(element);\n    }\n    /**\n     * Remove an element from the `GroupedPriorityList`.\n     *\n     * Note: It is required that the priority is the same as it was when the element has been added.\n     * Otherwise, the removal will fail.\n     *\n     * @param element Element to be removed.\n     * @returns `True` if the element was removed, `false` otherwise.\n     */\n    remove(element) {\n        const group = this.getGroup(element.priority);\n        if (group !== undefined) {\n            const foundIndex = group.elements.indexOf(element);\n            if (foundIndex >= 0) {\n                group.elements.splice(foundIndex, 1);\n                if (group.elements.length === 0) {\n                    const normalizedPriority = Math.floor(element.priority);\n                    this.groups.delete(normalizedPriority);\n                    if (this.m_sortedGroups) {\n                        this.m_sortedGroups = [];\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Remove all internal [[PriorityListGroup]]s.\n     */\n    clear() {\n        this.groups.clear();\n        if (this.m_sortedGroups) {\n            this.m_sortedGroups = [];\n        }\n    }\n    /**\n     * Merge another [[GroupedPriorityList]] into this one.\n     *\n     * @param other Other group to merge.\n     */\n    merge(other) {\n        for (const otherGroup of other.groups) {\n            const group = this.findGroup(otherGroup[1].priority);\n            if (group === undefined) {\n                this.groups.set(Math.floor(otherGroup[1].priority), otherGroup[1].clone());\n                if (this.m_sortedGroups) {\n                    this.m_sortedGroups = [];\n                }\n                continue;\n            }\n            group.elements = group.elements.concat(otherGroup[1].elements);\n        }\n        return this;\n    }\n    /**\n     * Return a sorted list of [[PriorityListGroup]]s.\n     */\n    get sortedGroups() {\n        if (this.m_sortedGroups && this.m_sortedGroups.length > 0) {\n            return this.m_sortedGroups;\n        }\n        if (!this.m_sortedGroups) {\n            this.m_sortedGroups = [];\n        }\n        for (const priorityList of this.groups) {\n            this.m_sortedGroups.push(priorityList[1]);\n        }\n        this.m_sortedGroups.sort((a, b) => {\n            return b.priority - a.priority;\n        });\n        return this.m_sortedGroups;\n    }\n    /**\n     * Apply function to all elements in this `GroupedPriorityList`.\n     *\n     * @param {(element: T) => void} fun Function to apply.\n     */\n    forEach(fun) {\n        for (const group of this.groups) {\n            group[1].elements.forEach(fun);\n        }\n    }\n    /**\n     * Count the number of elements in this `GroupedPriorityList`.\n     */\n    count() {\n        let n = 0;\n        for (const group of this.groups) {\n            n += group[1].elements.length;\n        }\n        return n;\n    }\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    findGroup(priority) {\n        const normalizedPriority = Math.floor(priority);\n        const group = this.groups.get(normalizedPriority);\n        return group;\n    }\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    getGroup(priority) {\n        let group = this.findGroup(priority);\n        if (group === undefined) {\n            const normalizedPriority = Math.floor(priority);\n            group = new PriorityListGroup(normalizedPriority);\n            this.groups.set(normalizedPriority, group);\n            if (this.m_sortedGroups) {\n                this.m_sortedGroups = [];\n            }\n        }\n        return group;\n    }\n}\nexports.GroupedPriorityList = GroupedPriorityList;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/GroupedPriorityList.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Logger/ConsoleChannel.js":
/*!********************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Logger/ConsoleChannel.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class for the default console channel.\n */\nclass ConsoleChannel {\n    error(message, ...optionalParams) {\n        // tslint:disable-next-line:no-console\n        console.error(message, ...optionalParams);\n    }\n    debug(message, ...optionalParams) {\n        // tslint:disable-next-line:no-console\n        console.debug(message, ...optionalParams);\n    }\n    info(message, ...optionalParams) {\n        // tslint:disable-next-line:no-console\n        console.info(message, ...optionalParams);\n    }\n    log(message, ...optionalParams) {\n        // tslint:disable-next-line:no-console\n        console.log(message, ...optionalParams);\n    }\n    trace(message, ...optionalParams) {\n        // tslint:disable-next-line:no-console\n        console.trace(message, ...optionalParams);\n    }\n    warn(message, ...optionalParams) {\n        // tslint:disable-next-line:no-console\n        console.warn(message, ...optionalParams);\n    }\n}\nexports.ConsoleChannel = ConsoleChannel;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Logger/ConsoleChannel.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Logger/ILogger.js":
/*!*************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Logger/ILogger.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Enum log levels\n */\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    LogLevel[LogLevel[\"Log\"] = 2] = \"Log\";\n    LogLevel[LogLevel[\"Info\"] = 3] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 4] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 5] = \"Error\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n/**\n * Logger options to configure logger\n */\nclass LoggerOptions {\n}\nexports.LoggerOptions = LoggerOptions;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Logger/ILogger.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Logger/Logger.js":
/*!************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Logger/Logger.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ILogger_1 = __webpack_require__(/*! ./ILogger */ \"./node_modules/@here/harp-utils/lib/Logger/ILogger.js\");\n/**\n * Logger class.\n */\nclass Logger {\n    constructor(name, m_channel, options) {\n        this.name = name;\n        this.m_channel = m_channel;\n        this.enabled = true;\n        this.level = ILogger_1.LogLevel.Trace;\n        if (options !== undefined) {\n            this.update(options);\n        }\n    }\n    error(message, ...optionalParams) {\n        if (this.enabled && this.level <= ILogger_1.LogLevel.Error) {\n            this.m_channel.error(this.prefix, message, ...optionalParams);\n        }\n    }\n    debug(message, ...optionalParams) {\n        if (this.enabled && this.level <= ILogger_1.LogLevel.Debug) {\n            this.m_channel.debug(this.prefix, message, ...optionalParams);\n        }\n    }\n    info(message, ...optionalParams) {\n        if (this.enabled && this.level <= ILogger_1.LogLevel.Info) {\n            this.m_channel.info(this.prefix, message, ...optionalParams);\n        }\n    }\n    log(message, ...optionalParams) {\n        if (this.enabled && this.level <= ILogger_1.LogLevel.Log) {\n            this.m_channel.log(this.prefix, message, ...optionalParams);\n        }\n    }\n    trace(message, ...optionalParams) {\n        if (this.enabled && this.level <= ILogger_1.LogLevel.Trace) {\n            this.m_channel.trace(this.prefix, message, ...optionalParams);\n        }\n    }\n    warn(message, ...optionalParams) {\n        if (this.enabled && this.level <= ILogger_1.LogLevel.Warn) {\n            this.m_channel.warn(this.prefix, message, ...optionalParams);\n        }\n    }\n    update(options) {\n        this.enabled = options.enabled === undefined ? this.enabled : options.enabled;\n        this.level = options.level === undefined ? this.level : options.level;\n    }\n    get prefix() {\n        return this.name + \":\";\n    }\n}\nexports.Logger = Logger;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Logger/Logger.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Logger/LoggerManager.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Logger/LoggerManager.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst LoggerManagerImpl_1 = __webpack_require__(/*! ./LoggerManagerImpl */ \"./node_modules/@here/harp-utils/lib/Logger/LoggerManagerImpl.js\");\n/**\n * The LoggerManager class implements a singleton object that handles logging.\n *\n * Example:\n *\n * ```typescript\n *\n * const logger = LoggerManager.instance.create(\"MyFontLoaderClass\");\n * if (missingFonts.length > 0) {\n *     logger.error(\"These fonts can not be loaded: \", missingFonts);\n * } else {\n *     logger.log(\"All fonts have been loaded.\");\n * }\n * ```\n */\nclass LoggerManager {\n    static get instance() {\n        return this.m_instance || (this.m_instance = new LoggerManagerImpl_1.LoggerManagerImpl());\n    }\n}\nexports.LoggerManager = LoggerManager;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Logger/LoggerManager.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Logger/LoggerManagerImpl.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Logger/LoggerManagerImpl.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ConsoleChannel_1 = __webpack_require__(/*! ./ConsoleChannel */ \"./node_modules/@here/harp-utils/lib/Logger/ConsoleChannel.js\");\nconst Logger_1 = __webpack_require__(/*! ./Logger */ \"./node_modules/@here/harp-utils/lib/Logger/Logger.js\");\nconst WorkerChannel_1 = __webpack_require__(/*! ./WorkerChannel */ \"./node_modules/@here/harp-utils/lib/Logger/WorkerChannel.js\");\n/**\n * LoggerManagerImpl is the class for the singleton instance of the logger manager.\n * It handles channels and loggers.\n */\nclass LoggerManagerImpl {\n    constructor() {\n        this.m_loggers = [];\n        this.channel =\n            typeof self === \"undefined\" || typeof self.document !== \"undefined\"\n                ? new ConsoleChannel_1.ConsoleChannel()\n                : new WorkerChannel_1.WorkerChannel();\n    }\n    getLoggerNames() {\n        return this.m_loggers.map(logger => logger.name);\n    }\n    getLogger(name) {\n        return this.m_loggers.find(logger => logger.name === name);\n    }\n    create(loggerName, options = {}) {\n        if (this.m_levelSetForAll !== undefined &&\n            (options.level === undefined || options.level < this.m_levelSetForAll)) {\n            options.level = this.m_levelSetForAll;\n        }\n        const logger = new Logger_1.Logger(loggerName, this.channel, options);\n        this.m_loggers.push(logger);\n        return logger;\n    }\n    dispose(logger) {\n        const found = this.m_loggers.indexOf(logger);\n        if (found < 0) {\n            throw new Error(`Cannot unregister \"${logger}\" : no such logger registered.`);\n        }\n        this.m_loggers.splice(found, 1);\n    }\n    updateAll(options) {\n        for (const logger of this.m_loggers) {\n            logger.update(options);\n        }\n    }\n    update(loggerName, config) {\n        for (const logger of this.m_loggers) {\n            if (logger.name === loggerName) {\n                logger.update(config);\n            }\n        }\n    }\n    enableAll(enabled) {\n        for (const logger of this.m_loggers) {\n            logger.enabled = enabled;\n        }\n    }\n    enable(loggerName, value) {\n        this.update(loggerName, { enabled: value });\n    }\n    setLogLevelForAll(level) {\n        this.m_levelSetForAll = level;\n        for (const logger of this.m_loggers) {\n            logger.level = level;\n        }\n    }\n    setLogLevel(loggerName, level) {\n        this.update(loggerName, { level });\n    }\n    setChannel(channel) {\n        this.channel = channel;\n    }\n}\nexports.LoggerManagerImpl = LoggerManagerImpl;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Logger/LoggerManagerImpl.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Logger/MultiChannel.js":
/*!******************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Logger/MultiChannel.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class allowing mixing several channels.\n */\nclass MultiChannel {\n    constructor(...channels) {\n        this.channels = [];\n        this.channels = channels;\n    }\n    error(message, ...optionalParams) {\n        for (const channel of this.channels) {\n            channel.error(message, ...optionalParams);\n        }\n    }\n    debug(message, ...optionalParams) {\n        for (const channel of this.channels) {\n            channel.debug(message, ...optionalParams);\n        }\n    }\n    info(message, ...optionalParams) {\n        for (const channel of this.channels) {\n            channel.info(message, ...optionalParams);\n        }\n    }\n    log(message, ...optionalParams) {\n        for (const channel of this.channels) {\n            channel.log(message, ...optionalParams);\n        }\n    }\n    trace(message, ...optionalParams) {\n        for (const channel of this.channels) {\n            channel.trace(message, ...optionalParams);\n        }\n    }\n    warn(message, ...optionalParams) {\n        for (const channel of this.channels) {\n            channel.warn(message, ...optionalParams);\n        }\n    }\n}\nexports.MultiChannel = MultiChannel;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Logger/MultiChannel.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Logger/WorkerChannel.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Logger/WorkerChannel.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ILogger_1 = __webpack_require__(/*! ./ILogger */ \"./node_modules/@here/harp-utils/lib/Logger/ILogger.js\");\nexports.WORKERCHANNEL_MSG_TYPE = \"worker-channel-message\";\n/**\n * The class for the worker channel.\n */\nclass WorkerChannel {\n    error(message, ...optionalParams) {\n        const workerMessage = {\n            message: [message, ...optionalParams],\n            type: exports.WORKERCHANNEL_MSG_TYPE,\n            level: ILogger_1.LogLevel.Error\n        };\n        self.postMessage(workerMessage);\n    }\n    debug(message, ...optionalParams) {\n        const workerMessage = {\n            message: [message, ...optionalParams],\n            type: exports.WORKERCHANNEL_MSG_TYPE,\n            level: ILogger_1.LogLevel.Debug\n        };\n        self.postMessage(workerMessage);\n    }\n    info(message, ...optionalParams) {\n        const workerMessage = {\n            message: [message, ...optionalParams],\n            type: exports.WORKERCHANNEL_MSG_TYPE,\n            level: ILogger_1.LogLevel.Info\n        };\n        self.postMessage(workerMessage);\n    }\n    log(message, ...optionalParams) {\n        const workerMessage = {\n            message: [message, ...optionalParams],\n            type: exports.WORKERCHANNEL_MSG_TYPE,\n            level: ILogger_1.LogLevel.Log\n        };\n        self.postMessage(workerMessage);\n    }\n    trace(message, ...optionalParams) {\n        const workerMessage = {\n            message: [message, ...optionalParams],\n            type: exports.WORKERCHANNEL_MSG_TYPE,\n            level: ILogger_1.LogLevel.Trace\n        };\n        self.postMessage(workerMessage);\n    }\n    warn(message, ...optionalParams) {\n        const workerMessage = {\n            message: [message, ...optionalParams],\n            type: exports.WORKERCHANNEL_MSG_TYPE,\n            level: ILogger_1.LogLevel.Warn\n        };\n        self.postMessage(workerMessage);\n    }\n}\nexports.WorkerChannel = WorkerChannel;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Logger/WorkerChannel.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Logger/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Logger/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./ConsoleChannel */ \"./node_modules/@here/harp-utils/lib/Logger/ConsoleChannel.js\"));\n__export(__webpack_require__(/*! ./ILogger */ \"./node_modules/@here/harp-utils/lib/Logger/ILogger.js\"));\n__export(__webpack_require__(/*! ./Logger */ \"./node_modules/@here/harp-utils/lib/Logger/Logger.js\"));\n__export(__webpack_require__(/*! ./LoggerManager */ \"./node_modules/@here/harp-utils/lib/Logger/LoggerManager.js\"));\n__export(__webpack_require__(/*! ./MultiChannel */ \"./node_modules/@here/harp-utils/lib/Logger/MultiChannel.js\"));\n__export(__webpack_require__(/*! ./WorkerChannel */ \"./node_modules/@here/harp-utils/lib/Logger/WorkerChannel.js\"));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Logger/index.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Math2D.js":
/*!*****************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Math2D.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Math2D;\n(function (Math2D) {\n    /**\n     * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n     * objects with two numbers each). Should be faster.\n     */\n    class Box {\n        /**\n         * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n         * objects with two numbers each). Should be faster.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        constructor(x = 0, y = 0, w = 0, h = 0) {\n            this.x = x;\n            this.y = y;\n            this.w = w;\n            this.h = h;\n        }\n        /**\n         * Set new values to all properties of the box.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        set(x, y, w, h) {\n            this.x = x;\n            this.y = y;\n            this.w = w;\n            this.h = h;\n        }\n        /**\n         * Test box for inclusion of point.\n         *\n         * @param x X coordinate of point.\n         * @param y Y coordinate of point.\n         */\n        contains(x, y) {\n            return this.x <= x && this.x + this.w >= x && this.y <= y && this.y + this.h >= y;\n        }\n        /**\n         * Test box for inclusion of another box.\n         *\n         * @param other Box 2 to test for inclusion.\n         */\n        containsBox(other) {\n            const xmax = other.x + other.w;\n            const ymax = other.y + other.h;\n            return (this.contains(other.x, other.y) &&\n                this.contains(xmax, other.y) &&\n                this.contains(other.x, ymax) &&\n                this.contains(xmax, ymax));\n        }\n        /**\n         * Test two boxes for intersection.\n         *\n         * @param other Box 2 to test for intersection.\n         */\n        intersects(other) {\n            return (this.x <= other.x + other.w &&\n                this.x + this.w >= other.x &&\n                this.y <= other.y + other.h &&\n                this.y + this.h >= other.y);\n        }\n    }\n    Math2D.Box = Box;\n    /**\n     * Compute squared distance between two 2D points `a` and `b`.\n     *\n     * @param ax Point a.x\n     * @param ay Point a.y\n     * @param bx Point b.x\n     * @param by Point b.y\n     * @returns Squared distance between the two points\n     */\n    function distSquared(ax, ay, bx, by) {\n        return (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n    }\n    Math2D.distSquared = distSquared;\n    /**\n     * Computes the squared length of a line.\n     *\n     * @param line An array of that forms a line via [x,y,z,x,y,z,...] tuples.\n     */\n    function computeSquaredLineLength(line) {\n        let squaredLineLength = 0;\n        const length = line.length - 4;\n        for (let i = 0; i < length; i += 3) {\n            const xDiff = line[i + 3] - line[i];\n            const yDiff = line[i + 4] - line[i + 1];\n            squaredLineLength += xDiff * xDiff + yDiff * yDiff;\n        }\n        return squaredLineLength;\n    }\n    Math2D.computeSquaredLineLength = computeSquaredLineLength;\n    /**\n     * Compute squared distance between a 2D point and a 2D line segment.\n     *\n     * @param px Test point X\n     * @param py Test point y\n     * @param l0x Line segment start X\n     * @param l0y Line segment start Y\n     * @param l1x Line segment end X\n     * @param l1y Line segment end Y\n     * @returns Squared distance between point and line segment\n     */\n    function distToSegmentSquared(px, py, l0x, l0y, l1x, l1y) {\n        const lineLengthSuared = distSquared(l0x, l0y, l1x, l1y);\n        if (lineLengthSuared === 0) {\n            return distSquared(px, py, l0x, l0y);\n        }\n        let t = ((px - l0x) * (l1x - l0x) + (py - l0y) * (l1y - l0y)) / lineLengthSuared;\n        t = Math.max(0, Math.min(1, t));\n        return distSquared(px, py, l0x + t * (l1x - l0x), l0y + t * (l1y - l0y));\n    }\n    Math2D.distToSegmentSquared = distToSegmentSquared;\n})(Math2D = exports.Math2D || (exports.Math2D = {}));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Math2D.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/MathUtils.js":
/*!********************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/MathUtils.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MathUtils;\n(function (MathUtils) {\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     *\n     * @returns Clamped value.\n     */\n    function clamp(value, min, max) {\n        return value < min ? min : value > max ? max : value;\n    }\n    MathUtils.clamp = clamp;\n    /**\n     * Returns a linear interpolation between the values of edge0 and edge1 based on the factor.\n     *\n     * Given two known points the linear interpolant between these points may be presented as\n     * straight line. This means that for given factor change the resulting change of return\n     * value is always const.\n     * @see https://en.wikipedia.org/wiki/Linear_interpolation\n     *\n     * @param edge0\n     * @param edge1\n     * @param factor Interpolation factor that ranges between: 0 <= x <= 1.\n     */\n    function lerp(edge0, edge1, factor) {\n        return edge0 * (1 - factor) + edge1 * factor;\n    }\n    MathUtils.lerp = lerp;\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    function smoothStep(edge0, edge1, x) {\n        // Scale, bias and saturate x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * (3 - 2 * x);\n    }\n    MathUtils.smoothStep = smoothStep;\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     *\n     * Improved version by Ken Perlin, which has zero 1st- and 2nd-order derivatives at `x = 0` and\n     * `x = 1`:\n     *\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    function smootherStep(edge0, edge1, x) {\n        // Scale, and clamp x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    }\n    MathUtils.smootherStep = smootherStep;\n    /**\n     * Maps a number from one range to another.\n     *\n     * @param val The incoming value to be converted.\n     * @param inMin Lower bound of the value's current range.\n     * @param inMax Upper bound of the value's current range.\n     * @param outMin Lower bound of the value's target range.\n     * @param outMax Upper bound of the value's target range.\n     */\n    function map(val, inMin, inMax, outMin, outMax) {\n        return ((val - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n    }\n    MathUtils.map = map;\n    /**\n     * Returns the smaller of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    function min2(a, b) {\n        let result;\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.min(result, b);\n        }\n        return result;\n    }\n    MathUtils.min2 = min2;\n    /**\n     * Returns the larger of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    function max2(a, b) {\n        let result;\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.max(result, b);\n        }\n        return result;\n    }\n    MathUtils.max2 = max2;\n    /**\n     * Checks if the value of a given number is inside an upper or lower bound. The bounds may be\n     * undefined, in which case their value is ignored.\n     *\n     * @param value Value to check.\n     * @param lowerBound The lower bound to check the value against.\n     * @param upperBound The upper bound to check the value against.\n     *\n     * @returns `true` if value is inside the bounds or if the bounds are `undefined`, `false`\n     *          otherwise.\n     */\n    function isClamped(value, lowerBound, upperBound) {\n        if (lowerBound !== undefined && value < lowerBound) {\n            return false;\n        }\n        if (upperBound !== undefined && value > upperBound) {\n            return false;\n        }\n        return true;\n    }\n    MathUtils.isClamped = isClamped;\n    /**\n     * Smoothly interpolates between two values using cubic formula\n     *\n     * @param startValue\n     * @param endValue\n     * @param time\n     * @returns Result of the interpolation within the range of `[startValue, endValue]`\n     */\n    function easeInOutCubic(startValue, endValue, time) {\n        const timeValue = time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;\n        return startValue + (endValue - startValue) * timeValue;\n    }\n    MathUtils.easeInOutCubic = easeInOutCubic;\n})(MathUtils = exports.MathUtils || (exports.MathUtils = {}));\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/MathUtils.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/Mixins.js":
/*!*****************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/Mixins.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copy methods and properties from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods and properties into.\n * @param baseCtors Class to take all methods and properties from.\n */\nfunction applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\nexports.applyMixins = applyMixins;\n/**\n * Copy methods from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods into.\n * @param baseCtors Class to take all methods from.\n */\nfunction applyMixinsWithoutProperties(derivedCtor, baseCtors) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            const descriptor = Object.getOwnPropertyDescriptor(baseCtor.prototype, name);\n            if (descriptor !== undefined &&\n                descriptor.get === undefined &&\n                name !== \"constructor\") {\n                derivedCtor.prototype[name] = baseCtor.prototype[name];\n            }\n        });\n    });\n}\nexports.applyMixinsWithoutProperties = applyMixinsWithoutProperties;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/Mixins.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/ObjectUtils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/ObjectUtils.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Deep clone of object.\n *\n * Like `JSON.parse(JSON.stringify(obj))`, but supports basic javascript types (string, number,\n * object), `Date` and `RegExp`s and cycles.\n *\n * Throws error if enounters object with `prototype` assuming that in general class instances\n * cannot be reliably cloned by generic algorithm.\n */\nfunction cloneDeep(obj) {\n    const cache = new Map();\n    function cloneInternal(src) {\n        if (src === null) {\n            return null;\n        }\n        else if (typeof src === \"object\") {\n            const cached = cache.get(src);\n            if (cached !== undefined) {\n                return cached;\n            }\n            if (Array.isArray(src)) {\n                const result = [];\n                cache.set(src, result);\n                result.length = src.length;\n                for (let i = 0; i < result.length; ++i) {\n                    result[i] = cloneInternal(src[i]);\n                }\n                return result;\n            }\n            else if (src instanceof Date) {\n                const result = new Date(src.getTime());\n                cache.set(src, result);\n                return result;\n            }\n            else if (src instanceof RegExp) {\n                const result = new RegExp(src.source, src.flags);\n                cache.set(src, result);\n                return result;\n            }\n            else if (src.constructor !== Object) {\n                throw new Error(\"cloneDeep doesn't support objects with custom prototypes\");\n            }\n            else {\n                const result = {};\n                cache.set(src, result);\n                for (const key in src) {\n                    if (src.hasOwnProperty(key)) {\n                        result[key] = cloneInternal(src[key]);\n                    }\n                }\n                return result;\n            }\n        }\n        else {\n            // string, number, boolean, undefined and functions are returned as is\n            return src;\n        }\n    }\n    const r = cloneInternal(obj);\n    cache.clear();\n    return r;\n}\nexports.cloneDeep = cloneDeep;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/ObjectUtils.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/OptionsUtils.js":
/*!***********************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/OptionsUtils.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getOptionValue(...values) {\n    for (const candidate of values) {\n        if (candidate !== undefined && candidate !== null) {\n            return candidate;\n        }\n    }\n    return undefined;\n}\nexports.getOptionValue = getOptionValue;\n/**\n * Merge options into existing parameters object.\n *\n * Convenience helper with _similar_ semantics as:\n *\n *     const finalParams1 = { ...defaults, ... options };\n *     const finalParams2 = Object.assign({}, defaults, options);\n *\n * This function doesn't copy _extra_ properties of `options` that doesn't exist in `defaults`.\n * `defaults` is used as _parameters_ template.\n *\n * This doc uses following notion of `option` and `parameter` terms:\n * * `parameter` is a variable, or 'almost constant' of procedure/function/algorith/object\n *    * `parameter` usually have sensible and usually used default\n *    * `parameter` is always defined (no `undefined`, `null` or `?` in type)\n *    * `parameter` can be overriden by specyfying `option` with same name\n * * `option` means value that may be passed optionally, overrides `parameter` value with same name\n *\n * Usage:\n *\n *     interface FooParams {\n *         useTextures: boolean;\n *         opacity: number;\n *     }\n *\n *     const FOO_DEFAULTS: FooParams = {\n *         useTextures: true,\n *         opacity: 0.8\n *     };\n *\n *     type FooOptions = Partial<FooParams>;\n *\n *     function doSomething(options: FooOptions) {\n *         const params = mergeWithOptions(FOO_DEFAULTS, options);\n *             // typeof params === FooParams\n *             // params.opacity = 0.5\n *             // params.useTextures = true\n *             // params.someOtherOptionFromOtherApi is not defined\n *     }\n *     const opt = {opacity: 0.5, someOtherOptionFromOtherApi: 'aaa'};\n *     doSomething(opt);\n *\n * Rationale:\n *   * both `Object.assign` and spread operator copy extra options\n *   * `Object.assign` & `spread operator` may copy `undefined` and `null`s if they really exist\n *     in options object\n *\n * @param parameters parmeters template object holding all expected parameters\n * @param options options object\n * @returns new object with `parameters` overriden by values from `options`\n */\nfunction mergeWithOptions(parameters, options) {\n    // NOTE: `as object` needed due to TypeScript bug:\n    //       https://github.com/Microsoft/TypeScript/issues/14409\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    const result = Object.assign({}, parameters);\n    if (options === undefined || options === null) {\n        return result;\n    }\n    for (const prop in parameters) {\n        if (parameters.hasOwnProperty(prop)) {\n            const optionValue = options[prop];\n            if (optionValue !== undefined && optionValue !== null) {\n                result[prop] = optionValue;\n            }\n        }\n    }\n    return result;\n}\nexports.mergeWithOptions = mergeWithOptions;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/OptionsUtils.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/PerformanceTimer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/PerformanceTimer.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* tslint:disable:max-line-length */\n/**\n * See:\n * https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now\n */\n/* tslint:ensable:max-line-length */\nclass PerformanceTimer {\n    /**\n     * Returns timestamp in milliseconds since page load.\n     *\n     * If the [[DOMHighResTimeStamp]] is supported, the resolution is up to 5 microseconds,\n     * otherwise it is in milliseconds. Timespans are computed by taking the difference between two\n     * samples.\n     *\n     * Example:\n     * ```typescript\n     * const now = PerformanceTimer.now();\n     * // call some expensive function for which you want to check the duration.\n     * const end = PerformanceTimer.now();\n     * const elapsedTime = end - now;\n     * ```\n     */\n    static now() {\n        return PerformanceTimer.nowFunc();\n    }\n    static getNowFunc() {\n        if (typeof performance !== \"undefined\" && typeof performance.now !== \"undefined\") {\n            return () => performance.now();\n        }\n        // fall back to Date.getTime()\n        return () => {\n            return new Date().getTime();\n        };\n    }\n}\nexports.PerformanceTimer = PerformanceTimer;\n// tslint:disable-next-line:no-unused-variable\nPerformanceTimer.instance = new PerformanceTimer();\nPerformanceTimer.nowFunc = PerformanceTimer.getNowFunc();\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/PerformanceTimer.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/UriResolver.js":
/*!**********************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/UriResolver.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst UrlUtils_1 = __webpack_require__(/*! ./UrlUtils */ \"./node_modules/@here/harp-utils/lib/UrlUtils.js\");\n/**\n * Basic, import-map like [[UriResolver]].\n *\n * Resolves `uris` basing on exact or prefix match of `key` from `definitions`.\n *\n * In definitions, `key` is matched against input uri with following strategy:\n *  - `key` without trailing `/` -> `key` and input `uri` must be identical\n *  - `key` with trailing `/`, -> `key` is treated as \"package prefix\", so `uri` must start with\n *    `key`\n *\n * Example:\n * ```\n * {\n *     \"local://poiMasterList\": \"/assets/poiMasterList.json\"\n *        // will match only 'local://poiMasterList' and resolve `/assets/poiMasterList.json`\n *     \"local://icons/\": \"/assets/icons/\"\n *        // will match only 'local://icons/ANYPATH' (and similar) and resolve to\n *        // `/assets/icons/ANYPATH\n * }\n * ```\n * Inspired by [`WICG` import maps proposal](https://github.com/WICG/import-maps#the-import-map).\n */\nclass PrefixMapUriResolver {\n    constructor(definitions) {\n        this.definitions = definitions;\n    }\n    resolveUri(uri) {\n        return Object.keys(this.definitions).reduce((r, key) => {\n            if (key.endsWith(\"/\") && r.startsWith(key)) {\n                const newPrefix = this.definitions[key];\n                return newPrefix + r.substr(key.length);\n            }\n            else if (r === key) {\n                return this.definitions[key];\n            }\n            return r;\n        }, uri);\n    }\n}\nexports.PrefixMapUriResolver = PrefixMapUriResolver;\n/**\n * [UriResolver] that resolve relative `uri`s against to parent resource `uri`.\n */\nclass RelativeUriResolver {\n    constructor(parentUri) {\n        this.parentUri = parentUri;\n    }\n    resolveUri(uri) {\n        return UrlUtils_1.resolveReferenceUri(this.parentUri, uri);\n    }\n}\nexports.RelativeUriResolver = RelativeUriResolver;\n/**\n * Compose URI resolvers.\n *\n * Creates new [[UriResolver]] that applies resolvers in orders or arguments.\n *\n * Example:\n *\n *     const themeUrl = ...; // url of parent object\n *     const childUrlResolver = composeUrlResolvers(\n *           new RelativeUriResolver(themeUrl),\n *           defaultUrlResolver\n *     );\n */\nfunction composeUriResolvers(...resolvers) {\n    return {\n        resolveUri(originalUrl) {\n            return resolvers.reduce((url, resolver) => {\n                if (resolver !== undefined) {\n                    return resolver.resolveUri(url);\n                }\n                else {\n                    return url;\n                }\n            }, originalUrl);\n        }\n    };\n}\nexports.composeUriResolvers = composeUriResolvers;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/UriResolver.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/UrlPlatformUtils.web.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/UrlPlatformUtils.web.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst UrlUtils_1 = __webpack_require__(/*! ./UrlUtils */ \"./node_modules/@here/harp-utils/lib/UrlUtils.js\");\n/**\n * Get base URL for from where relative URLs will be loaded.\n *\n * * In browser, it resolves to `baseUrl(location.href)` i.e document's base URL\n * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n *\n * * In node, it resolves to `file://${process.cwd()}`.\n */\nfunction getAppBaseUrl() {\n    return UrlUtils_1.baseUrl(window.location.href);\n}\nexports.getAppBaseUrl = getAppBaseUrl;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/UrlPlatformUtils.web.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/UrlUtils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/UrlUtils.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Resolve URI of referenced object w.r.t parent URI.\n *\n * Resolves `childUri` as it would be loaded from location specified by `parentUri`.\n *\n * If `childUri` is absolute, then it is returned unchanged.\n * If `childUri` is origin-absolute path, then only origin path is taken from `parentUri`.\n *\n * See [[baseUri]] for reference how base URL of `parentUri` is determined.\n *\n * Examples:\n *\n *     // normal case, child is sibling\n *     https://foo.com/themes/day.json + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent is \"folder\", so child is just located in this folder\n *     https://foo.com/themes/ + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent looks like leaf, so last component is stripped\n *     https://foo.com/themes + images/foo.png -> https://foo.com/images/foo.png\n *\n *     // origin-absolute URL, takes only origin from parent\n *     https://foo.com/themes/day.json + /fonts/foo.json -> https://foo.com/fonts/foo.json\n *\n * @param parentUri URI of parent resource\n * @param childUri URI of child as referenced from parent resource\n * @return `childUrl` as if anchored in location of `parentUrl`\n */\nfunction resolveReferenceUri(parentUri, childUri) {\n    if (absoluteUrlWithOriginRe.test(childUri)) {\n        return childUri;\n    }\n    else if (childUri.startsWith(\"/\")) {\n        const origin = getUrlOrigin(parentUri);\n        return origin + childUri;\n    }\n    else {\n        if (childUri.startsWith(\"./\")) {\n            childUri = childUri.substr(2);\n        }\n        const parentBaseUrl = baseUrl(parentUri);\n        return parentBaseUrl + childUri;\n    }\n}\nexports.resolveReferenceUri = resolveReferenceUri;\nconst absoluteUrlWithOriginRe = new RegExp(\"^(?:[a-z]+:)?//\", \"i\");\n/**\n * Returns base URL of given resource URL.\n *\n * `Url` with trailing slash are considered genuine 'locations', they are returned as is, however if\n * `url` ends with name component it is treated as \"leaf\", so last path component is removed.\n *\n * Standalone files (without any folder structure) are considered relative to `./`.\n *\n * Examples:\n * ```\n *     https://foo.com/themes/a.json -> https://foo.com/themes/\n *     https://foo.com/themes/ -> https://foo.com/themes/\n *     https://foo.com/themes -> https://foo.com/ // note, themes is treated as leaf\n *     themes/day.json -> themes/\n *     themes -> ./\n * ```\n */\nfunction baseUrl(url) {\n    if (url === undefined) {\n        return \"./\";\n    }\n    let idx = url.indexOf(\"#\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.indexOf(\"?\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.lastIndexOf(\"/\");\n    if (idx === -1) {\n        return \"./\";\n    }\n    else {\n        return url.substring(0, idx + 1);\n    }\n}\nexports.baseUrl = baseUrl;\n/**\n * Get `origin` part of URL.\n *\n * @example\n *    https://example.com/foo -> https://example.com\n *    //example.com:8080/ -> //example.com:8080\n *    file:///etc/hosts ->\n *\n * @param url input URL\n * @return origin of given URL\n */\nfunction getUrlOrigin(url) {\n    if (url === undefined) {\n        return \"\";\n    }\n    const parsed = getUrlHostAndProtocol(url);\n    if (parsed.protocol === \"file:\") {\n        return \"file://\";\n    }\n    else if (parsed.host && parsed.protocol) {\n        return parsed.protocol + \"//\" + parsed.host;\n    }\n    else if (parsed.host) {\n        return \"//\" + parsed.host;\n    }\n    else if (parsed.protocol) {\n        return parsed.protocol + \"//\";\n    }\n    else {\n        return \"\";\n    }\n}\nexports.getUrlOrigin = getUrlOrigin;\n/**\n * Parse `host` and `protocol` part from URL.\n */\nfunction getUrlHostAndProtocol(url) {\n    const urlOriginRe = new RegExp(/^(?:([a-z]+:))?\\/\\/([^\\/]*)/, \"i\");\n    const match = url.match(urlOriginRe);\n    if (!match) {\n        throw new Error(`getUrlHostAndProtocol: unable to parse URL '${url}'`);\n    }\n    return {\n        protocol: match[1],\n        host: match[2]\n    };\n}\nexports.getUrlHostAndProtocol = getUrlHostAndProtocol;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/UrlUtils.js?");

/***/ }),

/***/ "./node_modules/@here/harp-utils/lib/assert.js":
/*!*****************************************************!*\
  !*** ./node_modules/@here/harp-utils/lib/assert.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = \"development\" === \"production\";\n//TODO: Make assertHandler configurable\n/**\n * Implementation of assert as a development help\n *\n * Note - this is deliberately a global function so that minimizers remove the\n * entire call when building for production.\n *\n * @hidden\n * @param condition Condition to match, if false, throws an Error(message)\n * @param message Optional message, defaults to \"ASSERTION failed\"\n */\nfunction assert(condition, message) {\n    if (!isProduction) {\n        if (!condition) {\n            throw new Error(message !== undefined ? message : \"ASSERTION failed\");\n        }\n    }\n}\nexports.assert = assert;\nfunction assertExists(element, message) {\n    if (!isProduction) {\n        if (element === undefined || element === null) {\n            throw new Error(message !== undefined ? message : \"ASSERTION failed: Element is undefined or null\");\n        }\n    }\n    return element;\n}\nexports.assertExists = assertExists;\n\n\n//# sourceURL=webpack:///./node_modules/@here/harp-utils/lib/assert.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/aspromise/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/base64/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/eventemitter/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/float/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/inquire/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/pool/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/utf8/index.js?");

/***/ }),

/***/ "./node_modules/earcut/src/earcut.js":
/*!*******************************************!*\
  !*** ./node_modules/earcut/src/earcut.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n\n        // filter collinear points around the cuts\n        filterPoints(outerNode, outerNode.next);\n        filterPoints(b, b.next);\n    }\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n\n\n//# sourceURL=webpack:///./node_modules/earcut/src/earcut.js?");

/***/ }),

/***/ "./node_modules/geojson-vt/src/clip.js":
/*!*********************************************!*\
  !*** ./node_modules/geojson-vt/src/clip.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return clip; });\n/* harmony import */ var _feature__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./feature */ \"./node_modules/geojson-vt/src/feature.js\");\n\n\n\n/* clip features between two axis-parallel lines:\n *     |        |\n *  ___|___     |     /\n * /   |   \\____|____/\n *     |        |\n */\n\nfunction clip(features, scale, k1, k2, axis, minAll, maxAll, options) {\n\n    k1 /= scale;\n    k2 /= scale;\n\n    if (minAll >= k1 && maxAll < k2) return features; // trivial accept\n    else if (maxAll < k1 || minAll >= k2) return null; // trivial reject\n\n    var clipped = [];\n\n    for (var i = 0; i < features.length; i++) {\n\n        var feature = features[i];\n        var geometry = feature.geometry;\n        var type = feature.type;\n\n        var min = axis === 0 ? feature.minX : feature.minY;\n        var max = axis === 0 ? feature.maxX : feature.maxY;\n\n        if (min >= k1 && max < k2) { // trivial accept\n            clipped.push(feature);\n            continue;\n        } else if (max < k1 || min >= k2) { // trivial reject\n            continue;\n        }\n\n        var newGeometry = [];\n\n        if (type === 'Point' || type === 'MultiPoint') {\n            clipPoints(geometry, newGeometry, k1, k2, axis);\n\n        } else if (type === 'LineString') {\n            clipLine(geometry, newGeometry, k1, k2, axis, false, options.lineMetrics);\n\n        } else if (type === 'MultiLineString') {\n            clipLines(geometry, newGeometry, k1, k2, axis, false);\n\n        } else if (type === 'Polygon') {\n            clipLines(geometry, newGeometry, k1, k2, axis, true);\n\n        } else if (type === 'MultiPolygon') {\n            for (var j = 0; j < geometry.length; j++) {\n                var polygon = [];\n                clipLines(geometry[j], polygon, k1, k2, axis, true);\n                if (polygon.length) {\n                    newGeometry.push(polygon);\n                }\n            }\n        }\n\n        if (newGeometry.length) {\n            if (options.lineMetrics && type === 'LineString') {\n                for (j = 0; j < newGeometry.length; j++) {\n                    clipped.push(Object(_feature__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(feature.id, type, newGeometry[j], feature.tags));\n                }\n                continue;\n            }\n\n            if (type === 'LineString' || type === 'MultiLineString') {\n                if (newGeometry.length === 1) {\n                    type = 'LineString';\n                    newGeometry = newGeometry[0];\n                } else {\n                    type = 'MultiLineString';\n                }\n            }\n            if (type === 'Point' || type === 'MultiPoint') {\n                type = newGeometry.length === 3 ? 'Point' : 'MultiPoint';\n            }\n\n            clipped.push(Object(_feature__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(feature.id, type, newGeometry, feature.tags));\n        }\n    }\n\n    return clipped.length ? clipped : null;\n}\n\nfunction clipPoints(geom, newGeom, k1, k2, axis) {\n    for (var i = 0; i < geom.length; i += 3) {\n        var a = geom[i + axis];\n\n        if (a >= k1 && a <= k2) {\n            newGeom.push(geom[i]);\n            newGeom.push(geom[i + 1]);\n            newGeom.push(geom[i + 2]);\n        }\n    }\n}\n\nfunction clipLine(geom, newGeom, k1, k2, axis, isPolygon, trackMetrics) {\n\n    var slice = newSlice(geom);\n    var intersect = axis === 0 ? intersectX : intersectY;\n    var len = geom.start;\n    var segLen, t;\n\n    for (var i = 0; i < geom.length - 3; i += 3) {\n        var ax = geom[i];\n        var ay = geom[i + 1];\n        var az = geom[i + 2];\n        var bx = geom[i + 3];\n        var by = geom[i + 4];\n        var a = axis === 0 ? ax : ay;\n        var b = axis === 0 ? bx : by;\n        var exited = false;\n\n        if (trackMetrics) segLen = Math.sqrt(Math.pow(ax - bx, 2) + Math.pow(ay - by, 2));\n\n        if (a < k1) {\n            // ---|-->  | (line enters the clip region from the left)\n            if (b > k1) {\n                t = intersect(slice, ax, ay, bx, by, k1);\n                if (trackMetrics) slice.start = len + segLen * t;\n            }\n        } else if (a > k2) {\n            // |  <--|--- (line enters the clip region from the right)\n            if (b < k2) {\n                t = intersect(slice, ax, ay, bx, by, k2);\n                if (trackMetrics) slice.start = len + segLen * t;\n            }\n        } else {\n            addPoint(slice, ax, ay, az);\n        }\n        if (b < k1 && a >= k1) {\n            // <--|---  | or <--|-----|--- (line exits the clip region on the left)\n            t = intersect(slice, ax, ay, bx, by, k1);\n            exited = true;\n        }\n        if (b > k2 && a <= k2) {\n            // |  ---|--> or ---|-----|--> (line exits the clip region on the right)\n            t = intersect(slice, ax, ay, bx, by, k2);\n            exited = true;\n        }\n\n        if (!isPolygon && exited) {\n            if (trackMetrics) slice.end = len + segLen * t;\n            newGeom.push(slice);\n            slice = newSlice(geom);\n        }\n\n        if (trackMetrics) len += segLen;\n    }\n\n    // add the last point\n    var last = geom.length - 3;\n    ax = geom[last];\n    ay = geom[last + 1];\n    az = geom[last + 2];\n    a = axis === 0 ? ax : ay;\n    if (a >= k1 && a <= k2) addPoint(slice, ax, ay, az);\n\n    // close the polygon if its endpoints are not the same after clipping\n    last = slice.length - 3;\n    if (isPolygon && last >= 3 && (slice[last] !== slice[0] || slice[last + 1] !== slice[1])) {\n        addPoint(slice, slice[0], slice[1], slice[2]);\n    }\n\n    // add the final slice\n    if (slice.length) {\n        newGeom.push(slice);\n    }\n}\n\nfunction newSlice(line) {\n    var slice = [];\n    slice.size = line.size;\n    slice.start = line.start;\n    slice.end = line.end;\n    return slice;\n}\n\nfunction clipLines(geom, newGeom, k1, k2, axis, isPolygon) {\n    for (var i = 0; i < geom.length; i++) {\n        clipLine(geom[i], newGeom, k1, k2, axis, isPolygon, false);\n    }\n}\n\nfunction addPoint(out, x, y, z) {\n    out.push(x);\n    out.push(y);\n    out.push(z);\n}\n\nfunction intersectX(out, ax, ay, bx, by, x) {\n    var t = (x - ax) / (bx - ax);\n    out.push(x);\n    out.push(ay + (by - ay) * t);\n    out.push(1);\n    return t;\n}\n\nfunction intersectY(out, ax, ay, bx, by, y) {\n    var t = (y - ay) / (by - ay);\n    out.push(ax + (bx - ax) * t);\n    out.push(y);\n    out.push(1);\n    return t;\n}\n\n\n//# sourceURL=webpack:///./node_modules/geojson-vt/src/clip.js?");

/***/ }),

/***/ "./node_modules/geojson-vt/src/convert.js":
/*!************************************************!*\
  !*** ./node_modules/geojson-vt/src/convert.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return convert; });\n/* harmony import */ var _simplify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./simplify */ \"./node_modules/geojson-vt/src/simplify.js\");\n/* harmony import */ var _feature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./feature */ \"./node_modules/geojson-vt/src/feature.js\");\n\n\n\n\n// converts GeoJSON feature into an intermediate projected JSON vector format with simplification data\n\nfunction convert(data, options) {\n    var features = [];\n    if (data.type === 'FeatureCollection') {\n        for (var i = 0; i < data.features.length; i++) {\n            convertFeature(features, data.features[i], options, i);\n        }\n\n    } else if (data.type === 'Feature') {\n        convertFeature(features, data, options);\n\n    } else {\n        // single geometry or a geometry collection\n        convertFeature(features, {geometry: data}, options);\n    }\n\n    return features;\n}\n\nfunction convertFeature(features, geojson, options, index) {\n    if (!geojson.geometry) return;\n\n    var coords = geojson.geometry.coordinates;\n    var type = geojson.geometry.type;\n    var tolerance = Math.pow(options.tolerance / ((1 << options.maxZoom) * options.extent), 2);\n    var geometry = [];\n    var id = geojson.id;\n    if (options.promoteId) {\n        id = geojson.properties[options.promoteId];\n    } else if (options.generateId) {\n        id = index || 0;\n    }\n    if (type === 'Point') {\n        convertPoint(coords, geometry);\n\n    } else if (type === 'MultiPoint') {\n        for (var i = 0; i < coords.length; i++) {\n            convertPoint(coords[i], geometry);\n        }\n\n    } else if (type === 'LineString') {\n        convertLine(coords, geometry, tolerance, false);\n\n    } else if (type === 'MultiLineString') {\n        if (options.lineMetrics) {\n            // explode into linestrings to be able to track metrics\n            for (i = 0; i < coords.length; i++) {\n                geometry = [];\n                convertLine(coords[i], geometry, tolerance, false);\n                features.push(Object(_feature__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(id, 'LineString', geometry, geojson.properties));\n            }\n            return;\n        } else {\n            convertLines(coords, geometry, tolerance, false);\n        }\n\n    } else if (type === 'Polygon') {\n        convertLines(coords, geometry, tolerance, true);\n\n    } else if (type === 'MultiPolygon') {\n        for (i = 0; i < coords.length; i++) {\n            var polygon = [];\n            convertLines(coords[i], polygon, tolerance, true);\n            geometry.push(polygon);\n        }\n    } else if (type === 'GeometryCollection') {\n        for (i = 0; i < geojson.geometry.geometries.length; i++) {\n            convertFeature(features, {\n                id: id,\n                geometry: geojson.geometry.geometries[i],\n                properties: geojson.properties\n            }, options, index);\n        }\n        return;\n    } else {\n        throw new Error('Input data is not a valid GeoJSON object.');\n    }\n\n    features.push(Object(_feature__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(id, type, geometry, geojson.properties));\n}\n\nfunction convertPoint(coords, out) {\n    out.push(projectX(coords[0]));\n    out.push(projectY(coords[1]));\n    out.push(0);\n}\n\nfunction convertLine(ring, out, tolerance, isPolygon) {\n    var x0, y0;\n    var size = 0;\n\n    for (var j = 0; j < ring.length; j++) {\n        var x = projectX(ring[j][0]);\n        var y = projectY(ring[j][1]);\n\n        out.push(x);\n        out.push(y);\n        out.push(0);\n\n        if (j > 0) {\n            if (isPolygon) {\n                size += (x0 * y - x * y0) / 2; // area\n            } else {\n                size += Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)); // length\n            }\n        }\n        x0 = x;\n        y0 = y;\n    }\n\n    var last = out.length - 3;\n    out[2] = 1;\n    Object(_simplify__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(out, 0, last, tolerance);\n    out[last + 2] = 1;\n\n    out.size = Math.abs(size);\n    out.start = 0;\n    out.end = out.size;\n}\n\nfunction convertLines(rings, out, tolerance, isPolygon) {\n    for (var i = 0; i < rings.length; i++) {\n        var geom = [];\n        convertLine(rings[i], geom, tolerance, isPolygon);\n        out.push(geom);\n    }\n}\n\nfunction projectX(x) {\n    return x / 360 + 0.5;\n}\n\nfunction projectY(y) {\n    var sin = Math.sin(y * Math.PI / 180);\n    var y2 = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;\n    return y2 < 0 ? 0 : y2 > 1 ? 1 : y2;\n}\n\n\n//# sourceURL=webpack:///./node_modules/geojson-vt/src/convert.js?");

/***/ }),

/***/ "./node_modules/geojson-vt/src/feature.js":
/*!************************************************!*\
  !*** ./node_modules/geojson-vt/src/feature.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return createFeature; });\n\nfunction createFeature(id, type, geom, tags) {\n    var feature = {\n        id: typeof id === 'undefined' ? null : id,\n        type: type,\n        geometry: geom,\n        tags: tags,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n    calcBBox(feature);\n    return feature;\n}\n\nfunction calcBBox(feature) {\n    var geom = feature.geometry;\n    var type = feature.type;\n\n    if (type === 'Point' || type === 'MultiPoint' || type === 'LineString') {\n        calcLineBBox(feature, geom);\n\n    } else if (type === 'Polygon' || type === 'MultiLineString') {\n        for (var i = 0; i < geom.length; i++) {\n            calcLineBBox(feature, geom[i]);\n        }\n\n    } else if (type === 'MultiPolygon') {\n        for (i = 0; i < geom.length; i++) {\n            for (var j = 0; j < geom[i].length; j++) {\n                calcLineBBox(feature, geom[i][j]);\n            }\n        }\n    }\n}\n\nfunction calcLineBBox(feature, geom) {\n    for (var i = 0; i < geom.length; i += 3) {\n        feature.minX = Math.min(feature.minX, geom[i]);\n        feature.minY = Math.min(feature.minY, geom[i + 1]);\n        feature.maxX = Math.max(feature.maxX, geom[i]);\n        feature.maxY = Math.max(feature.maxY, geom[i + 1]);\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/geojson-vt/src/feature.js?");

/***/ }),

/***/ "./node_modules/geojson-vt/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/geojson-vt/src/index.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return geojsonvt; });\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert */ \"./node_modules/geojson-vt/src/convert.js\");\n/* harmony import */ var _clip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clip */ \"./node_modules/geojson-vt/src/clip.js\");\n/* harmony import */ var _wrap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wrap */ \"./node_modules/geojson-vt/src/wrap.js\");\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transform */ \"./node_modules/geojson-vt/src/transform.js\");\n/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tile */ \"./node_modules/geojson-vt/src/tile.js\");\n\n     // GeoJSON conversion and preprocessing\n           // stripe clipping algorithm\n           // date line processing\n // coordinate transformation\n     // final simplified tile generation\n\nfunction geojsonvt(data, options) {\n    return new GeoJSONVT(data, options);\n}\n\nfunction GeoJSONVT(data, options) {\n    options = this.options = extend(Object.create(this.options), options);\n\n    var debug = options.debug;\n\n    if (debug) console.time('preprocess data');\n\n    if (options.maxZoom < 0 || options.maxZoom > 24) throw new Error('maxZoom should be in the 0-24 range');\n    if (options.promoteId && options.generateId) throw new Error('promoteId and generateId cannot be used together.');\n\n    var features = Object(_convert__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(data, options);\n\n    this.tiles = {};\n    this.tileCoords = [];\n\n    if (debug) {\n        console.timeEnd('preprocess data');\n        console.log('index: maxZoom: %d, maxPoints: %d', options.indexMaxZoom, options.indexMaxPoints);\n        console.time('generate tiles');\n        this.stats = {};\n        this.total = 0;\n    }\n\n    features = Object(_wrap__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(features, options);\n\n    // start slicing from the top tile down\n    if (features.length) this.splitTile(features, 0, 0, 0);\n\n    if (debug) {\n        if (features.length) console.log('features: %d, points: %d', this.tiles[0].numFeatures, this.tiles[0].numPoints);\n        console.timeEnd('generate tiles');\n        console.log('tiles generated:', this.total, JSON.stringify(this.stats));\n    }\n}\n\nGeoJSONVT.prototype.options = {\n    maxZoom: 14,            // max zoom to preserve detail on\n    indexMaxZoom: 5,        // max zoom in the tile index\n    indexMaxPoints: 100000, // max number of points per tile in the tile index\n    tolerance: 3,           // simplification tolerance (higher means simpler)\n    extent: 4096,           // tile extent\n    buffer: 64,             // tile buffer on each side\n    lineMetrics: false,     // whether to calculate line metrics\n    promoteId: null,        // name of a feature property to be promoted to feature.id\n    generateId: false,      // whether to generate feature ids. Cannot be used with promoteId\n    debug: 0                // logging level (0, 1 or 2)\n};\n\nGeoJSONVT.prototype.splitTile = function (features, z, x, y, cz, cx, cy) {\n\n    var stack = [features, z, x, y],\n        options = this.options,\n        debug = options.debug;\n\n    // avoid recursion by using a processing queue\n    while (stack.length) {\n        y = stack.pop();\n        x = stack.pop();\n        z = stack.pop();\n        features = stack.pop();\n\n        var z2 = 1 << z,\n            id = toID(z, x, y),\n            tile = this.tiles[id];\n\n        if (!tile) {\n            if (debug > 1) console.time('creation');\n\n            tile = this.tiles[id] = Object(_tile__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(features, z, x, y, options);\n            this.tileCoords.push({z: z, x: x, y: y});\n\n            if (debug) {\n                if (debug > 1) {\n                    console.log('tile z%d-%d-%d (features: %d, points: %d, simplified: %d)',\n                        z, x, y, tile.numFeatures, tile.numPoints, tile.numSimplified);\n                    console.timeEnd('creation');\n                }\n                var key = 'z' + z;\n                this.stats[key] = (this.stats[key] || 0) + 1;\n                this.total++;\n            }\n        }\n\n        // save reference to original geometry in tile so that we can drill down later if we stop now\n        tile.source = features;\n\n        // if it's the first-pass tiling\n        if (!cz) {\n            // stop tiling if we reached max zoom, or if the tile is too simple\n            if (z === options.indexMaxZoom || tile.numPoints <= options.indexMaxPoints) continue;\n\n        // if a drilldown to a specific tile\n        } else {\n            // stop tiling if we reached base zoom or our target tile zoom\n            if (z === options.maxZoom || z === cz) continue;\n\n            // stop tiling if it's not an ancestor of the target tile\n            var m = 1 << (cz - z);\n            if (x !== Math.floor(cx / m) || y !== Math.floor(cy / m)) continue;\n        }\n\n        // if we slice further down, no need to keep source geometry\n        tile.source = null;\n\n        if (features.length === 0) continue;\n\n        if (debug > 1) console.time('clipping');\n\n        // values we'll use for clipping\n        var k1 = 0.5 * options.buffer / options.extent,\n            k2 = 0.5 - k1,\n            k3 = 0.5 + k1,\n            k4 = 1 + k1,\n            tl, bl, tr, br, left, right;\n\n        tl = bl = tr = br = null;\n\n        left  = Object(_clip__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(features, z2, x - k1, x + k3, 0, tile.minX, tile.maxX, options);\n        right = Object(_clip__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(features, z2, x + k2, x + k4, 0, tile.minX, tile.maxX, options);\n        features = null;\n\n        if (left) {\n            tl = Object(_clip__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(left, z2, y - k1, y + k3, 1, tile.minY, tile.maxY, options);\n            bl = Object(_clip__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(left, z2, y + k2, y + k4, 1, tile.minY, tile.maxY, options);\n            left = null;\n        }\n\n        if (right) {\n            tr = Object(_clip__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(right, z2, y - k1, y + k3, 1, tile.minY, tile.maxY, options);\n            br = Object(_clip__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(right, z2, y + k2, y + k4, 1, tile.minY, tile.maxY, options);\n            right = null;\n        }\n\n        if (debug > 1) console.timeEnd('clipping');\n\n        stack.push(tl || [], z + 1, x * 2,     y * 2);\n        stack.push(bl || [], z + 1, x * 2,     y * 2 + 1);\n        stack.push(tr || [], z + 1, x * 2 + 1, y * 2);\n        stack.push(br || [], z + 1, x * 2 + 1, y * 2 + 1);\n    }\n};\n\nGeoJSONVT.prototype.getTile = function (z, x, y) {\n    var options = this.options,\n        extent = options.extent,\n        debug = options.debug;\n\n    if (z < 0 || z > 24) return null;\n\n    var z2 = 1 << z;\n    x = ((x % z2) + z2) % z2; // wrap tile x coordinate\n\n    var id = toID(z, x, y);\n    if (this.tiles[id]) return Object(_transform__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.tiles[id], extent);\n\n    if (debug > 1) console.log('drilling down to z%d-%d-%d', z, x, y);\n\n    var z0 = z,\n        x0 = x,\n        y0 = y,\n        parent;\n\n    while (!parent && z0 > 0) {\n        z0--;\n        x0 = Math.floor(x0 / 2);\n        y0 = Math.floor(y0 / 2);\n        parent = this.tiles[toID(z0, x0, y0)];\n    }\n\n    if (!parent || !parent.source) return null;\n\n    // if we found a parent tile containing the original geometry, we can drill down from it\n    if (debug > 1) console.log('found parent tile z%d-%d-%d', z0, x0, y0);\n\n    if (debug > 1) console.time('drilling down');\n    this.splitTile(parent.source, z0, x0, y0, z, x, y);\n    if (debug > 1) console.timeEnd('drilling down');\n\n    return this.tiles[id] ? Object(_transform__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.tiles[id], extent) : null;\n};\n\nfunction toID(z, x, y) {\n    return (((1 << z) * y + x) * 32) + z;\n}\n\nfunction extend(dest, src) {\n    for (var i in src) dest[i] = src[i];\n    return dest;\n}\n\n\n//# sourceURL=webpack:///./node_modules/geojson-vt/src/index.js?");

/***/ }),

/***/ "./node_modules/geojson-vt/src/simplify.js":
/*!*************************************************!*\
  !*** ./node_modules/geojson-vt/src/simplify.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return simplify; });\n\n// calculate simplification data using optimized Douglas-Peucker algorithm\n\nfunction simplify(coords, first, last, sqTolerance) {\n    var maxSqDist = sqTolerance;\n    var mid = (last - first) >> 1;\n    var minPosToMid = last - first;\n    var index;\n\n    var ax = coords[first];\n    var ay = coords[first + 1];\n    var bx = coords[last];\n    var by = coords[last + 1];\n\n    for (var i = first + 3; i < last; i += 3) {\n        var d = getSqSegDist(coords[i], coords[i + 1], ax, ay, bx, by);\n\n        if (d > maxSqDist) {\n            index = i;\n            maxSqDist = d;\n\n        } else if (d === maxSqDist) {\n            // a workaround to ensure we choose a pivot close to the middle of the list,\n            // reducing recursion depth, for certain degenerate inputs\n            // https://github.com/mapbox/geojson-vt/issues/104\n            var posToMid = Math.abs(i - mid);\n            if (posToMid < minPosToMid) {\n                index = i;\n                minPosToMid = posToMid;\n            }\n        }\n    }\n\n    if (maxSqDist > sqTolerance) {\n        if (index - first > 3) simplify(coords, first, index, sqTolerance);\n        coords[index + 2] = maxSqDist;\n        if (last - index > 3) simplify(coords, index, last, sqTolerance);\n    }\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(px, py, x, y, bx, by) {\n\n    var dx = bx - x;\n    var dy = by - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = bx;\n            y = by;\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = px - x;\n    dy = py - y;\n\n    return dx * dx + dy * dy;\n}\n\n\n//# sourceURL=webpack:///./node_modules/geojson-vt/src/simplify.js?");

/***/ }),

/***/ "./node_modules/geojson-vt/src/tile.js":
/*!*********************************************!*\
  !*** ./node_modules/geojson-vt/src/tile.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return createTile; });\n\nfunction createTile(features, z, tx, ty, options) {\n    var tolerance = z === options.maxZoom ? 0 : options.tolerance / ((1 << z) * options.extent);\n    var tile = {\n        features: [],\n        numPoints: 0,\n        numSimplified: 0,\n        numFeatures: 0,\n        source: null,\n        x: tx,\n        y: ty,\n        z: z,\n        transformed: false,\n        minX: 2,\n        minY: 1,\n        maxX: -1,\n        maxY: 0\n    };\n    for (var i = 0; i < features.length; i++) {\n        tile.numFeatures++;\n        addFeature(tile, features[i], tolerance, options);\n\n        var minX = features[i].minX;\n        var minY = features[i].minY;\n        var maxX = features[i].maxX;\n        var maxY = features[i].maxY;\n\n        if (minX < tile.minX) tile.minX = minX;\n        if (minY < tile.minY) tile.minY = minY;\n        if (maxX > tile.maxX) tile.maxX = maxX;\n        if (maxY > tile.maxY) tile.maxY = maxY;\n    }\n    return tile;\n}\n\nfunction addFeature(tile, feature, tolerance, options) {\n\n    var geom = feature.geometry,\n        type = feature.type,\n        simplified = [];\n\n    if (type === 'Point' || type === 'MultiPoint') {\n        for (var i = 0; i < geom.length; i += 3) {\n            simplified.push(geom[i]);\n            simplified.push(geom[i + 1]);\n            tile.numPoints++;\n            tile.numSimplified++;\n        }\n\n    } else if (type === 'LineString') {\n        addLine(simplified, geom, tile, tolerance, false, false);\n\n    } else if (type === 'MultiLineString' || type === 'Polygon') {\n        for (i = 0; i < geom.length; i++) {\n            addLine(simplified, geom[i], tile, tolerance, type === 'Polygon', i === 0);\n        }\n\n    } else if (type === 'MultiPolygon') {\n\n        for (var k = 0; k < geom.length; k++) {\n            var polygon = geom[k];\n            for (i = 0; i < polygon.length; i++) {\n                addLine(simplified, polygon[i], tile, tolerance, true, i === 0);\n            }\n        }\n    }\n\n    if (simplified.length) {\n        var tags = feature.tags || null;\n        if (type === 'LineString' && options.lineMetrics) {\n            tags = {};\n            for (var key in feature.tags) tags[key] = feature.tags[key];\n            tags['mapbox_clip_start'] = geom.start / geom.size;\n            tags['mapbox_clip_end'] = geom.end / geom.size;\n        }\n        var tileFeature = {\n            geometry: simplified,\n            type: type === 'Polygon' || type === 'MultiPolygon' ? 3 :\n                type === 'LineString' || type === 'MultiLineString' ? 2 : 1,\n            tags: tags\n        };\n        if (feature.id !== null) {\n            tileFeature.id = feature.id;\n        }\n        tile.features.push(tileFeature);\n    }\n}\n\nfunction addLine(result, geom, tile, tolerance, isPolygon, isOuter) {\n    var sqTolerance = tolerance * tolerance;\n\n    if (tolerance > 0 && (geom.size < (isPolygon ? sqTolerance : tolerance))) {\n        tile.numPoints += geom.length / 3;\n        return;\n    }\n\n    var ring = [];\n\n    for (var i = 0; i < geom.length; i += 3) {\n        if (tolerance === 0 || geom[i + 2] > sqTolerance) {\n            tile.numSimplified++;\n            ring.push(geom[i]);\n            ring.push(geom[i + 1]);\n        }\n        tile.numPoints++;\n    }\n\n    if (isPolygon) rewind(ring, isOuter);\n\n    result.push(ring);\n}\n\nfunction rewind(ring, clockwise) {\n    var area = 0;\n    for (var i = 0, len = ring.length, j = len - 2; i < len; j = i, i += 2) {\n        area += (ring[i] - ring[j]) * (ring[i + 1] + ring[j + 1]);\n    }\n    if (area > 0 === clockwise) {\n        for (i = 0, len = ring.length; i < len / 2; i += 2) {\n            var x = ring[i];\n            var y = ring[i + 1];\n            ring[i] = ring[len - 2 - i];\n            ring[i + 1] = ring[len - 1 - i];\n            ring[len - 2 - i] = x;\n            ring[len - 1 - i] = y;\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/geojson-vt/src/tile.js?");

/***/ }),

/***/ "./node_modules/geojson-vt/src/transform.js":
/*!**************************************************!*\
  !*** ./node_modules/geojson-vt/src/transform.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return transformTile; });\n\n// Transforms the coordinates of each feature in the given tile from\n// mercator-projected space into (extent x extent) tile space.\nfunction transformTile(tile, extent) {\n    if (tile.transformed) return tile;\n\n    var z2 = 1 << tile.z,\n        tx = tile.x,\n        ty = tile.y,\n        i, j, k;\n\n    for (i = 0; i < tile.features.length; i++) {\n        var feature = tile.features[i],\n            geom = feature.geometry,\n            type = feature.type;\n\n        feature.geometry = [];\n\n        if (type === 1) {\n            for (j = 0; j < geom.length; j += 2) {\n                feature.geometry.push(transformPoint(geom[j], geom[j + 1], extent, z2, tx, ty));\n            }\n        } else {\n            for (j = 0; j < geom.length; j++) {\n                var ring = [];\n                for (k = 0; k < geom[j].length; k += 2) {\n                    ring.push(transformPoint(geom[j][k], geom[j][k + 1], extent, z2, tx, ty));\n                }\n                feature.geometry.push(ring);\n            }\n        }\n    }\n\n    tile.transformed = true;\n\n    return tile;\n}\n\nfunction transformPoint(x, y, extent, z2, tx, ty) {\n    return [\n        Math.round(extent * (x * z2 - tx)),\n        Math.round(extent * (y * z2 - ty))];\n}\n\n\n//# sourceURL=webpack:///./node_modules/geojson-vt/src/transform.js?");

/***/ }),

/***/ "./node_modules/geojson-vt/src/wrap.js":
/*!*********************************************!*\
  !*** ./node_modules/geojson-vt/src/wrap.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return wrap; });\n/* harmony import */ var _clip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clip */ \"./node_modules/geojson-vt/src/clip.js\");\n/* harmony import */ var _feature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./feature */ \"./node_modules/geojson-vt/src/feature.js\");\n\n\n\n\nfunction wrap(features, options) {\n    var buffer = options.buffer / options.extent;\n    var merged = features;\n    var left  = Object(_clip__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(features, 1, -1 - buffer, buffer,     0, -1, 2, options); // left world copy\n    var right = Object(_clip__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(features, 1,  1 - buffer, 2 + buffer, 0, -1, 2, options); // right world copy\n\n    if (left || right) {\n        merged = Object(_clip__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(features, 1, -buffer, 1 + buffer, 0, -1, 2, options) || []; // center world copy\n\n        if (left) merged = shiftFeatureCoords(left, 1).concat(merged); // merge left into center\n        if (right) merged = merged.concat(shiftFeatureCoords(right, -1)); // merge right into center\n    }\n\n    return merged;\n}\n\nfunction shiftFeatureCoords(features, offset) {\n    var newFeatures = [];\n\n    for (var i = 0; i < features.length; i++) {\n        var feature = features[i],\n            type = feature.type;\n\n        var newGeometry;\n\n        if (type === 'Point' || type === 'MultiPoint' || type === 'LineString') {\n            newGeometry = shiftCoords(feature.geometry, offset);\n\n        } else if (type === 'MultiLineString' || type === 'Polygon') {\n            newGeometry = [];\n            for (var j = 0; j < feature.geometry.length; j++) {\n                newGeometry.push(shiftCoords(feature.geometry[j], offset));\n            }\n        } else if (type === 'MultiPolygon') {\n            newGeometry = [];\n            for (j = 0; j < feature.geometry.length; j++) {\n                var newPolygon = [];\n                for (var k = 0; k < feature.geometry[j].length; k++) {\n                    newPolygon.push(shiftCoords(feature.geometry[j][k], offset));\n                }\n                newGeometry.push(newPolygon);\n            }\n        }\n\n        newFeatures.push(Object(_feature__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(feature.id, type, newGeometry, feature.tags));\n    }\n\n    return newFeatures;\n}\n\nfunction shiftCoords(points, offset) {\n    var newPoints = [];\n    newPoints.size = points.size;\n\n    if (points.start !== undefined) {\n        newPoints.start = points.start;\n        newPoints.end = points.end;\n    }\n\n    for (var i = 0; i < points.length; i += 3) {\n        newPoints.push(points[i] + offset, points[i + 1], points[i + 2]);\n    }\n    return newPoints;\n}\n\n\n//# sourceURL=webpack:///./node_modules/geojson-vt/src/wrap.js?");

/***/ }),

/***/ "./node_modules/long/src/long.js":
/*!***************************************!*\
  !*** ./node_modules/long/src/long.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/long/src/long.js?");

/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// minimal library entry point.\r\n\r\n\r\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"./node_modules/protobufjs/src/index-minimal.js\");\r\n\n\n//# sourceURL=webpack:///./node_modules/protobufjs/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\r\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"./node_modules/protobufjs/src/writer_buffer.js\");\r\nprotobuf.Reader       = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\r\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"./node_modules/protobufjs/src/reader_buffer.js\");\r\n\r\n// Utility\r\nprotobuf.util         = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\r\nprotobuf.rpc          = __webpack_require__(/*! ./rpc */ \"./node_modules/protobufjs/src/rpc.js\");\r\nprotobuf.roots        = __webpack_require__(/*! ./roots */ \"./node_modules/protobufjs/src/roots.js\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/index-minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = Reader;\r\n\r\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/reader.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/reader_buffer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/roots.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"./node_modules/protobufjs/src/rpc/service.js\");\r\n\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/rpc.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = Service;\r\n\r\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/rpc/service.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = LongBits;\r\n\r\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/util/longbits.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"./node_modules/@protobufjs/aspromise/index.js\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"./node_modules/@protobufjs/base64/index.js\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"./node_modules/@protobufjs/eventemitter/index.js\");\r\n\r\n// float handling accross browsers\r\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"./node_modules/@protobufjs/float/index.js\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"./node_modules/@protobufjs/inquire/index.js\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"./node_modules/@protobufjs/utf8/index.js\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"./node_modules/@protobufjs/pool/index.js\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"./node_modules/protobufjs/src/util/longbits.js\");\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/util/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = Writer;\r\n\r\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/writer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/writer_buffer.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/harp-worker.ts":
/*!****************************!*\
  !*** ./src/harp-worker.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nself.importScripts(\"https://cdnjs.cloudflare.com/ajax/libs/three.js/99/three.js\");\nconst index_worker_1 = __webpack_require__(/*! @here/harp-omv-datasource/index-worker */ \"./node_modules/@here/harp-omv-datasource/index-worker.js\");\nconst index_worker_2 = __webpack_require__(/*! @here/harp-geojson-datasource/index-worker */ \"./node_modules/@here/harp-geojson-datasource/index-worker.js\");\nindex_worker_1.OmvTileDecoderService.start();\nindex_worker_1.OmvTilerService.start(); // TODO: See if this can be separated to get 2 scripts of smaller sizes.\nindex_worker_2.GeoJsonTileDecoderService.start(); // TODO: after adding the features datasource, test if this can be removed, normally yes.\n\n\n//# sourceURL=webpack:///./src/harp-worker.ts?");

/***/ }),

/***/ "three":
/*!************************!*\
  !*** external "THREE" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = THREE;\n\n//# sourceURL=webpack:///external_%22THREE%22?");

/***/ })

/******/ });